using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;
using UnityEngine.Profiling;

public class GameController : MonoBehaviour{

	// [WP,WKn,WB,WR,WQ,WK, bp,bkn,bb,br,bq,bk]
	public GameObject fromtwo;
	public GameObject fromthree;
	public GameObject totwo;
	public GameObject tothree;
	public List<GameObject> piecePrefabs;
	public List<GameObject> twoDimensionPieces;
	public Camera camera;
	public GameObject selection;
	public GameObject twoSelection;
	public GameObject chosen;
	public GameObject twoChosen;
	public GameObject gameOverButton;
	public PieceVals pieceVals;
	public GameObject threePieces;
	public GameObject twoPieces;
	public Text whiteTimeText;
	public Text blackTimeText;
	public Text moveLogText;
	public GameObject whiteTurn;
	public GameObject blackTurn;

	List<uint[]> openingLines = new List<uint[]> {new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0xd2c, 0xa6, 0x8da, 0x31c, 0xc61, 0x724, 0xdef, 0x99f, 0xda6, 0x566, 0xbe6, 0x7e6, 0xe73, 0x92d, 0xeb1, 0x396, 0xaa2, 0x6e3, 0xee9, 0x14e, 0xf3a, 0x106, 0x859, 0x498, 0xa61, 0x210, 0xcf9, 0x419, 0x899, 0xde, 0xc63, 0x142},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb73, 0x113, 0xd65, 0x355, 0x95d, 0x8b, 0xced, 0x6a2, 0xba6, 0x8ab, 0xcab, 0x2, 0xd2e, 0x4a1, 0xf75, 0xca, 0xb7c, 0x218, 0xde7, 0x4cd, 0xdbd},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xf74, 0x102, 0xf3e, 0x35d, 0xa9b, 0x2db, 0xee0, 0x15a, 0xeb3, 0x724, 0xae4, 0x764, 0xcea, 0x98b, 0xb73, 0x4a3, 0x83b, 0x8f4, 0xef4, 0x1c4, 0xf7b, 0x6de, 0xcfd, 0x685},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xc61, 0x9ad, 0xdad, 0x4a3, 0xb65, 0x153, 0xeac, 0xe7, 0xf76, 0x106, 0x95d, 0x29a, 0x85a, 0x4da, 0xf3e, 0x2, 0xe39, 0x251, 0xef3, 0x143, 0xfbf, 0x9df},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xc61, 0x9ad, 0xdad, 0x4a3, 0xb65, 0x153, 0xeac, 0xe7, 0xffe, 0x396, 0xf9e, 0x35d, 0x91d, 0x102, 0x95c, 0x4dc, 0x756, 0x8ed, 0xeed, 0x72a, 0xf3b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xce3, 0x723, 0xb63, 0x564, 0xaa4, 0x124, 0xcaa, 0x2db, 0xd2b, 0x904, 0xedf, 0x396, 0x7d7, 0x94, 0xe9e, 0xd3, 0xe3c, 0x4b, 0xf2c, 0x218, 0x5e7},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xdef, 0x994, 0xeb3, 0x35d, 0xf74, 0x153, 0xc61, 0x81, 0xef2, 0x3d7, 0xaa0, 0x39e, 0x859, 0x48c, 0x81a, 0x4da, 0xc9a, 0x316, 0xa20, 0x1c5},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x29a, 0xfad, 0x52, 0xceb, 0x14c, 0xa9b, 0xdb, 0xf76, 0xa6, 0xf3e, 0x6cb, 0xeac, 0x2, 0xee0, 0x355, 0xf7a, 0x251, 0xc28, 0x498, 0x80b, 0x10b, 0xb73, 0x39e, 0xd6d, 0x994, 0xb65, 0x725},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xee9, 0xcb, 0xa49, 0x1, 0x250, 0x765, 0xe6a, 0x96c, 0xd6c, 0x6ea, 0xc6a, 0x724, 0xae4, 0x9ad, 0xdad, 0x49c, 0xf74, 0x14c, 0xde7, 0x51, 0x418, 0x72d},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xeb1, 0x2db, 0xf7c, 0x4b, 0xd3d, 0x218, 0xdef, 0x44a, 0x91b, 0x49b, 0xa99, 0x281, 0xca2, 0x6e3, 0xb73, 0x10, 0x89a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xe6a, 0x102, 0xae3, 0x723, 0xb63, 0x6ea, 0xc6a, 0x51b, 0xd24, 0x6e2, 0xeac, 0x49c, 0xf7c, 0x3df, 0xdef, 0x39e, 0xef2, 0x7a6, 0xbe7},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xeb3, 0x35d, 0xf74, 0x6d5, 0xc61, 0x724, 0x859, 0x92d, 0x652, 0x2d2, 0xdad, 0x99f, 0xae3, 0x81, 0xaa0, 0x765, 0xe3a, 0x48b, 0xef2},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xe6a, 0x15a, 0xeb3, 0x102, 0xe3a, 0x691, 0xaa4, 0x3df, 0xde7, 0x52f, 0xdaf, 0x2ef, 0xe92, 0x252, 0xef2, 0x81, 0xf7a, 0x39e, 0xc20},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x54b, 0xc20, 0x210, 0xb73, 0x1, 0xd65, 0x259, 0xfbf, 0x355, 0xd3e, 0xca, 0xfad, 0x4a1, 0x819, 0x419, 0xb67, 0x396, 0xced},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x29a, 0xf76, 0x94, 0xfad, 0x52, 0xf3e, 0x14c, 0xceb, 0x106, 0xeb3, 0xcb, 0xa9b, 0x51b, 0xcea, 0x355, 0xc20, 0x251, 0xb73, 0x6d4, 0xce2, 0x1, 0xee9, 0x142, 0xf7a, 0x8a, 0xa7b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x14c, 0xd2c, 0x106, 0xf74, 0x35d, 0xef2, 0x187, 0xf3e, 0xc4, 0xc61, 0x315, 0xeb1, 0x724, 0xb7c, 0x765, 0xae4, 0x96c, 0xc55, 0xb35, 0xf75, 0x6d5, 0xe73, 0xa6},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xea5, 0x716, 0x96e, 0x195, 0xe73, 0x3df, 0xdef, 0x7e7, 0xbb7, 0x153, 0xdd3, 0xd3, 0xd2c, 0x8b, 0xef2, 0x102, 0xfad, 0x59c, 0xf3a, 0x396, 0xb5c, 0x4dc, 0xf6b, 0x29a, 0xaa2},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x6e1, 0xceb, 0x9d, 0xb24, 0x766, 0xc28, 0x850, 0xc61, 0x9ad, 0xdad, 0x4a3, 0xb65, 0x153, 0xeac, 0xe7, 0xffe, 0x396, 0xf9e, 0x35d, 0x91d, 0x8dd, 0x79d},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0x15a, 0xe6a, 0x691, 0xeb3, 0xcb, 0xe3a, 0x102, 0xaa4, 0x3df, 0xde7, 0x526, 0xea2, 0x39e, 0x9de, 0x7e7, 0xb67, 0x4a3, 0xf7c},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x15a, 0xe6a, 0x355, 0xf3e, 0xcb, 0xeb3, 0x102, 0xe3a, 0x691, 0xaa4, 0x3df, 0x91a, 0x45a, 0xe9a, 0x7e7, 0xb67, 0x39e, 0x9ed, 0x6d1, 0xf7c},
		new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x292, 0x6d2, 0x52, 0xe6a, 0x195, 0xceb, 0x15a, 0xd2c, 0x106, 0xfad, 0xcc, 0xf74, 0x143, 0xb24, 0x3d7, 0xf3e, 0x94, 0xeac, 0x6ac, 0xd6c, 0x2, 0xe3a, 0x259, 0xc28, 0x661, 0xa21, 0x321, 0xef3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xf3e, 0x35d, 0xe6a, 0x94, 0xc28, 0x187, 0xef2, 0xc4, 0xa9b, 0x51b, 0xc61, 0x210, 0xeb1, 0x116, 0xc6a, 0x4, 0xcb1, 0x313, 0x859},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe68, 0x94, 0xb5e, 0x526, 0xefc, 0x6e4, 0xae4, 0x3d7, 0xdef, 0x98b, 0x7ad, 0x2d4, 0xb67, 0x6a2, 0x9dd, 0x321, 0xf2c, 0x144},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x259, 0xb67, 0x144, 0x9dd, 0x305, 0xc20, 0x660, 0xe20, 0x54b, 0xca2, 0x218, 0x828, 0x10, 0xba6, 0x396},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c, 0xcb, 0xb23, 0x6a3, 0xc28, 0x218, 0xdef, 0x994, 0xf7c, 0x18c, 0xbe7, 0x302, 0xe73, 0x93, 0xce4, 0x4cd, 0xb77, 0x14c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x195, 0xca2, 0x1, 0xf3e, 0x14c, 0x89b, 0x49b, 0xee0, 0x8b, 0x808, 0x106, 0xe9e, 0x2e6, 0xdef, 0x994, 0xe6a, 0x6e3, 0xaa4, 0x71},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xaa0, 0x44a, 0xca2, 0x2db, 0xef2, 0x4b, 0x89b, 0x49b, 0xeb1, 0x2c5, 0xe3a, 0x281, 0xae3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0x8da, 0x4da, 0xe73, 0xcc, 0xc69, 0x6e3, 0x652, 0x8ec, 0xce4, 0xb35, 0xfbf, 0x252, 0xe9e, 0x51c, 0xef4, 0x144, 0xa61},
		new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xfad, 0x396, 0xe9e, 0x14e, 0xd2c, 0x89, 0xe73, 0x106, 0xf6b, 0x2d3, 0xf3e, 0x4b, 0xef4, 0x210, 0xc20, 0xca, 0xb24, 0x31c, 0x8dc, 0x4dc, 0xf7b, 0x3d7, 0x7a7, 0x55f, 0x9ee},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xc61, 0x4a3, 0xf74, 0x9ad, 0xd2d, 0x292, 0xf3e, 0x40a, 0xb66, 0x14c, 0xe39, 0x106, 0xa20, 0xd3, 0xeac},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x52, 0xf76, 0x94, 0xfad, 0x15a, 0xf3e, 0x691, 0xceb, 0x355, 0xeb3, 0xcb, 0xa9b, 0x51b, 0xc61, 0x3df, 0xc20, 0x218, 0x858, 0x498, 0xd24, 0x6d4, 0xcec},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x106, 0xf74, 0x35d, 0xf3e, 0x94, 0xef2, 0xc4, 0xc61, 0x315, 0xeb1, 0x724, 0xae4, 0x764, 0xb73, 0x116, 0xfbf, 0x567, 0xffe},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xfad, 0x724, 0xb73, 0x153, 0xca2, 0x292, 0xe6a, 0x18c, 0xee9, 0x2d5, 0x89b, 0x49b, 0xd6d, 0x92d, 0xced, 0x106, 0xf6b, 0x312, 0xf3e, 0x94, 0xeb3, 0x210, 0xcfc, 0xca, 0xdef},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c, 0xcb, 0xb23, 0x6a3, 0xdef, 0x994, 0xc28, 0x218, 0xf7c, 0x18c, 0xbe7, 0x302, 0xe73, 0x93, 0xce4, 0x4cd, 0xb77},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xf74, 0x102, 0xf3e, 0x35d, 0xdef, 0x99f, 0xb24, 0x6e5, 0xea5, 0x725, 0x91d, 0x81, 0xae3, 0x7ed, 0xd2d, 0x4a3, 0xb64},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xf74, 0x35d, 0xef2, 0x14c, 0xeb3, 0x6d1, 0xf3a, 0x9ad, 0xdad, 0x327, 0xcfc, 0x81, 0xeb9, 0x2cc, 0xffe},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x94, 0xef2, 0x35d, 0xc61, 0x315, 0xeb1, 0x724, 0xae4, 0x571, 0x91b, 0xc78, 0x6d4, 0xd5, 0xf50, 0x483, 0x409, 0xc9, 0xc92},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xca2, 0x1, 0xf3e, 0x14c, 0xe6a, 0x6e3, 0xaa4, 0x564, 0xda4, 0xcb, 0xd2c, 0x35d, 0x936, 0x49a, 0xf7c, 0x724, 0xd6d},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x106, 0xe6a, 0x94, 0xf74, 0x35d, 0xf3e, 0xc4, 0xeb3, 0x116, 0xc61, 0x210, 0xa9b, 0x51b, 0xcea, 0x187, 0xef2, 0x4, 0xcb1},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xc28, 0x35d, 0xef2, 0x94, 0xf3e, 0xc4, 0xc61, 0x315, 0xeb1, 0x724, 0xb7c, 0x116, 0xe73, 0x3, 0xae4, 0x764, 0xd22},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x218, 0xd2c, 0x14c, 0xf74, 0x106, 0xf3e, 0x35d, 0xe6a, 0x94, 0xef2, 0x187, 0xf7c, 0x315, 0xe39, 0x39e, 0xa9b, 0x51b, 0xb24, 0x764},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x195, 0xe6a, 0x723, 0xb23, 0x161, 0xf6b, 0x6e2, 0xae2, 0x106, 0xfb4, 0x2d1, 0x8ab, 0x144, 0xf3e, 0xa6, 0xe9e, 0x3d7, 0x7a7, 0x86a, 0xc6a, 0x45b, 0xe3a, 0x29a},
		new uint[] {0x2db, 0xce3, 0x29a, 0xca2, 0x195, 0xd2c, 0x6a3, 0xb23, 0x52, 0xe6a, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e, 0xa6, 0x89b, 0x55b, 0xdef, 0x994, 0xf7c, 0x210, 0xeac, 0x187, 0xb1e, 0x355, 0x7a7, 0x6ea},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0x218, 0xc28, 0x850, 0xeac, 0xa6, 0xe3a, 0x15a, 0xf74, 0x9ad, 0xd2d, 0x4a3, 0xb66, 0x106, 0xf3e, 0x292, 0xfbf, 0xcc},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xc61, 0x9ad, 0xdad, 0x4a3, 0xf76, 0x153, 0xab4, 0x8f4, 0xef4, 0x29a, 0xb65, 0x106, 0xf3e, 0xe7},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0xaa2, 0x724, 0x89b, 0x4a1, 0xce4, 0x564, 0xa21, 0x106, 0xee3, 0xcc, 0xea8, 0xa6},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0x15a, 0xe6a, 0x691, 0xeb3, 0xcb, 0xee0, 0x102, 0xf7a, 0x3df, 0xaa4, 0x81, 0x91a, 0x45a, 0xe9a, 0x6d1},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x210, 0x652, 0x252, 0xfb4, 0xde, 0xef2, 0x7b6, 0xffe, 0xdb7, 0x89b, 0x18c, 0xe6a, 0x35d, 0xeb3, 0xdd3, 0x6d2, 0x4d2, 0xd25, 0x1, 0xf3a, 0x1c6},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x15a, 0xca2, 0x18c, 0xf3e, 0x106, 0xe6a, 0x94, 0xef2, 0x2, 0xf7b, 0x51d, 0xcb3, 0x6e3, 0xaa0, 0x693, 0xc61, 0x81},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x314, 0xeb1, 0x153, 0xca2, 0x106, 0xf74, 0x251, 0xf3e, 0x89, 0x89b, 0x51b, 0xce3, 0x4b, 0xe6a, 0x2, 0xe3a, 0xcc, 0xf7c, 0x143, 0xd3d, 0x314, 0xdae, 0x3d7},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xceb, 0x2d3, 0xd65, 0x1, 0xc20, 0x210, 0xfad, 0x106, 0xf3e, 0x259, 0x819, 0x419, 0xdef, 0x661, 0xab4, 0x89, 0xeac, 0x40, 0xe3a, 0x30},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x195, 0xe73, 0x314, 0xf3e, 0x2, 0xcaa, 0x153, 0x8da, 0x4da, 0xb63, 0x9b4, 0xef4, 0x106, 0x8d2, 0x92, 0xb24, 0xca, 0x91c, 0x54b, 0xced, 0x142},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xaa0, 0x44a, 0xca2, 0x2db, 0xef2, 0x4b, 0xeb3, 0x2c5, 0xf7c, 0x154, 0xdae},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x14c, 0xc28, 0x106, 0xfad, 0x94, 0xf59, 0x498, 0xf3e, 0x6ea, 0xc6a, 0x35d, 0x674, 0x313, 0xaa2, 0x29a, 0xeb1, 0x612, 0xceb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xea8, 0x251, 0xf59, 0x8b, 0x674, 0x14e, 0xcaa, 0x2d2, 0xce3, 0x564, 0xb73, 0x933, 0xe73, 0x4b, 0xf3e, 0x106, 0xe3a, 0x31c, 0xa61, 0x144, 0x8dc},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c, 0x18c, 0xdef, 0x994, 0xb23, 0x6a3, 0xe73, 0x316, 0xc28, 0x218, 0xbe7, 0x14c, 0x9df, 0x585, 0xb77},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x15a, 0xee9, 0x6d1, 0xd2c, 0x94, 0xa72, 0x106, 0xc28, 0x35d, 0xf74, 0x693, 0xc61, 0xd5, 0xeb1, 0x557, 0xf3e, 0x155, 0x859},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x724, 0xea5, 0x195, 0xd2c, 0x14c, 0xe73, 0x106, 0xfb4, 0x55f, 0x96e, 0x4b, 0xaa2, 0x292, 0xd2a, 0x7ee, 0xd6e, 0x2d5, 0xf74, 0x94, 0x89b, 0x49b, 0xee9, 0x1, 0xe3a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0xfad, 0x52, 0x89b, 0x55b, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0x15a, 0xe6a, 0xcb, 0xeb3, 0x102, 0xe3a, 0x691, 0xaa4, 0x3df, 0xde7, 0x526, 0xea2, 0x81, 0xc61},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x355, 0xd24, 0x6d1, 0xeac, 0x94, 0xf74, 0xcb, 0xf3e, 0x102, 0xc61, 0x39e, 0x859, 0x4a3, 0xb23, 0x723, 0xa20, 0x81, 0x818},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x94, 0xd24, 0x6d1, 0xeac, 0xcb, 0xe73, 0x355, 0xf74, 0x39e, 0xdef, 0x3df, 0xc61, 0x102, 0xce9, 0x2cd, 0xe39, 0x81, 0xa5a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x195, 0xf76, 0x396, 0xf3e, 0x14e, 0xceb, 0x52, 0xe73, 0x106, 0xd24, 0x3d7, 0xcaa, 0x31c, 0x91b, 0x55b, 0xf7c, 0x144, 0xc20, 0x1, 0xce2, 0x251, 0xeb3, 0x9d, 0xee9},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x396, 0xc28, 0x14e, 0xfad, 0x106, 0xa9b, 0xdb, 0xf62, 0x9d, 0xceb, 0x6cb, 0xdef, 0x3, 0xb24, 0x754, 0xf34, 0x522, 0xca2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xcaa, 0x153, 0x8da, 0x4da, 0xb63, 0x9b4, 0xef4, 0x106, 0x8d2, 0x92, 0xb24, 0x6e4, 0xce4, 0x564, 0xd24},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xce3, 0x723, 0xb63, 0x564, 0xaa4, 0x124, 0xcaa, 0x463, 0xaa3, 0x2db, 0xd2b, 0x914},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xca2, 0x6e3, 0xb23, 0x6a3, 0xceb, 0x14e, 0xdae, 0x195, 0xf76, 0x52, 0xf3e, 0x106, 0xc28, 0x218, 0xe73, 0x54b, 0xf7c, 0x2da, 0xce9, 0x690, 0xeb3, 0x3d7},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x153, 0xf76, 0x18c, 0xf3e, 0x106, 0xc28, 0x218, 0xf7c, 0x3d7, 0xe73, 0x316, 0xef2, 0x35d, 0x89a, 0x4ca},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xfad, 0x6e1, 0xf59, 0x210, 0x652, 0x852, 0xce3, 0x723, 0xb23, 0x153, 0xf3e, 0x106, 0x8db, 0x48c, 0xee3, 0x31d, 0x8eb, 0x767},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x94, 0xc28, 0x39e, 0xdef, 0x35d, 0xb24, 0x6e5, 0xbe7, 0x7a7, 0x91d, 0x51d, 0xb67, 0x96b, 0xf6b, 0x76b, 0xedf, 0x10b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xe6a, 0x94, 0xf3e, 0x35d, 0xef2, 0x315, 0xc28, 0x187, 0xe39, 0x218, 0xf7c, 0x39e, 0xa9b, 0x51b},
		new uint[] {0x2db, 0xce3, 0x195, 0xd2c, 0x29a, 0xca2, 0x6a3, 0xb23, 0x396, 0xe6a, 0x14e, 0xfad, 0x52, 0xf74, 0x106, 0xf3e, 0xa6, 0x89b, 0x55b, 0xdef, 0x994, 0xf7c, 0x210, 0xeac, 0x187, 0xb1e, 0x355},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xeb1, 0x51c, 0x859, 0x498, 0xaa2, 0x724, 0xb63, 0x106, 0x89b, 0x144, 0xdae, 0xa6},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x15a, 0xf3e, 0x18c, 0xca2, 0x106, 0xe6a, 0x94, 0x89b, 0x49b, 0xe9e, 0x355, 0xaa0, 0x693, 0x7ac, 0x6e3},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x52, 0xf76, 0x94, 0xfad, 0x15a, 0xf3e, 0x691, 0xc20, 0x218, 0xb5e, 0xde, 0xa9b, 0x79f, 0x6d1, 0x291, 0xdad, 0x7d6, 0xceb, 0x4a3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x52, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x15a, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xeb3, 0x691, 0xe3a, 0x102, 0xaa4, 0x3df, 0xde7, 0x526, 0xea2, 0x55d},
		new uint[] {0x31c, 0xca2, 0x52, 0xd2c, 0x195, 0xc28, 0x2db, 0x89b, 0x55b, 0xef2, 0x14c, 0xfad, 0x106, 0xceb, 0x35d, 0xf74, 0x94, 0xf3e, 0xc4, 0xc61, 0x315, 0xeb1, 0x724, 0xae4, 0x764, 0xb73, 0x116},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x94, 0xb5e, 0x526, 0xdef, 0x99f, 0xda6, 0x7d6, 0xf76, 0x14c, 0xbe7, 0x31e, 0xe9e, 0x355, 0x7b3, 0x58d, 0xe6a, 0xcb},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x14c, 0xd24, 0x6d1, 0xf74, 0x106, 0xf3e, 0x94, 0xeac, 0xcb, 0xe73, 0x218, 0xe3a, 0x620, 0xef2, 0x143, 0xf7c, 0x355},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xee9, 0x6d1, 0xe73, 0xd5, 0xf74, 0x102, 0xa72, 0x153, 0xc61, 0x210, 0xeb1, 0x1c4, 0xf3a, 0x54c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xc69, 0x153, 0xeb1, 0x106, 0xe73, 0xcc, 0xca2, 0x143, 0xb5c, 0x7d6, 0x89b, 0x51b, 0x716, 0x356},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c, 0xcb, 0xb23, 0x6a3, 0xf7c, 0x18c, 0xc28, 0x218, 0xe73, 0x483, 0xce4, 0x312, 0xee0, 0x10},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xeb3, 0x35d, 0xc61, 0x9ad, 0xdad, 0x81, 0xee9, 0x6ea, 0xcea, 0x2c4, 0xe30, 0x765},
		new uint[] {0x29a, 0xca2, 0x52, 0xfad, 0x195, 0xe6a, 0x396, 0xdae, 0x2db, 0x89b, 0x55b, 0xf76, 0x14e, 0xa9b, 0xdb, 0xf3e, 0x106, 0xceb, 0x6d3, 0xc28, 0x8b, 0xea5, 0x31c, 0x96c, 0x251, 0xb73, 0x2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x195, 0xb23, 0x6a3, 0xceb, 0x52, 0xdae, 0x31c, 0xf76, 0x3d7, 0xf3e, 0x153, 0xc61, 0x4a1, 0xf7c, 0x106, 0xb5c, 0x144, 0xc28, 0x850, 0x72d},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x106, 0xfad, 0x2d3, 0xceb, 0x292, 0xf3e, 0x691, 0xc28, 0x4b, 0x8b0, 0x3d7, 0xdef, 0x144, 0xb67, 0x2c5, 0xeed, 0x154, 0x9dd, 0x523, 0x763},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xc69, 0x153, 0xeb1, 0x195, 0xf3e, 0x106, 0xca2, 0x498, 0x89b, 0x51b, 0x674, 0x210, 0xef2, 0x259, 0xc20, 0x661, 0xceb, 0x144, 0xf7c},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xceb, 0x396, 0xc28, 0x14e, 0xeb3, 0x106, 0xfad, 0x144, 0xf74, 0x6ea, 0xcea, 0x218, 0xf3e, 0x620, 0xb73, 0x94, 0xef2},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xe6a, 0x94, 0xf3e, 0x35d, 0xef2, 0x6e1, 0xcb9, 0x315, 0xc28, 0x85b, 0xe72, 0x187, 0xe39},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x723, 0xb23, 0x195, 0xe6a, 0x161, 0xf6b, 0x106, 0xfb4, 0x6e2, 0xae2, 0x2d1, 0x8ab, 0x45b, 0xf3e, 0x292, 0xe9e, 0xd8, 0x7a7, 0x853, 0xdef},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xce3, 0x723, 0xfad, 0x161, 0xcaa, 0x8ea, 0xe6a, 0x2db, 0xf6b, 0x106, 0xf3e, 0x4b, 0xe9e, 0x2da, 0xaf2, 0x86a, 0xc6a, 0xd3, 0x795, 0x155, 0xb67},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0xcc, 0xc61, 0x691, 0xe6a, 0x143, 0x89a, 0x44a, 0xa99, 0x52, 0x64a, 0x30a, 0xeb1, 0x6e3, 0xef2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x314, 0xfad, 0x195, 0x89b, 0x51b, 0xf74, 0x6a3, 0xb63, 0x153, 0xe6a, 0x106, 0xf3e, 0x144, 0xd2d, 0x4dc, 0xab4, 0x564, 0xd2a, 0xd3, 0xdef},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x52, 0xf59, 0xa6, 0xeb1, 0x314, 0x652, 0x252, 0xceb, 0x54b, 0xdef, 0x99f, 0xe73, 0x355, 0xef4, 0x51c, 0xb24, 0x153, 0xda6, 0x7cd, 0xb67},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xca2, 0x6e2, 0xf3e, 0x195, 0xe68, 0x396, 0xa22, 0x14e, 0x89c, 0x106, 0x712, 0x252, 0x674, 0x31c, 0xceb, 0x724, 0xae4, 0x564, 0xef2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0x195, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb73, 0x94, 0xd65, 0x355, 0x95d, 0x50d, 0xba6, 0x218, 0xd2e},
		new uint[] {0x2db, 0xd65, 0x396, 0xfad, 0x14e, 0xdae, 0x195, 0xf76, 0x106, 0xf3e, 0x29a, 0xceb, 0x52, 0xcaa, 0x6e3, 0xd24, 0xd3, 0xe68, 0x9d, 0xb5c, 0x49c, 0x95c, 0x4dc, 0xa22, 0x70a, 0xea5},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xceb, 0x39e, 0xdef, 0x3df, 0xe6a, 0x1c6, 0xbe7, 0x7a7, 0xb67, 0xa6, 0x9ed, 0xcb, 0xee9, 0x6d1, 0xc28, 0x14c, 0xeb3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xf3e, 0x35d, 0xe6a, 0x94, 0xeb3, 0x187, 0xc28, 0xc4, 0xc61, 0x210, 0xef9, 0x315, 0xa9b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x35d, 0xd2c, 0x14c, 0xf74, 0x106, 0xf3e, 0x187, 0xef2, 0x218, 0xe6a, 0x94, 0xf7c, 0x315, 0xe39, 0xcb, 0xeb3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x35d, 0xd24, 0x6d5, 0xe73, 0x218, 0xf74, 0x153, 0xf3e, 0x106, 0x91d, 0x187, 0xce2, 0x9d, 0xe9e, 0xc4, 0xe3a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xef2, 0xd5, 0xf74, 0x102, 0xe73, 0x39e, 0xc61, 0x9ad, 0xced, 0x7a6, 0xb73, 0x765, 0xd26},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0xf74, 0xcc, 0x72b, 0x86a, 0xc6a, 0x6e4, 0xaf1, 0x52, 0xf3e, 0x144, 0xc62, 0x55b, 0x8ac, 0x94, 0xb1b, 0x51b, 0xaa2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x106, 0xf3e, 0x52, 0xb5c, 0xca, 0x712, 0x292, 0xca2, 0x143, 0xceb, 0x251, 0xd2d, 0x89, 0xef4, 0x48a, 0xe6a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xdef, 0x994, 0xf74, 0x35d, 0xa9b, 0x51b, 0xc61, 0x153, 0xeb1, 0x81, 0xf3e},
		new uint[] {0x2db, 0xfad, 0x52, 0xce3, 0x31c, 0x8dc, 0x355, 0x715, 0x195, 0xe9e, 0x3d7, 0x795, 0xd5, 0xcaa, 0x94, 0xd2c, 0x153, 0xf74, 0x106, 0xe73, 0x14d, 0xf3e, 0x5, 0xee9, 0x39e, 0xb24},
		new uint[] {0x29a, 0xd2c, 0x52, 0xce3, 0x2db, 0xfad, 0xa6, 0xf74, 0x6a3, 0xb23, 0x314, 0xe73, 0x153, 0xcaa, 0x18c, 0xf3e, 0xca, 0xf7c, 0x106, 0xcfd, 0x355, 0xf6e, 0x3, 0xb67, 0x9b4, 0xef4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xaa0, 0x44a, 0xca2, 0x2db, 0xef2, 0x4b, 0x82a, 0x6e2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x153, 0xf76, 0x3d7, 0xf3e, 0x195, 0xc28, 0x218, 0xf7c, 0x106, 0xe73, 0x144, 0xef2, 0x9d},
		new uint[] {0x31c, 0xca2, 0x292, 0xfad, 0x724, 0xb63, 0x2db, 0xe6a, 0x195, 0x89b, 0x49b, 0xceb, 0x15a, 0xd2c, 0x106, 0xf74, 0xcc, 0xf3e, 0x52, 0x8d2, 0x252, 0xae4, 0x6e4, 0xef2, 0x31c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x2db, 0x91b, 0x106, 0xb5c, 0x144, 0xce3, 0x6a3, 0xee3, 0x52, 0x8e0, 0x49c, 0xeac, 0xa6, 0xdef, 0x99f, 0xda6, 0x72d, 0xf34, 0x259},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x314, 0xd2c, 0x15a, 0xf59, 0x106, 0xf3e, 0xcc, 0xe73, 0x51c, 0x96e, 0x693, 0xba7, 0x724, 0xb63, 0x49c},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0x218, 0xe6a, 0xcc, 0x89b, 0x143, 0xf74, 0x51b, 0xf3e, 0x52, 0xb63, 0x31c, 0x8ed, 0x71f},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xeb1, 0x106, 0x859, 0x49c, 0xf74, 0x72d, 0xced, 0x51c, 0xf3e, 0xcc},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0xaa2, 0x724, 0x89b, 0x4a1, 0xce4, 0x564, 0xa21, 0xd5},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xe6a, 0x94, 0xf3e, 0x35d, 0xef2, 0x6d1, 0xc28, 0x218, 0xc69, 0x315, 0xe39, 0xcc},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x15a, 0xc28, 0x106, 0xc61, 0x691, 0xf74, 0xd5, 0xef2, 0x556, 0xe6a, 0x6ea, 0xcaa, 0x144, 0xeb1, 0xa6},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xf59, 0xa6, 0xe73, 0x6a3, 0xb23, 0x314, 0xca2, 0x153, 0xee0, 0xca, 0x89a, 0x4e5, 0xf3e, 0x106, 0xf7c, 0x54b, 0xdae, 0x957},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xce3, 0x52, 0xf74, 0xa6, 0xdef, 0x99f, 0xf3e, 0x314, 0xc69, 0x153, 0xeb1, 0x106, 0xe73, 0xcc, 0xca2, 0x143, 0xb5c, 0x7d6, 0x89b, 0x51b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xf3e, 0x210, 0x652, 0x292, 0xc69, 0xa6, 0xeb1, 0x355, 0xdef, 0x99f, 0xce3, 0x314, 0xe73, 0x6a3, 0xb63, 0x7fb, 0x8d2, 0xedf},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c, 0xcb, 0xb23, 0x4a3, 0xeac, 0x18c, 0xb23, 0x6a3, 0xe73, 0x312, 0xc28, 0x14c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xd24, 0x18c, 0xcaa, 0xcb, 0xe73, 0x6e3, 0xaa3, 0x6a3, 0xc28, 0x39e, 0xde7, 0x7a6, 0xb77, 0x1c6},
		new uint[] {0x195, 0xca2, 0x396, 0xdae, 0x29a, 0xf76, 0x14e, 0xe6a, 0x52, 0xd2c, 0x106, 0xfb4, 0x2d3, 0xf3e, 0x8b, 0xce3, 0x210, 0xc69, 0x1, 0xeb1, 0x259, 0x899, 0x419, 0x8da, 0x4da},
		new uint[] {0x195, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x29a, 0xcaa, 0x2db, 0xce3, 0x6a3, 0xaa3, 0x52, 0xf3e, 0x564, 0xe6a, 0x106, 0xd2c, 0x92a, 0xc6a, 0x498, 0xb73, 0x9d, 0xea8, 0x2},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0xd2c, 0x195, 0xfad, 0x153, 0xf74, 0x106, 0xf3e, 0xcc, 0x89b, 0x49b, 0xe6a, 0x94, 0xc69, 0x52, 0x8eb, 0x210, 0xeb1, 0x3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xc69, 0x14c, 0xeb1, 0x7ed, 0xd2d, 0x6a3, 0xb23, 0x106, 0xef4, 0xd1, 0xf7b, 0x3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xe68, 0x14c, 0xca2, 0x6e3, 0xd2c, 0x106, 0xb23, 0x723, 0xea5, 0x94, 0xf7c, 0x3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xcaa, 0x153, 0x8da, 0x4da, 0xb63, 0x9b4, 0xef4, 0x106, 0x8d2, 0x92, 0xb24, 0xca},
		new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x396, 0xfad, 0x251, 0xf74, 0x14e, 0xf3e, 0x106, 0xca2, 0x89, 0xe6a, 0x314, 0x8db, 0x51b, 0x89b, 0x144, 0xb7c, 0x2d3, 0xd6d, 0x250, 0xb24},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x106, 0xf7c, 0x54b, 0xe73, 0x218, 0xc28, 0x620, 0xe39},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0xcc, 0xf74, 0x143, 0xf3e, 0x29a, 0x85a, 0x45a, 0xef3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xab9, 0x2db, 0xe73, 0x4b, 0xeb1, 0x44a, 0xca2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x314, 0xd2c, 0x15a, 0xf59, 0x106, 0xf3e, 0x55f, 0x95e, 0x355, 0x7a7, 0x39e, 0xb63, 0x7ce, 0x9ee},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x210, 0xeb1, 0x52, 0xce3, 0x6a3, 0xb63, 0x314, 0xf74, 0x161, 0xcaa, 0x853, 0xf3e, 0x51c, 0x8d2, 0x252, 0xaa2, 0x106, 0x89b},
		new uint[] {0x29a, 0xfad, 0x2db, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x52, 0xceb, 0x195, 0xe73, 0x106, 0xd24, 0x31c, 0xcaa, 0x3d7, 0xee9, 0x144, 0x91b, 0x55b, 0xb7c, 0x6d1, 0xc20},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xc61, 0x9ad, 0xdad, 0x4a3, 0xf76, 0x396, 0xb65, 0x725, 0x91c},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x52, 0xf76, 0x94, 0xfad, 0x15a, 0xf3e, 0x691, 0xc20, 0x355, 0xce3, 0x463, 0xb63, 0x723, 0xa99, 0x6cc, 0xea5},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x14c, 0xc28, 0x106, 0xfad, 0x187, 0xa9b, 0xdb, 0xf62, 0x6d3, 0xde7, 0x35d, 0xb5e, 0x724, 0xceb},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xfad, 0x14c, 0xd2c, 0x106, 0xf74, 0x94, 0xf3e, 0x35d, 0xeb3, 0x187, 0xa9b, 0x51b, 0xcea, 0x313, 0xb73},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x292, 0xeb3, 0x2db, 0xfb4, 0x106, 0xd2e, 0x6e3, 0xab9, 0x49a, 0xf74, 0x52, 0xf3e, 0x633, 0xe73, 0x94, 0xb9f},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xf59, 0x8b, 0xef4, 0x396, 0xe6a, 0x14e, 0x64b, 0x4b, 0xceb, 0x106, 0xc20, 0x31c, 0xb24, 0x6e3, 0xab9, 0x544, 0xf3e, 0x113, 0xe68},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x106, 0xf3e, 0x52, 0xb5c, 0x49c, 0xc5c, 0x544, 0x70e, 0x10e, 0xce3, 0xd8, 0xefc, 0x63c, 0xf7c},
		new uint[] {0x29a, 0xfad, 0x2db, 0xdae, 0x52, 0xceb, 0x31c, 0xf76, 0x14c, 0xf3e, 0x195, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb73, 0x355, 0xd65, 0x113, 0x95d, 0x8b, 0xba6},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0xe6a, 0x195, 0x89b, 0x49b, 0xd24, 0x52, 0xf59, 0x8b, 0x652, 0x2d2, 0x91c, 0x564, 0xaa4, 0x6e4, 0xfb4, 0xd8, 0xeb3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x195, 0xca2, 0x52, 0x89b, 0x55b, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0x106, 0xe6a, 0x94, 0xeb3, 0xcb, 0xa9b, 0x51b, 0xcea, 0x355, 0xc20},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xeb3, 0x35d, 0xf74, 0x6d5, 0xc61, 0x153, 0x859, 0x48c, 0xef2},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x35d, 0xd2c, 0xd5, 0xee9, 0x210, 0xe6a, 0x6d1, 0xa72, 0x39e, 0xc61, 0x7a6, 0xb73, 0x94, 0xeb1},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xf74, 0x106, 0xe6a, 0x94, 0xf3e, 0x35d, 0xef2, 0x187, 0xeb3, 0xc4, 0xc28, 0x116, 0xc61},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0x52, 0xcaa, 0xa6, 0xe73, 0x6a3, 0xaa3, 0x314, 0xf74, 0x153, 0xf3e, 0xca, 0xf7c, 0x106, 0xcfd, 0x3d7, 0xb5c, 0x99d, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xe6a, 0x18c, 0xc28, 0xcb, 0xe39, 0x3df, 0xde7, 0x102, 0xc61, 0x52f, 0xd24, 0xbf6, 0xfb6},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xd24, 0x6e3, 0xb67, 0xcb, 0xedf, 0x396, 0x9d6, 0x2cd, 0x585, 0x35f, 0x154, 0x10c, 0x51a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xf76, 0x195, 0xf3e, 0x14e, 0xceb, 0x106, 0xe6a, 0x6e3, 0xaa0, 0x54b, 0xca2, 0x52, 0xc28, 0x1, 0xe39, 0x251, 0xc61, 0xca, 0xef2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0xa6, 0xe68, 0xcb, 0xd24, 0x6e3, 0xefc, 0x303, 0xa22, 0xca, 0xc20, 0x18c, 0xeb3, 0x355, 0xde7},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xe73, 0xcb, 0xca2, 0x18c, 0xc28, 0x102, 0xee0, 0x81, 0xc61, 0x6e2, 0xae2, 0x4a3, 0xb63},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xe73, 0x6a3, 0xb23, 0x153, 0xf3e, 0x195, 0xf7c, 0xca, 0xcfd, 0x106, 0xcaa, 0x4, 0xb5c, 0x9b4, 0xef4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x6a1, 0xc28, 0x868, 0xea8, 0x52, 0xceb, 0x195, 0xdae, 0x31c, 0xa05, 0x105, 0xf76, 0x396, 0xf3e, 0x14e, 0xe73, 0x1c4},
		new uint[] {0x31c, 0xca2, 0x292, 0xd2c, 0x2db, 0xce3, 0x723, 0xb23, 0x195, 0xe6a, 0x14c, 0xf6b, 0x6e2, 0xae2, 0x4b, 0xfb4, 0x106, 0xf3e, 0x2d1, 0x8a9, 0x144, 0xd25, 0x313},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xaa0, 0x6a1, 0xcaa, 0x8ea, 0xc6a, 0x84c, 0xdef, 0x995, 0x91c, 0x564, 0xf6b, 0x2db, 0xef2, 0x8b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xca2, 0x195, 0x89b, 0x55b, 0xce3, 0x14e, 0xb24, 0x6d5, 0x8db, 0x106, 0xe6a, 0x314, 0xf62, 0x51b, 0x91b, 0x4b, 0xf3e, 0x2d1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x153, 0xca2, 0x18c, 0xce3, 0x6a3, 0x89b, 0x51b, 0xb63, 0x106, 0xe6a, 0x4ca, 0x66b, 0x49c, 0xaf4, 0x210},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x195, 0xf3e, 0x153, 0xe6a, 0x106, 0xe9e, 0x724, 0xae4, 0x6e4, 0xb63, 0x3d7, 0x8d2, 0x252, 0x7a5, 0x94},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xd24, 0x6e1, 0xceb, 0x29a, 0xf74, 0x52, 0xc28, 0x850, 0xdef, 0x14c, 0xeac, 0x106, 0xd26, 0x40a, 0xfad, 0xd3},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xd24, 0x6e1, 0xceb, 0x52, 0xc28, 0x850, 0xc61, 0x4a3, 0xfb4, 0x29a, 0xa9b, 0x6a1, 0xd23, 0x723, 0xeb3, 0x94},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0x106, 0xf3e, 0x6d1, 0xeac, 0x35d, 0xaa0, 0x765, 0xb1a, 0x313},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xceb, 0x94, 0xfad, 0x35d, 0xf74, 0x14c, 0xf3e, 0x106, 0xeb3, 0x187, 0xa9b, 0x51b, 0xcea, 0x313},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2db, 0x91b, 0x49b, 0x899, 0x8b, 0xb5c, 0x2d9, 0xa99, 0x6b5, 0xf35, 0xd1, 0xce3, 0x564, 0xd6d, 0x355},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xe73, 0x195, 0xcaa, 0x153, 0x8da, 0x4da, 0xb63, 0x9b4, 0xef4, 0x106, 0x8d2, 0x252, 0xb24, 0x51c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x15a, 0xf3e, 0x18c, 0xca2, 0x106, 0xe6a, 0x94, 0xe9e, 0x355, 0xaa0, 0x6b5},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb7c, 0x113, 0xd65, 0x8b, 0xf2d, 0x355},
		new uint[] {0x195, 0xca2, 0x29a, 0xdae, 0x2db, 0xf76, 0x31c, 0xee0, 0x52, 0xe6a, 0x6e3, 0xa9b, 0x8b, 0x6d5, 0xd5, 0xceb, 0x543, 0xfad, 0x14c, 0xf3e, 0x106, 0xc28, 0x218},
		new uint[] {0x2db, 0xd65, 0x396, 0xfad, 0x14e, 0xdae, 0x29a, 0xf76, 0x52, 0xf3e, 0x195, 0xceb, 0x106, 0xefc, 0x6e3, 0xe68, 0x1, 0xeb3, 0x259, 0xcaa, 0x8ea, 0xc6a, 0x210},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xe6a, 0x15a, 0xeb3, 0x3df, 0xa9b, 0x51b, 0xc61, 0x691},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xe6a, 0x15a, 0xeb3, 0x102, 0xee0, 0x691, 0xf7a, 0x3df},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xe73, 0x15a, 0xee0, 0xcb, 0xd2c, 0x102, 0xc61, 0x691, 0xeb1, 0x1c4, 0xce2, 0x724},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2d3, 0xceb, 0x259, 0x8a9, 0x218, 0xc28, 0x106, 0xf3e, 0x4b, 0xab4, 0x691, 0xd2e, 0x2da, 0xa70, 0x8},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x195, 0xce3, 0x6a3, 0xb23, 0xa6, 0xdef, 0x9ad, 0xeed, 0xd8, 0xe6a, 0x314, 0xf3e, 0x14c, 0xc28, 0x106, 0xeac, 0x60a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xce3, 0x52, 0x8da, 0x31c, 0xf59, 0xa6, 0xca2, 0x15a, 0x89b, 0x55b, 0x652, 0x252, 0xee0, 0x6e1, 0xc28, 0x86b, 0xf34, 0xcb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xf59, 0x4b, 0xc69, 0x210, 0x64b, 0x8b, 0xeb1, 0x2e6, 0xceb, 0x314, 0xe73, 0xca, 0xdef, 0x99f, 0xc20, 0x153, 0xef4, 0x102},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x355, 0xd2c, 0x94, 0xf74, 0xcb, 0xf3e, 0x39e, 0xc28, 0x102, 0xa9b, 0x51b, 0xc61, 0x81},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x292, 0xf74, 0x144, 0xf3e, 0x55b, 0xaa4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xaa0, 0x44a, 0xca2, 0x2db, 0x82a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xaa0, 0x44a, 0xca2, 0x2db, 0xb73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x106, 0xe73, 0x54b, 0xc28, 0x218, 0xf7c},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x724, 0xaa2, 0x6e2, 0xe6a, 0x161, 0xd2c, 0x94, 0xfb4, 0x292, 0xeb3, 0x86a, 0xd2a, 0x35d, 0xda6, 0x766, 0xaa4, 0x195, 0x915},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x195, 0x89b, 0x723, 0xee3, 0x15a, 0x8eb, 0x106, 0xfad, 0x2d1, 0xe6a, 0x45b, 0xa9b, 0x55b, 0xc28, 0x144, 0xaf2},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x723, 0xb23, 0x195, 0xfad, 0x161, 0xeb3, 0x873, 0xe73, 0x106, 0xf74, 0x6e2, 0xce2, 0x2d1, 0x89c, 0x55b, 0xef3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x292, 0xf62, 0x4b, 0xf3e, 0x44a, 0x70d},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x314, 0xfad, 0x195, 0x89b, 0x51b, 0xf74, 0x6a3, 0xb63, 0x153, 0xe6a, 0x106, 0xf3e, 0x144, 0x8ed, 0x210, 0xc69},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xcaa, 0x314, 0xfad, 0x153, 0xe73, 0x106, 0xf6b, 0x4b, 0xf3e, 0x51c, 0xb24, 0x6a3, 0xaa3, 0x723, 0x91b, 0x2dc, 0xb5c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x314, 0xd2c, 0x4b, 0xe73, 0x153, 0xf6b, 0x106, 0xf3e, 0x51c, 0x8dc, 0x2dc, 0xb5c, 0x4dc, 0xdef, 0x251, 0xced},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0xaa2, 0x724, 0x89b, 0x4a1, 0xb5e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x210, 0x652, 0x252, 0xca2, 0x355, 0xce3, 0x6a3, 0xb23, 0x314, 0xf3e, 0x153, 0xe6a, 0x18c, 0xf7c, 0x106, 0x89b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x52, 0xd24, 0x195, 0xe73, 0x31c, 0xf74, 0x396, 0xf3e, 0x14e, 0xcaa, 0x106, 0xc28, 0x218, 0xa20, 0x3d7, 0xf7c, 0x94, 0x91b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x52, 0xd24, 0x195, 0xe73, 0x396, 0xf74, 0x14e, 0xcaa, 0x106, 0xf3e, 0x31c, 0xc28, 0x218, 0xa20, 0x3d7, 0xf7c, 0x94, 0xd3d},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x29a, 0x8e9, 0x35d, 0xae4, 0x6e4, 0xe6a, 0x94, 0xea5, 0x52, 0xd2c, 0x195, 0xef3, 0x14c, 0xf3a, 0x106, 0xf74},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xe73, 0x726, 0xfad, 0x153, 0xd2c, 0x195, 0xf6b, 0xcc, 0xdef, 0x99c, 0xb5c, 0x31c, 0xced, 0x70c, 0xef2},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xca2, 0x314, 0xd2c, 0x15a, 0xfad, 0x106, 0xc28, 0xcc, 0xc61, 0x691, 0xeb1, 0x52, 0xe73, 0x143, 0xef9, 0x6e3, 0xb23},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x195, 0xf76, 0x396, 0xcaa, 0x14e, 0xce3, 0x6a3, 0xaa3, 0x52, 0xf3e, 0x564, 0xd2c, 0x106, 0xb73, 0x35d, 0xe6a, 0x94, 0xce4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x210, 0xeb1, 0x52, 0xce3, 0x6a3, 0xb63, 0xca, 0x8d2, 0x252, 0xf74, 0x31c, 0xf3e, 0x153, 0xca2, 0x106, 0xefa},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x153, 0xce3, 0x18c, 0xca2, 0x106, 0x89b, 0x51b, 0x8da, 0x4da, 0xe6a, 0xa6, 0x674, 0x210, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xca2, 0x106, 0xe6a, 0x6e3, 0xaa0, 0x54b, 0xc28, 0xca, 0xe39, 0x251, 0xc61},
		new uint[] {0x195, 0xfad, 0x29a, 0xc69, 0x396, 0xca2, 0x14e, 0xeb1, 0x106, 0xdae, 0x52, 0xf76, 0x2db, 0x89b, 0xdb, 0xceb, 0x143, 0xe73, 0x251, 0xf3e, 0x89, 0xe3a},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0xdae, 0x724, 0xf76, 0x35d, 0xde7, 0x94, 0xfaf, 0x195, 0xe9e, 0x3d7, 0x795, 0xd5, 0x9df, 0x153, 0xd2c, 0x50d, 0xe73},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x35d, 0xc28, 0x94, 0xc61, 0x14c, 0xa9b, 0xdb, 0xeb1, 0x315, 0xe3a, 0x210, 0xf74},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xf74, 0x102, 0xf3e, 0x6d1, 0xee9, 0x355, 0xf7b, 0x4a1, 0xef3},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x723, 0xb23, 0x161, 0xeb3, 0xcc, 0xf74, 0x6e2, 0xfad, 0x2d1, 0xf3e, 0x94, 0xf7c, 0x102, 0xc28, 0x873, 0xe73},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0x8dc, 0x49c, 0xf74, 0x9ad, 0xd2d, 0x195, 0xf3e, 0xcb, 0xe73, 0x102, 0xb74, 0x153, 0xc69, 0x3df, 0xeb1},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x6a3, 0xaa3, 0x195, 0xfad, 0x52, 0xe6a, 0x9d, 0xc28, 0x314, 0xe9e, 0x153, 0xd2c, 0x3d7, 0x795, 0xd5, 0xf6b, 0x76b, 0xeeb},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x6a3, 0xaa3, 0x52, 0xfad, 0x195, 0xe6a, 0x9d, 0xea5, 0x314, 0xd2c, 0x153, 0x953, 0xd3, 0xf6b, 0x76b, 0xeeb, 0x106, 0xf3e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xb5c, 0x7f4, 0xef4, 0x6a3, 0x712, 0x252, 0xb23, 0xd1, 0xd2b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x195, 0xcaa, 0x14e, 0xf59, 0x8b, 0x674, 0xca, 0xf3e, 0x106, 0xe73, 0x2dd, 0xb67, 0x742, 0x9ed, 0x4b, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xca2, 0x6e2, 0xee0, 0x153, 0x822, 0x195, 0xe6a, 0xcc, 0xe9e, 0x94, 0x8a0, 0x106, 0xb73},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xc69, 0x6a3, 0xb63, 0x7f4, 0xef4, 0x4a3, 0xb23, 0x2, 0xeac},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xce3, 0x106, 0xf3e, 0x29a, 0x8da, 0x50, 0xe6a, 0x41a, 0xeac, 0x251, 0xb23, 0x89, 0xc20, 0x2, 0x818},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x9d, 0xf3e, 0x314, 0xca2, 0x6e2, 0xee0, 0x2, 0x8da, 0x15a, 0x822, 0x691, 0xe6a, 0x106, 0x8a0},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xceb, 0x292, 0xaa0, 0x44a, 0xca2, 0x2db, 0xef2, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x6a1, 0xc28, 0x868, 0xea8, 0x52, 0xceb, 0x31c, 0xa05, 0x105, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x195},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x195, 0xf76, 0x14c, 0xf3e, 0x106, 0xf7c, 0x54b, 0xe68, 0x355},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x35d, 0xe73, 0x14c, 0xdae, 0x106, 0xf76, 0x218, 0xf3e, 0x187, 0xef2, 0x315},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2d3, 0xceb, 0x106, 0xf3e, 0x4b, 0xc28, 0x691, 0x8b0, 0x3d7, 0xdef, 0x144, 0xb67, 0x2c5},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x2db, 0x91b, 0x106, 0xf62, 0x724, 0xce3, 0x92d, 0x8da, 0x144, 0xeac, 0x566, 0xee3, 0x52, 0x8e5, 0x49c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x4b, 0x722, 0x292, 0x8db, 0x566},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x195, 0xceb, 0x52, 0xe73, 0x106, 0xd24, 0x31c, 0xcaa, 0x3d7, 0xee9, 0x251, 0x91b, 0x498},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb73, 0x355, 0xd65, 0x39e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb73, 0x355, 0xd65, 0x113},
		new uint[] {0x195, 0xca2, 0x396, 0xe6a, 0x14e, 0xdae, 0x106, 0xf76, 0x2d3, 0xceb, 0x31c, 0xd24, 0x292, 0xfb4, 0x210, 0xf3e, 0x259, 0xc69, 0x89, 0xdef, 0x4b},
		new uint[] {0x29a, 0xdae, 0x2db, 0xf76, 0x52, 0xca2, 0x195, 0x89b, 0x55b, 0xe6a, 0x314, 0xfad, 0x14c, 0xf3e, 0x106, 0xceb, 0x251, 0xa9b, 0x51b, 0xae3, 0x94},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x29a, 0x8e9, 0x92b, 0xcab, 0x195, 0xdae, 0x14c, 0xf76, 0x106, 0xf3e, 0x3d7, 0xe6a, 0x52, 0xea5, 0x9d},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x18c, 0xd24, 0x3d7, 0xe6a, 0x94, 0x91b, 0x31b, 0xeb3, 0x106, 0xf7c, 0x144},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xa9b, 0xdb, 0xf76, 0x106, 0xf3e, 0x3d7, 0xeac, 0x6c3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x14c, 0xd2c, 0x106, 0xf74, 0x35d, 0xf3e, 0x218, 0xe6a, 0x94, 0xef2, 0x187},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x292, 0xf74, 0x4b, 0xf3e, 0xcc},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x31c, 0xd24, 0x195, 0x91b, 0x15a, 0xe6a, 0x106, 0xeac, 0x6ac, 0xd6c, 0xd1, 0xef3, 0x471, 0xe39, 0xc68, 0xfad, 0x4b},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0xcc, 0xc61, 0x691, 0xeb1, 0x143, 0xe73, 0x52, 0xef9, 0x6e3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0x8da, 0x31c, 0xc61, 0x724, 0xdef, 0x99f, 0xda6, 0x566, 0xbe6, 0x7e6, 0xe73, 0x396},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x161, 0xcaa, 0x858, 0xc61, 0x611, 0x859, 0x94, 0x652, 0x18c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xa6, 0xb5c, 0x6a3, 0x726, 0x566, 0xd2c, 0x995, 0xb23, 0x314, 0xf3e, 0x259, 0xcaa, 0x14c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xca2, 0x195, 0x89b, 0x55b, 0xf59, 0x396, 0xf3e, 0x14e, 0xce3, 0x6a3, 0xb63, 0x8b, 0x652, 0x252, 0xb24, 0x6e1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe73, 0x106, 0xcaa, 0x31c, 0xd24, 0x3d7, 0xc28, 0x6e4, 0xae4, 0x94},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xf76, 0x396, 0xf3e, 0x14e, 0xceb, 0x106, 0xe73, 0xca, 0xd24, 0x143, 0xf7c, 0x52, 0xcaa, 0x31c, 0xef4, 0x251},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xca2, 0x6e3, 0xf3e, 0x195, 0xd2c, 0x8ec, 0xeac, 0x153, 0xb1e, 0x106, 0xe6a, 0xc4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x6e3, 0xe73, 0xa6, 0xdef, 0x99f, 0xba6, 0x7d6, 0xb67, 0x3df},
		new uint[] {0x29a, 0xfad, 0x52, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x2d3, 0xceb, 0x1, 0xe6a, 0x195, 0xd24, 0x106, 0xc20, 0x210, 0xdef, 0x259, 0x819, 0x419},
		new uint[] {0x29a, 0xca2, 0x195, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x52, 0xd24, 0x106, 0xfb4, 0x2d3, 0xceb, 0x210, 0xf3e, 0x1, 0xc20, 0x544, 0xeac, 0x4a3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xeb3, 0x35d, 0xf74, 0x6d5, 0xc61, 0x9ad},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0x89b, 0x49b, 0xf59, 0x8b, 0x64b, 0xcb, 0xf3e, 0x161},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xe9e, 0x94, 0xb73, 0x14c, 0xce9, 0x693, 0xe6a, 0x102},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xd24, 0x6e3, 0xcaa, 0xcb, 0xaa3, 0x6a3, 0xc28, 0x153, 0xb67, 0x18c},
		new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x2db, 0xca2, 0x6a3, 0xb23, 0x396, 0xe6a, 0x14e, 0xfad, 0x106, 0xf74, 0x52, 0xf3e, 0xa6, 0xeac, 0x6e2, 0xd22, 0x2},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0x29a, 0xce3, 0x52, 0xf59, 0xa6, 0xdef, 0x9ad, 0xeed, 0x314, 0xf3e, 0x2, 0x8da, 0x15a, 0xca2, 0x106, 0x89b, 0x51b},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x9ad, 0xd2d, 0x2, 0xcaa, 0x153, 0xe73, 0x106, 0x8da, 0x4da},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xc69, 0x2, 0xeb1, 0x6a3, 0xb63, 0x7f4, 0xef4, 0x14c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xcaa, 0x153, 0x8da, 0x4da, 0xb63, 0x9b4, 0xef4, 0x49c},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0x795, 0xd5, 0xeed, 0x724, 0xb64, 0x2d3, 0xf6f, 0x52, 0xfb4, 0x8b, 0xe6a, 0x4},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2db, 0xae3, 0x153, 0xf6b, 0x106, 0xf3e, 0x29a, 0xe9e, 0x6a3, 0xd65, 0x144, 0xacf},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xaa0, 0x6a1, 0xcaa, 0x8ea, 0xc6a, 0x84c, 0xdef, 0x995, 0x91c, 0x564, 0xef2},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xc61, 0x611, 0xf62, 0x144, 0xceb, 0x292, 0xf3e, 0x2db, 0x8a9, 0x3d7, 0xeb1},
		new uint[] {0x195, 0xce3, 0x396, 0xca2, 0x14e, 0xe6a, 0x106, 0xd2c, 0x2d3, 0xfad, 0x4b, 0xf74, 0x31c, 0xf3e, 0x144, 0xc61, 0x724, 0xb73, 0x2c5, 0x859},
		new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x195, 0xe6a, 0x396, 0xf59, 0x14e, 0xf3e, 0x106, 0x91c, 0x544, 0x652, 0x252, 0xdef, 0x10a, 0xf7c, 0x294, 0xceb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x195, 0xf76, 0x14c, 0xf3e, 0x106, 0xc28, 0x218, 0xe9e},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x29a, 0x8e9, 0x35d, 0xae4, 0x6e4, 0xea5, 0x52, 0xd2c, 0x195, 0xf74, 0x14c, 0xf3e, 0x106, 0xd6d},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x35d, 0xfad, 0x195, 0xf3e, 0x106, 0xe39, 0x3d7, 0xc61, 0x59e, 0x859},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x6e1, 0xceb, 0x29a, 0xfad, 0x52, 0xc28, 0x850, 0xf74, 0x14c, 0xf3e, 0x106, 0xc69},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x15a, 0xf76, 0x3d7, 0xf3e, 0x106, 0xc28, 0x691, 0xc61, 0x144, 0xeb1},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x195, 0xfad, 0x723, 0xb23, 0x161, 0xeb3, 0x873, 0xe73, 0x106, 0xf74, 0x6e2, 0xce2, 0x144, 0xf3e},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2db, 0xae3, 0x153, 0xe6a, 0x106, 0xf74, 0x29a, 0xa99, 0x4cc, 0xf3e, 0x52, 0xeac},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x662, 0x2db, 0x91b, 0x106, 0xceb, 0x49b, 0x8a9, 0x6e3, 0xaa0, 0x89, 0xfb4},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x314, 0x89b, 0x51b, 0xf74, 0x153, 0x8da, 0x4da, 0xf3e, 0x106, 0xe6a, 0x210, 0xc28},
		new uint[] {0x2db, 0xfad, 0x29a, 0xcaa, 0x195, 0xce3, 0x52, 0xd2c, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0xaa2, 0x724, 0xb5e},
		new uint[] {0x195, 0xdae, 0x29a, 0xfad, 0x2db, 0xf76, 0x396, 0xce3, 0x6a3, 0xb63, 0x14e, 0xf3e, 0x106, 0x8e9, 0x52, 0xe6a, 0x314, 0xf7c, 0x544, 0xd24},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x314, 0xdae, 0x195, 0xf76, 0x52, 0xf3e, 0x14c, 0x89b, 0x51b, 0xce3, 0x106, 0xe6a, 0x3d7, 0x8da, 0x31a, 0xaa0},
		new uint[] {0x195, 0xdae, 0x29a, 0xf76, 0x2db, 0xfad, 0x396, 0xf3e, 0x14e, 0xceb, 0x106, 0xe73, 0x52, 0xd24, 0x31c, 0xcaa, 0x3d7, 0xee9, 0x6e3, 0xaa3},
		new uint[] {0x195, 0xdae, 0x2db, 0xf76, 0x396, 0xceb, 0x14e, 0xfad, 0x106, 0xf3e, 0x29a, 0xe73, 0x52, 0xd24, 0x31c, 0xcaa, 0x3d7, 0xc28, 0x144, 0xc61},
		new uint[] {0x195, 0xdae, 0x29a, 0xf76, 0x52, 0xfad, 0x2db, 0xceb, 0x31c, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x6e3, 0xab4, 0x544, 0xb7c, 0x113, 0xca2},
		new uint[] {0x29a, 0xca2, 0x195, 0xfad, 0x396, 0xc69, 0x14e, 0xeb1, 0x106, 0xd2c, 0x52, 0xf74, 0x2db, 0x89b, 0xdb, 0xceb, 0x143, 0xc28, 0x251, 0xe73},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xfad, 0x106, 0xf3e, 0x2db, 0x89b, 0x55b, 0xa9b, 0xdb, 0xceb, 0x6d3, 0xe39},
		new uint[] {0x2db, 0xd2c, 0x29a, 0xd65, 0x396, 0xfad, 0x14e, 0xce3, 0x195, 0xcaa, 0x106, 0xf6b, 0x251, 0xef4, 0x89, 0xc69, 0x4b, 0xeb1, 0x564, 0xf3e},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x161, 0xeb3, 0x873, 0xe73, 0x106, 0xf76, 0x94, 0xf3e, 0x35d, 0xe3a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0x106, 0xf3e, 0x6d1, 0xeac, 0x35d, 0xefa},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x723, 0xb23, 0x161, 0xe6a, 0x195, 0x89b, 0xcc, 0xef4, 0x55b, 0xd0c, 0x10c, 0xeb3, 0x2d5, 0xfad},
		new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x15a, 0xb5c, 0xe7, 0x72b, 0x691, 0xe6a, 0x4a1, 0xdae, 0x9d5, 0xd65, 0x563, 0xef4, 0x872, 0xf3b, 0xcb8, 0xc69},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf59, 0x106, 0xf3e, 0x2d3, 0xceb, 0xa6, 0x652, 0x252, 0xef4, 0x144, 0xabb, 0x4db, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x6a3, 0xaa3, 0x52, 0xe6a, 0x9d, 0xd2c, 0x314, 0xf6b, 0x76b, 0xeeb, 0x153, 0xf3e, 0x106, 0xb24},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xd2c, 0x314, 0xfad, 0x52, 0xc28, 0x15a, 0xca2, 0x218, 0xe6a, 0x106, 0xf74, 0xcc, 0x89b, 0x143, 0xb24},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0xcc, 0xc61, 0x691, 0xeb1, 0x143, 0xe73, 0x52, 0xf6b},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xf59, 0x6a3, 0xb23, 0xa6, 0xdef, 0x99f, 0xca2, 0x314, 0xe6a, 0x6e2, 0xda6, 0x7d6, 0xb5c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0x8da, 0x31c, 0xf59, 0xa6, 0xc61, 0x218, 0xcaa, 0x724, 0xdef, 0x92d, 0xbe6, 0xb76, 0xffe},
		new uint[] {0x2db, 0xce3, 0x195, 0xcaa, 0x29a, 0xd2c, 0x314, 0xfad, 0x52, 0xe73, 0xca, 0xf6b, 0x153, 0xf3e, 0x106, 0x8da, 0x4da, 0xc61, 0x68c, 0xeb1},
		new uint[] {0x195, 0xce3, 0x29a, 0xcaa, 0x314, 0xfad, 0x52, 0xd2c, 0xca, 0xe73, 0x2db, 0xf6b, 0x14c, 0xf3e, 0x106, 0x8da, 0x31a, 0xc28, 0x143, 0xef4},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x6a3, 0xb23, 0xa6, 0xf74, 0x314, 0xdef, 0x99f, 0xf3e, 0x153, 0xc69, 0x195, 0xeb1, 0x106, 0xca2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x8b, 0xf76, 0x31c, 0x8e9, 0x2d4, 0xf3e, 0x14c, 0xe6a, 0x195, 0xe9e, 0x6e3, 0x795},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xe73, 0xca, 0xcaa, 0x251, 0xc69, 0x143, 0xeb1, 0x52, 0xa61},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe73, 0x94, 0xcaa, 0x6e3, 0xaa2, 0x544, 0xb7c},
		new uint[] {0x29a, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x31c, 0xf76, 0x94, 0xfad, 0x52, 0xf3e, 0x14c, 0xceb, 0x106, 0xeb3, 0xcb, 0xa9b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xc28, 0xcb, 0xd2c, 0x102, 0xdef, 0x994, 0xeb3, 0x355, 0xc61},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x106, 0xf74, 0x35d, 0xf3e, 0x94, 0xe6a, 0xc4, 0xa9b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x106, 0xef2, 0x35d, 0xe6a, 0x94, 0xf74, 0xc4, 0xf3e},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x724, 0xb73, 0x9b4, 0xef4, 0x35d, 0xf3e, 0x195, 0xca2, 0xcb, 0xe6a, 0x102, 0x89a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xceb, 0x2db, 0x91b, 0xdb, 0xeb3, 0x86a, 0xcea, 0x52, 0xfad, 0xa6, 0xf74, 0x102, 0xf3e, 0x1c4, 0xf7c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xf74, 0x195, 0xfad, 0x6a3, 0xb23, 0xa6, 0xcaa, 0xca, 0xdae, 0x9ad, 0xd2d, 0x31c, 0x8dc, 0x29c, 0xeac},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xf59, 0x8b, 0x674, 0x14e, 0xce3, 0x195, 0xf3e, 0x106, 0xcaa, 0xca, 0xc69, 0x2dd, 0xeb1, 0x4b, 0xe73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xe73, 0xca, 0xcaa, 0x4b, 0xc69, 0x251, 0xc20, 0x89, 0xea8},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0xa6, 0xe73, 0xcb, 0xd24, 0x6e3, 0xce2, 0x355, 0xc20, 0x3df, 0xcaa},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xc28, 0xcb, 0xc69, 0x102, 0xca2, 0x6e2, 0xa62, 0x724, 0xb7c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x195, 0xe6a, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e, 0xa6, 0xeac, 0x2, 0x89a},
		new uint[] {0x396, 0xce3, 0x14e, 0xfad, 0x195, 0xdae, 0x106, 0xf76, 0x2d3, 0xf3e, 0x4b, 0xca2, 0x31c, 0xe6a, 0x292, 0xd24, 0x723, 0xb63, 0x144},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x566, 0xdef, 0x9b5, 0xf35, 0x2db, 0xce3, 0x9d, 0x8dc, 0x15a, 0xd76, 0x764},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2db, 0xae3, 0x153, 0xf74, 0x106, 0xe6a, 0x144, 0xe9e, 0x292, 0xd65, 0x4b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xceb, 0x62a, 0xc6a, 0x2db, 0xb5c, 0x144, 0xd65, 0x6e4, 0xae3, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x292, 0xf62, 0xd3},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0xcc, 0xc28, 0x6e2, 0xf62, 0x106, 0xe6a, 0x51c, 0xc61, 0x724},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x195, 0xe6a, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e, 0x6e2, 0xd22, 0x498},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x6a3, 0xb63, 0x314, 0xf74, 0x15a, 0x89b, 0x51b, 0xe6a, 0x106, 0xf3e, 0x144},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0xaa2, 0x6e3},
		new uint[] {0x195, 0xce3, 0x2db, 0xd2c, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e, 0x29a, 0x8da, 0xca, 0xc28, 0x218, 0xca2, 0x6e2, 0xe6a, 0x29a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0xca, 0xca2, 0x106, 0x89b, 0x55b, 0xe6a, 0x6ea, 0xc6a, 0x251},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x153, 0xca2, 0x18c, 0xce3, 0x6a3, 0x89b, 0x51b, 0xee3, 0x106, 0x8e7, 0x49c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0xe6a, 0x210, 0x652, 0x252, 0x8da, 0x4da},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x153, 0xf3e, 0x18c, 0xe6a, 0x106, 0xd24, 0x6e3, 0xa9b, 0x31b, 0x91b, 0x4a1},
		new uint[] {0x195, 0xfad, 0x396, 0xc69, 0x14e, 0xeb1, 0x106, 0xd2c, 0x2d3, 0xf74, 0x4b, 0xce3, 0x31c, 0xca2, 0x144, 0xe6a, 0x292, 0xf3e, 0xcc},
		new uint[] {0x396, 0xd24, 0x29a, 0xfad, 0x14e, 0xcaa, 0x2db, 0x91b, 0xdb, 0xce3, 0x195, 0xf74, 0x6a3, 0xaa3, 0x106, 0xe6a, 0x6d8, 0xf3e, 0x52},
		new uint[] {0x2db, 0xdae, 0x195, 0xfad, 0x9d, 0xf76, 0x314, 0xf3e, 0x3d7, 0xceb, 0x14c, 0xe73, 0x106, 0xefc, 0x29a, 0xd24, 0x74f, 0xf34, 0x52},
		new uint[] {0x31c, 0xcaa, 0x29a, 0xce3, 0x6a3, 0xaa3, 0x723, 0xfad, 0x161, 0xe73, 0x52, 0xc28, 0xd8, 0xdae, 0x195, 0xf76, 0x106, 0xf3e, 0x873},
		new uint[] {0x31c, 0xca2, 0x52, 0xceb, 0x35d, 0xe6a, 0x195, 0xdae, 0x15a, 0xf76, 0x106, 0xd2c, 0x2d3, 0xfb4, 0xc4, 0xf3e, 0x691, 0xae3, 0x765},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x94, 0xf76, 0x52, 0xfad, 0x14c, 0xf3e, 0x106, 0xce3, 0x723, 0xb63, 0x4a3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x14c, 0xdae, 0x106, 0xf76, 0x6d1, 0xf3e, 0xa6, 0xeac, 0x187},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xe6a, 0x106, 0xf74, 0x94, 0xf3e, 0x35d, 0xeb3, 0x6d1},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0x91b, 0x55b, 0xfad, 0x52, 0xf74, 0x14c, 0xf3e, 0x106, 0xca2, 0x6d5, 0xe6a, 0xa6, 0xeac, 0x144},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xf3e, 0x14c, 0xca2, 0x564, 0xe6a, 0x106, 0x89b, 0x51b, 0xee9, 0x92a},
		new uint[] {0x2db, 0xfad, 0x195, 0xce3, 0xa6, 0xd2c, 0x314, 0xf74, 0x4b, 0xe73, 0x153, 0xca2, 0x292, 0xc69, 0x106, 0xeb1, 0x564, 0xce4, 0x6e4},
		new uint[] {0x2db, 0xd2c, 0x195, 0xca2, 0x292, 0xfad, 0x314, 0xce3, 0x153, 0xe6a, 0x4b, 0xf6b, 0x106, 0xf3e, 0x6e2, 0xae2, 0x51c, 0xef2, 0xcc},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x314, 0xd2c, 0x15a, 0xf59, 0x106, 0xe73, 0xcc, 0x96e, 0x51c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x314, 0xd2c, 0x15a, 0xf59, 0x106, 0xf3e, 0xcc, 0xb5c, 0x39e},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x29a, 0x8da, 0xd8, 0xcaa, 0x61a, 0xea5, 0x396, 0xd2c, 0x14e, 0xe73, 0x52, 0xf74, 0x106, 0xf3e, 0x314},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xcaa, 0x4b, 0xfad, 0x396, 0xe73, 0x14e, 0xf6b, 0x106, 0xf3e, 0xca, 0xf7c, 0x251, 0xb24, 0x6a3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0x8da, 0x31c, 0xc61, 0x724, 0xdef, 0x99f, 0xda6, 0x92d, 0x99f, 0x564},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x52, 0xfad, 0x314, 0xd2c, 0x195, 0xe73, 0xca, 0xf6b, 0x153, 0xf3e, 0x106, 0x8da, 0x4da, 0xef4, 0x3d7},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xcaa, 0x6a3, 0xaa3, 0x52, 0xb5c, 0xd1, 0xe6a, 0x143},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x6a3, 0xb63, 0x8b, 0xf3e, 0x31c, 0x8e9, 0x2d4, 0xe9e, 0x14c, 0xe6a, 0x6e3},
		new uint[] {0x195, 0xfad, 0x2db, 0xd2c, 0x314, 0xc69, 0x153, 0xeb1, 0x106, 0xf74, 0x29a, 0xf3e, 0x251, 0xca2, 0x89, 0x89b, 0x51b, 0xce3, 0xcc},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xca2, 0x6e2, 0xe68, 0x210, 0x652, 0x292, 0xa22, 0x259, 0x89c, 0x49b, 0xce3, 0x6a2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0x91b, 0x55b, 0xf7c, 0x355, 0xcaa, 0x94},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x6e3, 0xe73, 0x106, 0xce2, 0xca, 0xc20, 0x544},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe6a, 0x94, 0xb5e, 0x526, 0xd6d, 0x982},
		new uint[] {0x195, 0xce3, 0x396, 0xcaa, 0x251, 0xe9e, 0x14e, 0xe73, 0x89, 0xfad, 0x106, 0xd2c, 0x2d3, 0xf6b, 0x4b, 0xf3e, 0x29a, 0xf7c, 0xca},
		new uint[] {0x29a, 0xfad, 0x52, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x31c, 0xca2, 0x18c, 0xe6a, 0x106, 0xceb, 0x2d3, 0xe39, 0x1, 0xc69, 0x210},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xce3, 0x251, 0xcaa, 0x90, 0xd10, 0x50, 0xef4, 0xc2},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xeb3, 0x14c, 0xf74, 0x35d},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x52, 0xdae, 0x2db, 0x89b, 0x55b, 0xf76, 0x94, 0xfad, 0x14c, 0xceb, 0x106, 0xf3e, 0xcb, 0xeb3, 0x3d7},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xc61, 0x724, 0xae4, 0x764, 0xef2, 0xcc},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xef2, 0xd5, 0xc61, 0x102, 0x859, 0x724},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x6a3, 0xb23, 0xa6, 0xf74, 0x314, 0xf3e, 0x153, 0xe73, 0xca, 0xf7c, 0x18c, 0xcfd, 0x102},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x6a3, 0xb23, 0xca, 0xe73, 0x153, 0xcaa, 0x18c, 0xf7c, 0x3d7},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x29a, 0xcaa, 0x52, 0xd2c, 0x314, 0xe73, 0xca, 0xf6b, 0x153, 0xf3e, 0x106, 0x8da, 0x4da, 0xef4, 0x8b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xf59, 0x8b, 0x64b, 0xcb, 0xc69, 0x396, 0xeb1, 0x14e, 0xf3e, 0x52, 0xb5c, 0x2ca, 0x712, 0x566},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xe73, 0xcb, 0xf7c, 0x18c, 0xc28, 0x9af},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xee0, 0xcb, 0xd2c, 0x218, 0xc28, 0x10},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2d3, 0xd2c, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xfb4, 0x292, 0xf3e, 0x144, 0xceb, 0x210, 0xb24},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x724, 0xea5, 0x195, 0xd2c, 0x14c, 0xaa2, 0x106, 0xe6a, 0x292, 0x89b, 0x49b, 0xfb4, 0x210, 0x95c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x2db, 0x91b, 0x724, 0xce3, 0x6a1, 0xb5c, 0x55b, 0xf62, 0x6ea, 0x88d, 0x105, 0xedf},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x6e4, 0xeac, 0x292, 0x722},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xce3, 0x723, 0x91c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x2db, 0xe9e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xa20},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xeac},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xb73},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x3d7, 0xdef},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xfad, 0x106, 0xf3e, 0x2db, 0x89b, 0x55b, 0xee9, 0x6ca, 0xceb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x35d, 0xf76, 0x195, 0xf3e, 0x14c, 0xf7c},
		new uint[] {0x2db, 0xd65, 0x29a, 0xd2c, 0x52, 0xfad, 0x314, 0xf59, 0x153, 0x652, 0x252, 0xca2, 0x18c, 0xe6a, 0x106, 0xc69, 0x355, 0xf3e},
		new uint[] {0x31c, 0xcaa, 0x29a, 0xce3, 0x6a3, 0xaa3, 0x723, 0xfad, 0x52, 0xb63, 0x195, 0xe6a, 0x2db, 0xd2c, 0x153, 0xf74, 0x106, 0xf3e},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x724, 0xea5, 0x52, 0xd2c, 0x39e, 0x96e, 0x18c, 0xaa2, 0x3df, 0xde7, 0x31d, 0xbb7, 0x767, 0x89b},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0xfad, 0x195, 0xd2c, 0x14c, 0xe6a, 0x106, 0x89b, 0x49b, 0xf74, 0x52, 0x8eb},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xfad, 0x724, 0xb63, 0x106, 0xdae, 0x144, 0xf76, 0x52, 0x8f2, 0x86a, 0xc6a, 0x49c, 0xcac},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xee9, 0x6d1, 0xfad, 0x52, 0xd2c, 0x153, 0xf74, 0x106, 0xce3, 0x723, 0xb23},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xc28, 0x52, 0xef2, 0x396, 0xf59, 0x6cc, 0xfad, 0x14e, 0x674, 0x106, 0xe6a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x396, 0xd24, 0x6cc, 0xf74, 0x14e, 0xf3e, 0x106, 0xeac},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x662, 0x2db, 0x91b, 0x106, 0xceb, 0x49b, 0x8a9, 0x52, 0xe9e},
		new uint[] {0x2db, 0xca2, 0x195, 0xfad, 0x292, 0xd2c, 0x314, 0xce3, 0x153, 0xe6a, 0x4b, 0xf6b, 0x106, 0xf3e, 0x6e2, 0xae2, 0x51c, 0xef2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0xc28, 0x51c, 0x859},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x210, 0x652, 0x252, 0xf3e, 0x314, 0xca2, 0x153, 0xe6a, 0x18c, 0xc69, 0x51c, 0xb7c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xc69, 0x106, 0xeb1, 0x6a3, 0xb23, 0x564, 0xe73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0xe6a, 0x210, 0x8da, 0x4da, 0x89b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x18c, 0xf3e, 0x316, 0xd24, 0x6e3, 0xcaa, 0x14c, 0xaa3, 0x6a3, 0xc28},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe73, 0x144, 0xcaa, 0x305, 0xc20},
		new uint[] {0x29a, 0xfad, 0x195, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0xd8, 0xeb3, 0x61f, 0x8d2, 0x252, 0xe6a, 0x31c, 0xd24, 0x15a, 0xdef},
		new uint[] {0x2db, 0xfad, 0xa6, 0xb5c, 0x99f, 0xca2, 0x355, 0xda6, 0x55c, 0x99f, 0x314, 0xf6f, 0x10d, 0x89b, 0x51b, 0xee9, 0x52, 0xd2c},
		new uint[] {0x31c, 0xdae, 0x2db, 0xceb, 0x52, 0xfad, 0x195, 0xf76, 0x14c, 0xf3e, 0x106, 0xcaa, 0x218, 0xe73, 0x3d7, 0xd24, 0x94, 0xef4},
		new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x292, 0x6d2, 0x52, 0xe6a, 0x195, 0xceb, 0x15a, 0xd2c, 0x106, 0xc28, 0xcc, 0xc61, 0x691, 0xe30},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x35d, 0xd2c, 0x195, 0xfb4, 0x106, 0xf3e, 0x94, 0xa9b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x161, 0xeb3, 0x873, 0xe73, 0x106, 0xfad, 0xcc, 0xd2c, 0x251, 0xf74, 0x89, 0xf3e, 0x29a, 0xc28},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0x89b, 0x49b, 0xf59, 0x8b, 0xee0},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0x8da, 0x31c, 0xc61, 0x724, 0xdef, 0x99f, 0xda6, 0x566, 0xb63},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xcaa, 0x153, 0xf3e, 0x106, 0xe9e, 0x3d7, 0x795, 0xd5, 0xd2c},
		new uint[] {0x2db, 0xce3, 0x195, 0xcaa, 0x29a, 0xfad, 0xca, 0xd2c, 0x396, 0xe73, 0x14e, 0xf74, 0x106, 0xf3e, 0x143, 0xb5c, 0x52, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xf59, 0x8b, 0x674, 0x14e, 0xce3, 0x195, 0xf3e, 0x106, 0xcaa, 0xca, 0xc69, 0x251, 0xe73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x195, 0xca2, 0x396, 0xe6a, 0x14e, 0xb5c, 0x8b, 0x652, 0x252, 0xf3e, 0x106, 0xaa0},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xceb, 0x2d3, 0xd65, 0x106, 0xfad, 0x1, 0xf3e, 0x259, 0xdef},
		new uint[] {0x2db, 0xfad, 0xa6, 0xd2c, 0x31c, 0xdef, 0x9ad, 0xeed, 0x195, 0xceb, 0x52, 0xe73, 0xcb, 0xcaa, 0x102, 0xb24, 0x6e4, 0xce4},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xceb, 0x52, 0xefc, 0x6e3, 0xe68, 0x1, 0xa22},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xdae, 0x86a, 0xc6a, 0x2d3, 0xf76, 0x3d7, 0xd24, 0x94, 0xef4, 0x52, 0xfad, 0xcb, 0xdaf},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x355, 0xf3e, 0xcb, 0xe6a, 0x15a, 0xc20},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xf74, 0xd5, 0xdef, 0x99f, 0xda6},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xf74, 0xd5, 0xdef, 0x99f, 0xef2},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0x35d, 0xf74, 0xd5, 0xef2, 0x102, 0xe73},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xfad, 0xa6, 0xe73, 0x195, 0xf74, 0x72d, 0xd2d, 0x3df, 0xca2, 0xcb, 0x89b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xaa0, 0x6a1, 0xcaa, 0x8ea, 0xc6a, 0x84c, 0xdef, 0x997},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x210},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x292, 0xceb, 0x2d3},
		new uint[] {0x195, 0xdae, 0x2db, 0xf76, 0x396, 0xca2, 0x14e, 0x89b, 0x55b, 0xe6a, 0x6d1, 0xceb, 0x106, 0xfad, 0x52, 0xf3e, 0x3d7}, new uint[] {0x50},
		new uint[] {0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xd24, 0x106, 0xe6a, 0x31c, 0xceb, 0x2d3, 0xfb4, 0x292, 0xf3e, 0x4b, 0xdef, 0x259},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2d3, 0xce3, 0x4b, 0xfad, 0x396, 0xe6a, 0x14e, 0xf74, 0x106, 0xf3e, 0x144, 0xc61, 0x724},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x106, 0xceb, 0x52, 0xe73, 0x31c, 0xd24, 0x3d7, 0xf7c, 0x144},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x6a1, 0xc28, 0x868, 0xea8, 0x52, 0xceb, 0x31c, 0xa05, 0x105, 0xdae, 0x18c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x35d, 0xf76, 0x161, 0xb73, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xdae, 0x52, 0xceb, 0x31c, 0xf76, 0x35d, 0xf3e, 0x195, 0xd2c, 0x153, 0xb23, 0x6a3},
		new uint[] {0x2db, 0xd65, 0x195, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x29a, 0xf3e, 0x106, 0xceb, 0x52, 0xe6a, 0x6e3, 0xaa4, 0x564},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xd2c, 0x106, 0xfb4, 0x52, 0xc28, 0x86a, 0xd2a, 0x2db, 0x89b, 0x55b, 0xef2, 0x6ea},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xc28, 0x396, 0xfb4, 0x6d1, 0xceb, 0x14e, 0xeb3, 0x106},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2d3, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xd2c, 0x4b, 0xfb4, 0x144, 0xf3e, 0x218},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x15a, 0xdae, 0x6ea, 0xc6a, 0x724, 0xae4, 0x6b5},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0x396, 0xdae, 0x6cc, 0xf76, 0x14e, 0xf3e, 0x106},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x52, 0xfad, 0x2db, 0x89b, 0x55b, 0xc28, 0x35d, 0xd24, 0x6d5, 0xef2, 0x153, 0xc61, 0x106},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x210, 0x652, 0x252, 0xef2, 0x195, 0xfb4, 0x418, 0xc69, 0x161},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xce3, 0x723, 0xfad, 0x15a, 0xb63, 0x106, 0xf74, 0x2db, 0xf3e, 0x6a3, 0xee3, 0x9d},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2db, 0x91b, 0x49b, 0x899, 0x52, 0xb5c, 0x106, 0x652, 0x6e3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2d3, 0xceb, 0x4b, 0xc28, 0x691, 0xf3e, 0x106, 0x8b0, 0x2da},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2d3, 0xceb, 0x292, 0xdae, 0x4b, 0xf76, 0x2c5, 0xf3e, 0x858, 0xb73, 0x154},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0xf74, 0xcc, 0x72b, 0x86a, 0xc6a, 0x6e4, 0xaf1, 0x251},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0xf74, 0xcc, 0x72b, 0x86a, 0xc6a, 0x6e4, 0xaf1, 0x55b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0x14c, 0xca2, 0x106, 0x89b, 0x51b, 0xe6a, 0x3d7},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x52, 0xfad, 0x314, 0xdae, 0x195, 0xf76, 0x14c, 0xf3e, 0x106, 0x8da, 0x31a, 0xe9e, 0x3d7},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xe73, 0xca, 0xcaa, 0x143, 0xc69, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x314, 0xeb1, 0x153, 0xca2, 0x106, 0xf74, 0x251, 0xf3e, 0x89, 0x89b, 0x55b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xc69, 0x153, 0xeb1, 0x106, 0xce3, 0x210, 0x66b, 0x6a3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0x8da, 0x4da, 0x89b, 0x51b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe73, 0x106, 0xd24, 0x31c, 0xcaa, 0x3d7},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xf3e, 0x14c, 0xca2, 0x6e3, 0xd2c, 0x195, 0xb23, 0x724},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xe68, 0x144, 0xcaa, 0x305},
		new uint[] {0x195, 0xfad, 0x29a, 0xca2, 0x396, 0xc69, 0x14e, 0xeb1, 0x251, 0xd2c, 0x106, 0xf74, 0x89, 0xf3e, 0x52, 0xce3, 0x314}, new uint[] {0x197},
		new uint[] {0x2db, 0xfad, 0x195, 0xc69, 0x314, 0xd2c, 0x153, 0xeb1, 0x4b, 0xca2, 0x106, 0xf74, 0x251, 0xf3e, 0x89, 0xe6a, 0x6e2},
		new uint[] {0x2db, 0xd2c, 0x195, 0xca2, 0x314, 0xfad, 0x153, 0xc69, 0x106, 0xeb1, 0x4b, 0xf74, 0x251, 0xf3e, 0x89, 0xceb, 0x144},
		new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x195, 0xe73, 0x52, 0xd24, 0x31c, 0xf74, 0x14c, 0xcaa, 0x106, 0xf3e, 0x94, 0xb5e, 0x50b},
		new uint[] {0x31c, 0xfad, 0x52, 0xce3, 0x723, 0xb63, 0x15a, 0xd2c, 0x195, 0x8d2, 0x252, 0xe73, 0x2db, 0xf74, 0x106, 0xf3e, 0xcc},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x195, 0xf3e, 0x153, 0xe6a, 0x724, 0xae4, 0x6e4, 0xb67, 0x94},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x195, 0xd24, 0x15a, 0xceb, 0x2d3, 0xf74, 0x4a3, 0xfad, 0x292, 0xf3e, 0x106, 0xeac, 0xcc},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0x106, 0xf3e, 0x35d},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x15a, 0xe6a, 0x691, 0xf74, 0x94, 0xf3e, 0x35d},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xc69, 0x153, 0xeb1, 0x6a3, 0xb23, 0x564},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xcaa, 0x4b, 0xea5, 0x251, 0xb5c, 0x89},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xcaa, 0x14e, 0xce3, 0x6a3, 0xaa3, 0x52, 0xf76, 0x195, 0xf3e, 0x106, 0xb5c, 0xd1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x8b, 0xf76, 0x31c, 0x8e9, 0x2d4, 0xf3e, 0x14c, 0xe6a, 0x6e3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0xa6, 0xb5c, 0x99d, 0x712, 0x252, 0xf76, 0x314, 0xca2, 0x195, 0xf3e, 0x14c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xf3e, 0x14c, 0xca2, 0x195, 0x89b, 0x55b, 0xe6a, 0x94},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x106, 0xcaa, 0x94, 0x91b, 0x55b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xc28, 0xcb, 0xd2c, 0x102, 0xeb3, 0x35d},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0xcb, 0xf3e, 0x102},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0x106, 0xf3e, 0xcb},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0xa6, 0xd2c, 0xd5, 0xdef, 0x99f, 0xe73, 0x102},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf59, 0x724, 0xdef, 0x98b, 0x652, 0x252, 0xb5c, 0xde, 0xf3d, 0x2c2},
		new uint[] {0x31c, 0xd24, 0x2db, 0x91b, 0xdb, 0xe6a, 0x6d4, 0xfad, 0x52, 0xf59, 0x8b, 0xf3e, 0x102, 0xf7c, 0x15a, 0xceb, 0x197},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x195, 0xee0, 0x54b, 0xf59, 0xca, 0xf3e, 0x99f},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xdef, 0x99f, 0xb5c, 0x7f4, 0xef4, 0xca},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xe9e, 0x94, 0xb73, 0x691},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xe68, 0xcb, 0xa32, 0x153},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xc69, 0x6a3, 0xb23, 0x161},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xc69, 0x6a3, 0xb23, 0x153},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xcaa, 0xca, 0xc28, 0x210},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xcaa, 0xca, 0xc28, 0x6a3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x161, 0xe6a, 0x106, 0xeb3, 0x292, 0xfad, 0x144, 0xc28, 0x845, 0xcde, 0x3d7, 0x7a7},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x2db, 0x91b, 0x724, 0xce3, 0x6a1, 0xb5c, 0x49b, 0x899},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x218, 0xa9b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xca2, 0x195, 0x89b, 0x106, 0xf74, 0x55b, 0xf3e, 0x6a3, 0xb63},
		new uint[] {0x195, 0xceb, 0x31c, 0xfad, 0x2d3, 0xca2, 0x396, 0xe6a, 0x14e, 0xdae, 0x106, 0xf76, 0x292, 0xf3e, 0x4b, 0xe39}, new uint[] {0x52, 0xd24},
		new uint[] {0x195, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xf3e, 0x2d3, 0xceb, 0x31c, 0xca2, 0x4b, 0xe6a, 0x292, 0xb7c},
		new uint[] {0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xfad, 0x195, 0x8da, 0xd8, 0xe73, 0x61a, 0xca2, 0x2db, 0xc28, 0x68a, 0x89b},
		new uint[] {0x29a, 0xca2, 0x52, 0xfad, 0x195, 0xe6a, 0x396, 0xce3, 0x6a3, 0xb63, 0x14e, 0x8f2, 0x106, 0xd24, 0x2d3, 0xf74},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x31c, 0xceb, 0x2d3, 0xd2c, 0x18c, 0xfb4, 0x106, 0xf3e},
		new uint[] {0x31c, 0xdae, 0x2db, 0xcaa, 0x195, 0xce3, 0x4b, 0xf76, 0x292, 0xfaf, 0x153, 0xf3e, 0x106, 0xd6d, 0x144, 0xbf5},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x52, 0xe6a, 0x161, 0xa9b, 0x106, 0xc28, 0x853, 0xfb4, 0x55b, 0x89b, 0x48c, 0xd2a},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x6e1, 0xceb, 0x29a, 0xfad, 0x52, 0xc28, 0x850, 0xae3},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x396, 0xc28, 0x14e, 0xfad, 0x106, 0xceb},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x18c, 0x8dc, 0x210, 0x674, 0x49c, 0xfad, 0x316, 0xf3e, 0x14c, 0xe6a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x396, 0xf62, 0x14e, 0xceb, 0x2d3, 0xc28, 0x106, 0xf3e, 0x3d7, 0xeac},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0x72b, 0x86a, 0xc6a, 0x6e4, 0xae5, 0x52, 0xdef},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x2db, 0xc61, 0x611, 0xa9b, 0x55b, 0x91b, 0xdb, 0xca2},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0xcc, 0xc61, 0x611, 0xf74, 0x2db, 0xceb, 0x292, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x564, 0xe73, 0x91a, 0xef2, 0x396, 0xd24},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xe9e, 0x15a, 0xd2c, 0x3d7, 0x7a7, 0x52, 0xe73, 0x106, 0xf6b},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0x691, 0xe6a, 0x52, 0xf74},
		new uint[] {0x29a, 0xfad, 0x195, 0xd2c, 0x396, 0xca2, 0x14e, 0xce3, 0x106, 0xe6a, 0x2db, 0xf74, 0x6a3, 0xb63, 0x52, 0xf3e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0x8da, 0x4da, 0xc61, 0x693, 0x859},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xf76, 0x396, 0xf3e, 0x14e, 0xcaa, 0x106, 0xce3, 0x251, 0xb5c, 0x89, 0xeac},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x15a, 0xf3e, 0x18c, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x6a3, 0xb63, 0x31c, 0x8d2, 0x252, 0xf76, 0x15a, 0xf3e, 0x18c, 0xe6a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x106, 0xf3e, 0x52, 0xce3, 0x6a3, 0xb23},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x210, 0x652, 0x252, 0xca2, 0x355, 0xce3, 0x6a3, 0xb63, 0x6e2, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xc69, 0x195, 0xeb1, 0x314, 0xf59, 0x153, 0xb5c, 0x106, 0x652, 0x252, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0x8da, 0x4da, 0xeb3},
		new uint[] {0x195, 0xce3, 0x251, 0xfad, 0x89, 0xea5, 0x396, 0xd2c, 0x14e, 0xdef, 0x106, 0xf74, 0x2d3, 0xf3e, 0x4b, 0x977}, new uint[] {0x259, 0xcaa},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x2db, 0x91b, 0x55b, 0xf59, 0xa6, 0xdef, 0x99f, 0x652, 0x252, 0xaa4}, new uint[] {0x259, 0xfaf},
		new uint[] {0x195, 0xfad, 0x29a, 0xca2, 0x396, 0xc69, 0x14e, 0xeb1, 0x251, 0xd2c, 0x106, 0xf74, 0x89, 0xf3e, 0x52, 0xceb}, new uint[] {0x396, 0xca2},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0xa6, 0xdef, 0x99f, 0xc69, 0x314, 0xeb1, 0x4b, 0xf74, 0x292, 0xca2, 0x153, 0xf3e}, new uint[] {0x396, 0xde7},
		new uint[] {0x2db, 0xfad, 0x195, 0xca2, 0x314, 0xdae, 0x153, 0xf76, 0x106, 0xc69, 0x4b, 0xeb1, 0x292, 0xf3e, 0xcc, 0xce3}, new uint[] {0x251, 0xca2},
		new uint[] {0x195, 0xd2c, 0x29a, 0xd65, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e, 0x2db, 0xceb, 0x52, 0xefc, 0xca, 0xf27}, new uint[] {0x251, 0xce3},
		new uint[] {0x31c, 0xdae, 0x2db, 0xceb, 0x52, 0xf76, 0x18c, 0xfad, 0x396, 0xf3e, 0x14e, 0xe6a, 0x3d7, 0xd24, 0x94, 0xc28}, new uint[] {0x251, 0xd65},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6e1, 0xceb, 0xa6, 0xc28, 0x850, 0xeac}, new uint[] {0x195, 0xe6a},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x251, 0xc69, 0x89, 0xeb1, 0x52, 0xc28, 0x2db, 0x89b, 0x55b, 0xceb, 0x396, 0xfad}, new uint[] {0x2db, 0xc61},
		new uint[] {0x31c, 0xd24, 0x35d, 0xf62, 0x195, 0xceb, 0x52, 0xfad, 0x15a, 0xe6a, 0x2d3, 0xe9e, 0x3d7, 0x795, 0xd5, 0x91d}, new uint[] {0x31c, 0xc28},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xfad, 0x52, 0xe73, 0x15a, 0xf74, 0x106, 0xf3e, 0xcc, 0xcaa, 0x218, 0x91b}, new uint[] {0x31c, 0xdef},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0xa6, 0xdae, 0x4b, 0xf76, 0x314, 0xf3e, 0x292, 0xe73, 0x14c, 0xf7c, 0x259, 0xdef},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd24, 0x6e4, 0x8db, 0x195, 0xe6a, 0x4b, 0xe9e, 0x3d7, 0x795, 0x2d5, 0xf59, 0x8b, 0xef4},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x6a3, 0xaa3, 0xa6, 0xf74, 0x314, 0xe73, 0x106, 0xf3e},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xf76, 0x396, 0xf3e, 0x14e, 0xcaa, 0x106, 0xce3, 0xd1, 0xee9, 0x52, 0xea5},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0x396, 0xcaa, 0x14e, 0xe73, 0x106, 0xf6b, 0xca, 0xf3e, 0x4b, 0xf7c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x8b, 0xf3e, 0x314, 0xc69, 0x195, 0xeb1, 0x153, 0xce3, 0x106, 0x8da},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xce3, 0x210, 0x652, 0x292, 0xb5c, 0x48a, 0xe6a, 0x314, 0xb24},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xcaa, 0x94, 0xc28, 0x153, 0xc61, 0x18c, 0xf3e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xd24, 0x6e3, 0xcaa, 0x18c, 0xaa3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xe73, 0xa6, 0xdef, 0x99f, 0xba6},
		new uint[] {0x396, 0xce3, 0x14e, 0xfad, 0x195, 0xdae, 0x106, 0xf76, 0x2d3, 0xf3e, 0x52, 0xca2, 0x1, 0xe6a, 0x210, 0xc20},
		new uint[] {0x195, 0xfad, 0x29a, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x106, 0xceb, 0x52, 0xd24, 0x2d3, 0xcaa, 0x1, 0xc20},
		new uint[] {0x29a, 0xfad, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x52, 0xceb, 0x106, 0xd24, 0x2d3, 0xe6a, 0x1, 0xc20},
		new uint[] {0x31c, 0xcaa, 0x52, 0xce3, 0x195, 0xe9e, 0x3d7, 0x795, 0xd5, 0xfad, 0x2d3, 0xd2c, 0x396, 0xf59, 0x8b, 0x8db},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x94, 0xd2c, 0xcb, 0xe39, 0x18c, 0xa9b},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xcb, 0xc28, 0x102, 0xa9b},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf59, 0x724, 0xdef, 0x98b, 0x652, 0x252, 0xb5c, 0xde, 0xdae},
		new uint[] {0x31c, 0xd24, 0x15a, 0xfad, 0x2db, 0x91b, 0x195, 0xb5c, 0xdb, 0x72d, 0xa6, 0xf74, 0x52, 0xcaa, 0x102, 0xce3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x6a3, 0xaa3, 0x52, 0xe6a, 0x9d, 0xea5, 0x314, 0xd2c, 0xd1, 0xf59},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xce3, 0x52, 0xf74, 0xa6, 0xdef, 0x9ad, 0xd2d, 0xd1, 0xcaa, 0x314, 0xf3e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xe6a, 0x195, 0xd2c, 0x52, 0xf59, 0xca, 0xceb, 0x8b, 0xf3e, 0x210, 0x652, 0x2d2, 0xf7c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xc28, 0xcb, 0xcaa, 0x153, 0xc61},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0x89b, 0x49b, 0xe6a, 0x195, 0xe9e, 0x14c, 0xd2c, 0x106},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x292, 0xfad, 0x14c, 0xdae, 0x106, 0xf76, 0x321, 0xeb3, 0x873, 0xef3, 0x144},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xfad, 0x15a, 0xce3, 0x723, 0xf6b, 0x106},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2db, 0xae3, 0x153, 0xf74, 0x106, 0xe6a, 0x29a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xa9b, 0x292, 0xc61, 0x685, 0xb63, 0x99c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0xc61, 0x611, 0xce3, 0x29a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x2db, 0x91b, 0x724, 0xb5c, 0x292},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xceb, 0x2db},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xf3e, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x6a3, 0xb63, 0x106, 0xca2, 0x6e2},
		new uint[] {0x396, 0xce3, 0x14e, 0xfad, 0x195, 0xcaa, 0x2d3, 0xe9e, 0x106, 0xe73, 0x4b, 0xd2c, 0x3d7, 0x7a7, 0x251}, new uint[] {0x2db, 0xd65, 0xa6},
		new uint[] {0x29a, 0xdae, 0x396, 0xf76, 0x14e, 0xfad, 0x52, 0xf3e, 0x31c, 0xceb, 0x18c, 0xe6a, 0x2d3, 0xd24, 0x106}, new uint[] {0x2db, 0xd65, 0xd3},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x29a, 0xe6a, 0x52, 0xfad, 0x14c, 0xef2, 0x106, 0xc28, 0x2db, 0x89b, 0x55b}, new uint[] {0x31c, 0xd2c, 0xcc},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x6a1, 0xc28, 0x52, 0xa21, 0x31c, 0x859, 0x4a1, 0xceb, 0x15a}, new uint[] {0x2db, 0xce3, 0xa6},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x6a1, 0xc28, 0x868, 0xea8, 0x52, 0xceb, 0x195, 0xdae, 0x396},
		new uint[] {0x2db, 0xd2c, 0x195, 0xd65, 0x396, 0xfad, 0x14e, 0xce3, 0x106, 0xf6b, 0x29a, 0xcaa, 0x251, 0xef4, 0x89},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xceb, 0x52, 0xefc, 0x251},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xea5, 0x716, 0x96e, 0x3df, 0xdef, 0x35d, 0xd2c, 0x195},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xea5, 0x716, 0x96e, 0x3df, 0xdef, 0x195, 0xe73, 0x7e7},
		new uint[] {0x31c, 0xca2, 0x2d3, 0xceb, 0x195, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xf3e, 0x4b, 0xe6a, 0x292},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xc28, 0x29a, 0xfad, 0x52, 0xf59, 0x153, 0xe6a, 0x4ca},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x396, 0xc28, 0x14e, 0xceb, 0x106},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x161, 0xeb3, 0x873, 0xe73, 0x52, 0xdae, 0x106},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x292, 0xe6a, 0x195, 0xee9, 0x210, 0x89a, 0x4b, 0xaa0, 0x14c},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xfad, 0x724, 0xb73, 0x153, 0xca2, 0x292, 0xe6a, 0x18c, 0x89b, 0x49b},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x210, 0x652, 0x252, 0xfb4, 0x3df, 0xe6a, 0x7e7},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0x795, 0xd5, 0xeed, 0x724, 0xb64, 0x6b5},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xde7, 0x15a, 0xff7, 0x2db, 0xf6f, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xc28, 0x86a, 0xc6a, 0x564, 0xb5c, 0x49c, 0xf3e, 0x2db},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf59, 0x106, 0xf3e, 0x2d3, 0x652, 0x252, 0xceb, 0x144},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x660, 0x106, 0xceb, 0x2db, 0x91b, 0xd1},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0xcc, 0xc61, 0x611, 0xf3e, 0x292},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x6a3, 0xb63, 0x106, 0xca2, 0x52},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x195, 0xf76, 0x396, 0xf3e, 0x14e, 0xceb, 0x106, 0xe6a, 0x52, 0xc28, 0x6e3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xf3e, 0x195, 0xca2, 0x6e3, 0xc28, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x3d7, 0xca2, 0x6e3, 0xd2c, 0x153},
		new uint[] {0x2db, 0xe6a, 0x31c, 0xd24, 0x6e3, 0xab4, 0x29a, 0xd2e, 0x94, 0xfad, 0x52, 0xf59, 0x355, 0xf3e, 0x153}, new uint[] {0x396, 0xd24, 0x195},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x195, 0xf76, 0xa6}, new uint[] {0x195, 0xd65, 0x31c},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xceb, 0x52, 0xefc, 0xca}, new uint[] {0x195, 0xce3, 0x259},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xcaa, 0x15a, 0xceb, 0xd5, 0xd2c, 0x18c, 0xe73, 0x691, 0xfad, 0x106}, new uint[] {0x195, 0xce3, 0x2d3},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0xdae, 0x195, 0xf76, 0x3d7, 0xfaf, 0x9d, 0xd6d, 0x723, 0xaa3, 0x4a1}, new uint[] {0x31c, 0xfad, 0x2d3},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x4b, 0x8dc, 0x2dc, 0xe73, 0x15a, 0xfad, 0x726, 0xd2c, 0xcc, 0xce9, 0x693}, new uint[] {0x31c, 0xcaa, 0x2d3},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x161, 0xa9b, 0x85a, 0xdae, 0x195, 0xf76, 0x55b, 0x89b, 0xd5, 0xfaf, 0x48c}, new uint[] {0x31c, 0xca2, 0x396},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xceb, 0x39e, 0xfb4, 0x94, 0xc28, 0x35d}, new uint[] {0x31c, 0xca2, 0x15a},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0x14c, 0xe6a, 0x6d1}, new uint[] {0x31c, 0xca2, 0x18c},
		new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x2d3, 0xfad, 0x4dc, 0xb5c, 0xcc, 0xee3, 0x4b, 0xd65, 0x39e}, new uint[] {0x31c, 0xd2c, 0x251},
		new uint[] {0x2db, 0xce3, 0x195, 0xd2c, 0x314, 0xfad, 0x153, 0xca2, 0x251, 0xe6a, 0x89, 0xf6b, 0x106, 0xf3e, 0x4b}, new uint[] {0x31c, 0xd2c, 0x29a},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x6a3, 0xaa3, 0x52, 0xe6a, 0x9d, 0xea5, 0x314, 0xd2c, 0x153}, new uint[] {0x31c, 0xd2c, 0x724},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0xca, 0xf6b, 0x14c, 0xf3e, 0x106}, new uint[] {0x31c, 0xd2c, 0x35d},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xf3e, 0x6a3, 0xb63, 0x4a3, 0xee3, 0x772}, new uint[] {0x31c, 0xd24, 0x292},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0xd1, 0x8da, 0x15a, 0xe73, 0x566}, new uint[] {0x31c, 0xd24, 0x18c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xe73, 0x52, 0xcaa, 0xd3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xca2, 0x6e3, 0xc28, 0x218},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xca2, 0x6e3, 0xd2c, 0x153},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xd24, 0x6e3, 0xe73, 0x197},
		new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x396, 0xce3, 0x6a3, 0xb63, 0x14e, 0x8e9, 0x195, 0xe6a, 0x106, 0xf74, 0x1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xca2, 0x6e3, 0xd2c, 0xcb},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x94, 0xcaa, 0xcb, 0xc61, 0x355, 0xe73, 0x3df, 0xde7, 0x197},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x35d, 0xe6a, 0x94, 0xf74, 0xd5},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x15a, 0xe6a, 0x94, 0xf74, 0xcc},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x314, 0xea5, 0x6a3, 0xaa3, 0xd1, 0xefa, 0x8b, 0xd2c, 0x50},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xf59, 0x8b, 0x674, 0x52, 0xce3, 0x6a3, 0xb23, 0x2dd, 0xcaa, 0xca},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0x52, 0xf74, 0x9d, 0xf3e, 0x314, 0xca2, 0x6e2, 0xd22, 0xca},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xca2, 0x195, 0x89b, 0x55b, 0xb24, 0x6e1, 0xc28, 0xd8},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0xca, 0xca2, 0x6a3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x18c, 0xf3e, 0x355, 0xd24, 0xa6, 0xcaa, 0xcb},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x2, 0xc28, 0x6a3},
		new uint[] {0x195, 0xce3, 0x396, 0xcaa, 0x14e, 0xe9e, 0x29a, 0xd2c, 0x6a3, 0xaa3, 0x106, 0xe73, 0x2d3, 0xfad},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xd2c, 0x314, 0xd65, 0x153, 0xfad, 0x106, 0xf6b, 0x251, 0xef4},
		new uint[] {0x31c, 0xca2, 0x292, 0xceb, 0x2db, 0xfad, 0x153, 0xdae, 0x3d7, 0xf76, 0x195, 0xf3e, 0x106, 0xe6a},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xd2c, 0x106, 0xfb4, 0x292, 0xc28, 0x858, 0xc61, 0x60a, 0xeb1},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x29a, 0xf76, 0x6ca, 0xceb, 0x14c, 0xfaf},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xc28, 0x153, 0xfad, 0x106, 0xceb, 0x29a, 0xdae},
		new uint[] {0x31c, 0xd24, 0x15a, 0xfad, 0x2d3, 0xce3, 0x723, 0xb63, 0x195, 0xe6a, 0x106, 0xe9e, 0x144, 0xf74},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xce3, 0x723, 0xfad, 0x161, 0xcaa, 0x8ea, 0xc6a, 0x85a, 0xb63},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x564, 0xedf, 0x105, 0xfaf, 0x2db, 0xceb},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x564, 0xedf, 0x105, 0xfaf, 0x2db, 0x755},
		new uint[] {0x31c, 0xd24, 0x195, 0xd65, 0x564, 0xeed, 0x2db, 0xceb, 0x91a, 0x95c, 0x14c, 0xb7b, 0x106, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2db, 0xae3, 0x153, 0xf74, 0x106, 0xf3e},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x2db, 0xb5c, 0x153, 0xce3, 0x564, 0xf6b, 0x106, 0xf3e, 0x29a, 0xae4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x660, 0x2db, 0x91b, 0x106, 0x6d2},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x660, 0x106, 0xceb, 0x2db, 0x829},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x660, 0x106, 0xceb, 0x2db, 0xe9e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x292, 0xeb3, 0x2db, 0xdae, 0x106, 0xf76},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xceb, 0x62a, 0xc6a, 0x2db, 0xe9e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x2d3, 0xc61, 0x611, 0xceb},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x2d3, 0xc61, 0x611, 0xeb1},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xc61, 0x611, 0xeb1},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0x314, 0xca2, 0x6a3, 0xb23, 0x161, 0xeb3, 0x873, 0xe73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x6a3, 0xb63, 0x106, 0x8e9},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x195, 0xf76, 0x396, 0xf3e, 0x14e, 0xceb, 0x106, 0xca2, 0x6e2, 0xae2},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2d3, 0xdae, 0x396, 0xf76, 0x14e, 0xceb, 0x106, 0xfad, 0x4b, 0xf3e}, new uint[] {0x259, 0xce3, 0x89, 0xea5},
		new uint[] {0x396, 0xce3, 0x195, 0xcaa, 0x14e, 0xfad, 0x106, 0xe9e, 0x2d3, 0xe73, 0x4b, 0xd24, 0x31c, 0xf6b}, new uint[] {0x29a, 0xd24, 0x52, 0xf59},
		new uint[] {0x29a, 0xc69, 0x52, 0xeb1, 0x31c, 0xd2c, 0x195, 0xf59, 0x153, 0xfb4, 0x106, 0xf3e, 0x4ca, 0xd65}, new uint[] {0x2db, 0xce3, 0x9d, 0xca2},
		new uint[] {0x195, 0xce3, 0x251, 0xfad, 0x89, 0xdae, 0x314, 0xf76, 0x29a, 0xcaa, 0x2db, 0xf3e, 0x14c, 0xf7c},
		new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x396, 0xfad, 0x14e, 0xf74, 0x106, 0xca2, 0x6a3, 0xb63, 0x52, 0xe6a},
		new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x195, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xf3e, 0x2d3, 0xceb},
		new uint[] {0x195, 0xfad, 0x251, 0xdae, 0x89, 0xf76, 0x396, 0xf3e, 0x14e, 0xceb, 0x2db, 0xe73, 0x106, 0xd24},
		new uint[] {0x195, 0xd65, 0x396, 0xfad, 0x14e, 0xdae, 0x2db, 0xf76, 0x106, 0xf3e, 0x29a, 0xceb, 0x52, 0xefc},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xceb, 0x52, 0xcaa},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xceb, 0x52, 0xe6a},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xce3, 0x52, 0xcaa},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xd2c, 0x195, 0xf59, 0x6a3, 0xb63},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x18c, 0xd2c, 0x106, 0xfb4, 0x2d3, 0xceb},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xd2c, 0x106, 0xfb4, 0x251, 0xc28, 0x86a, 0xd2a, 0x89, 0xc61},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2d3, 0xe6a, 0x396, 0xce3, 0x4b, 0xdae, 0x14e, 0xf76, 0x106, 0xfb4},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x14c, 0xc28, 0x106, 0xe73},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x15a, 0xc28, 0x691, 0xc61},
		new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x2d3, 0xfad, 0x4dc, 0xb5c, 0x195, 0xf62, 0xcc, 0xea5},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf59, 0x106, 0xf3e, 0x4a3, 0xb63, 0x723, 0x91c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x106, 0xf62, 0x2db, 0x89b, 0x55b, 0xa9b, 0xa6, 0xceb},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xceb, 0x2db, 0xeb3, 0x52, 0xf74, 0x144, 0xf3e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0xcc, 0xc61, 0x611, 0xceb},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x195, 0xe6a, 0x396, 0xfad, 0x14e, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x314, 0xe6a, 0x153, 0xf6b, 0x106, 0xf3e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xca2, 0x6a3, 0xb63, 0x314, 0xe6a, 0x153, 0xf74},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0xf3e, 0x106, 0xcaa, 0x52, 0x8da},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xcaa, 0x14c, 0xf3e, 0x106, 0xeac},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0x153, 0xcaa, 0x106, 0xea5},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0x153, 0xcaa, 0x106, 0xe9e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xcaa, 0xca, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xf59, 0x8b, 0x674, 0x396, 0xce3, 0x14e, 0xf3e, 0x106, 0xcaa},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xca2, 0x153, 0xe6a, 0x195, 0x652, 0x252, 0xceb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xc69, 0x153, 0xeb1, 0x195, 0xb5c, 0x106, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xe6a, 0x106, 0x8da},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x195, 0xce3, 0x153, 0xca2, 0x106, 0xe73},
		new uint[] {0x195, 0xfad, 0x251, 0xdae, 0x89, 0xf76, 0x314, 0xf3e, 0x14c, 0xceb, 0x2db, 0xe73, 0x29a, 0xd24},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xcaa, 0x106, 0xea5},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xcaa, 0x106, 0xee0},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe6a, 0x106, 0xd24},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe6a, 0x106, 0xea5},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe6a, 0x106, 0xe9e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0x396, 0xf3e, 0x14e, 0xe6a, 0x106, 0xc28},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xca2, 0x6e3, 0xd2c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x6e3, 0xc20},
		new uint[] {0x2db, 0xceb, 0x29a, 0xd24, 0x6e4, 0xae4, 0xfb, 0xf3b, 0x52, 0xcaa, 0x195, 0xd6d, 0x396, 0xeac}, new uint[] {0x195, 0xceb, 0x31c, 0xe9e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xd2c}, new uint[] {0x195, 0xfad, 0x396, 0xc61},
		new uint[] {0x31c, 0xe6a, 0x195, 0xceb, 0x2db, 0xfad, 0x52, 0xe9e, 0x94, 0xd2c, 0x14c, 0xf74, 0x106, 0xf3e}, new uint[] {0x195, 0xce3, 0x29a, 0x8db},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x35d, 0xe6a, 0x94, 0xfad, 0x195, 0xf3e, 0x14c, 0xd2c}, new uint[] {0x29a, 0xdae, 0x31c, 0xd24},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xe6a, 0xa6, 0x8da, 0x6e3, 0xaa0}, new uint[] {0x29a, 0xd24, 0x195, 0x91c},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xe73, 0x15a, 0xfad, 0x726, 0xd2c, 0xcc, 0xce9}, new uint[] {0x2db, 0xd2c, 0x29a, 0xc69},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x29a, 0xfad, 0x52, 0xa9b, 0xdb, 0xceb}, new uint[] {0x2db, 0xceb, 0x195, 0xe9e},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x29a, 0xf76, 0x94, 0xfad, 0x52, 0xb5e}, new uint[] {0x2db, 0xca2, 0x6e3, 0xceb},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xfad, 0x6e1, 0xceb, 0x9d, 0xb24}, new uint[] {0x2db, 0xca2, 0x6e3, 0xd65},
		new uint[] {0x2db, 0xce3, 0x29a, 0xe6a, 0x6a3, 0xee3, 0x314, 0xd24, 0x52, 0xf59, 0x8b, 0x652, 0x252, 0x91b}, new uint[] {0x2db, 0xfad, 0x29a, 0xc69},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x6a3, 0xaa3, 0x52, 0xfad, 0x9d, 0xe6a, 0x314, 0xc28, 0x153, 0xe9e}, new uint[] {0x2db, 0xd65, 0x31c, 0xceb},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xcaa, 0x195, 0x8da, 0x218, 0xf59, 0x314, 0xc61, 0x8b, 0xc20}, new uint[] {0x31c, 0xc69, 0x2db, 0xea8},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xcaa, 0x195, 0x8da, 0x218, 0xf59, 0x314, 0xc61, 0x8b, 0xef4}, new uint[] {0x31c, 0xd6d, 0x2db, 0xf35},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x195, 0xee0, 0x6a3, 0xb63}, new uint[] {0x31c, 0xfad, 0x724, 0xb7e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x195, 0xee0, 0x54b, 0x8da}, new uint[] {0x31c, 0xcaa, 0x2db, 0xfad},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xc28}, new uint[] {0x31c, 0xca2, 0x195, 0xef2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xcaa}, new uint[] {0x31c, 0xd24, 0x15a, 0xcaa},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd1, 0x8da, 0x45a, 0xf3e, 0x31c, 0xe6a}, new uint[] {0x31c, 0xd24, 0x15a, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x52, 0xeb1, 0xa6, 0xdef, 0x99f, 0xda6, 0x7d6, 0xb67}, new uint[] {0x31c, 0xd24, 0x35d, 0xca2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xce3, 0x210, 0x652, 0x292, 0xb5c, 0x48a, 0xca2}, new uint[] {0x31c, 0xd24, 0x35d, 0xfad},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xd2c}, new uint[] {0x31c, 0xd24, 0x195, 0xd6d},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xcaa, 0x153, 0xc28}, new uint[] {0x31c, 0xd24, 0x195, 0xef4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xca2, 0x6e3, 0xc28}, new uint[] {0x31c, 0xd24, 0x195, 0xeed},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0xa6, 0xdef}, new uint[] {0x2db, 0xce3, 0x195, 0xca2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x3d7, 0xe73, 0xa6, 0xcaa}, new uint[] {0x2db, 0xce3, 0x195, 0xe6a},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf59, 0x723, 0xee3, 0x9ad, 0xdad, 0xcb, 0x8e0}, new uint[] {0x2db, 0xce3, 0x29a, 0xea5},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0xde, 0xfb4, 0x6e2, 0xe6a, 0x8b, 0xf3e}, new uint[] {0x2db, 0xce3, 0x29a, 0xfad},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xf3e, 0xd1, 0xcaa, 0x195, 0xee0},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xf3e, 0x2, 0xca2, 0x6e2, 0xeac},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0x396, 0xca2, 0x14e, 0x89b, 0x55b, 0xc28, 0x106, 0xef2, 0x6d1}, new uint[] {0x31c, 0xcaa, 0x52, 0xce3, 0xd5},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x195, 0xdae, 0x15a, 0x8e9, 0x691, 0xf76, 0x218},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x153, 0xdae, 0x195, 0xf76, 0x292, 0xf3e, 0x106, 0xe6a, 0x144},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x292, 0xceb, 0x195, 0xfad, 0x153, 0xf3e, 0x106, 0xe6a, 0x3d7},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xd2c, 0x86a, 0xc6a, 0x2d3, 0xfb4, 0x106, 0xd2e, 0x566},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x161, 0xeb3, 0x873, 0xef3, 0x106, 0xe6a, 0x292, 0xfad, 0x2db},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xf74, 0x15a, 0xd1f, 0x396, 0x756, 0x106, 0x58f, 0x187},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xef4, 0x2db, 0x8a9, 0x6e3, 0xab9, 0x8eb},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x292, 0xd65, 0x725, 0xea5, 0x106},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xc61, 0x611, 0xf74, 0x218},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0xc28, 0x51c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x6a3, 0xb63, 0x31c, 0x8e9, 0x18c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xca2, 0x6e3, 0xb23, 0x55f},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x106, 0xf3e, 0x251},
		new uint[] {0x195, 0xce3, 0x251, 0xca2, 0x314, 0xfad, 0x89, 0xd2c, 0x29a, 0xe6a, 0x6a3, 0xb23, 0x161}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0xca},
		new uint[] {0x195, 0xce3, 0x251, 0xfad, 0x89, 0xd2c, 0x314, 0xf6b, 0x14c, 0xe73, 0x2db, 0xf3e, 0x106}, new uint[] {0x29a, 0xd24, 0x52, 0xceb, 0x195},
		new uint[] {0x396, 0xce3, 0x14e, 0xcaa, 0x195, 0xe9e, 0x2d3, 0xe73, 0x4b, 0xd2c, 0x106, 0xf6b, 0x251}, new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x31c},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2d3, 0xe6a, 0x396, 0xce3, 0x4b, 0xfad, 0x14e, 0xf74, 0x106}, new uint[] {0x2db, 0xc69, 0x29a, 0xeb1, 0x52},
		new uint[] {0x29a, 0xd65, 0x52, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x31c, 0xe6a, 0x18c}, new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x9d},
		new uint[] {0x29a, 0xfad, 0x52, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x106, 0xf3e, 0x144}, new uint[] {0x2db, 0xd65, 0x52, 0xfad, 0x39e},
		new uint[] {0x29a, 0xdae, 0x52, 0xf76, 0x396, 0xd24, 0x14e, 0xceb, 0x2d3, 0xd65, 0x195, 0xfad, 0x106}, new uint[] {0x31c, 0xe6a, 0x2db, 0xce3, 0x52},
		new uint[] {0x2db, 0xceb, 0x29a, 0xd24, 0x195, 0x91c, 0x566, 0xd65, 0x52, 0xcaa, 0x997, 0xf74, 0x396}, new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x52},
		new uint[] {0x396, 0xd24, 0x29a, 0xfad, 0x14e, 0xe6a, 0x52, 0xf62, 0x314, 0xf3e, 0x18c, 0xceb, 0x106}, new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x18c},
		new uint[] {0x29a, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x396, 0xee9, 0x6d1}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x94},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xfad, 0x106, 0xf3e, 0x2d3}, new uint[] {0x31c, 0xd2c, 0x52, 0xce3, 0x35d},
		new uint[] {0x2db, 0xd2c, 0x29a, 0xca2, 0x6e3, 0xb23, 0x6a3, 0xceb, 0x52, 0xdae, 0x31c, 0xf76, 0x153}, new uint[] {0x31c, 0xd2c, 0x52, 0xce3, 0x195},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x195, 0xdae, 0x54b}, new uint[] {0x31c, 0xd24, 0x52, 0xe6a, 0x396},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x355}, new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x396},
		new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8e0, 0x2db, 0xfad, 0x195, 0xea5, 0x564, 0xcaa, 0x39e}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x52},
		new uint[] {0x31c, 0xcaa, 0x52, 0xce3, 0x195, 0x8dc, 0x49c, 0xfad, 0x72d, 0xd2d, 0x2db, 0xe9e, 0x14c}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x52},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xcaa, 0x35d, 0xce3, 0x724, 0xfaf, 0x195, 0xe9e, 0x3d7}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x52},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0x89b, 0x49b, 0xe6a, 0x195, 0xd2c, 0x52}, new uint[] {0x2db, 0xce3, 0x195, 0xd2c, 0x9d},
		new uint[] {0x31c, 0xca2, 0x195, 0xc28, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x6d5, 0xf59, 0x15a}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0xa6},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x52, 0xc28, 0x396, 0xc61, 0x14e, 0xeb1, 0x2d3, 0xceb, 0x106},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xfad, 0x6e1, 0xf59, 0x86b},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xceb, 0x14c, 0xd24, 0x6d1},
		new uint[] {0x2db, 0xd2c, 0x195, 0xca2, 0x31c, 0x89b, 0x55b, 0xfad, 0x52, 0xceb, 0x39e, 0xdef, 0x7a6},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xf74, 0x195, 0xfad, 0x153, 0xca2, 0x6e2, 0x8dc, 0x2dc},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xe73, 0x195, 0xfad, 0x72d, 0xced, 0x564},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x210, 0x652, 0x252, 0xfb4, 0x418},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x210, 0x652, 0x252, 0xfb4, 0x195},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0xf76, 0x3df, 0xdef, 0x2db, 0xceb, 0xd3},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x566, 0xdef, 0x9b5, 0xf35, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xfad, 0x52, 0xe73, 0x15a, 0xf74, 0x566, 0xf3e, 0x6b5},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xf62, 0x94, 0xeed, 0x292, 0xfb4, 0x161},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xf62, 0x94, 0xeed, 0x292, 0xfb4, 0x6ca},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf59, 0x106, 0xf3e, 0x2d3, 0xceb, 0x48c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x660, 0x2db, 0xceb, 0xd1},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xceb, 0x2db, 0xeb3, 0x52, 0xf74, 0x86a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xc61, 0x611, 0xf74, 0x52},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x195, 0xe6a, 0x314, 0xfad, 0x14c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x195, 0xf74, 0x14e, 0xf3e, 0x52, 0x8da, 0x106},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x153, 0xce3, 0x210, 0x652, 0x252},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x396, 0xf3e, 0x14e, 0xd24, 0x18c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x6e4},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x314, 0xf59, 0xca, 0xf3e, 0x4a3, 0xf7c, 0x2a5}, new uint[] {0x396, 0xce3, 0x14e, 0xfad, 0x251},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x195, 0xdae, 0xa6}, new uint[] {0x39e, 0xce3, 0x14e, 0xcaa, 0x7a6},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x52, 0xb23, 0x6a3, 0xceb, 0x31c, 0xdae, 0x9d}, new uint[] {0x195, 0xd65, 0x2d3, 0xfad, 0x31c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xcaa, 0x314, 0xd65, 0x195, 0xfad, 0x153, 0xf6b, 0xcc}, new uint[] {0x195, 0xfad, 0x396, 0xdae, 0x259},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xd2c, 0x94, 0xa9b, 0x48c}, new uint[] {0x2db, 0xca2, 0x6e3, 0xd2c, 0x31c},
		new uint[] {0x31c, 0xca2, 0x195, 0xdae, 0x2db, 0x89b, 0xdb, 0xfad, 0x161, 0xe6a, 0x86a, 0xc6a, 0x52}, new uint[] {0x2db, 0xca2, 0x6e3, 0xfad, 0x195},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xe6a, 0x52, 0xef2, 0x94, 0xc28, 0x14c}, new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0x314},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0x161}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x35d},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0x724, 0xb73, 0x35d, 0xca2, 0x195, 0xe6a, 0x94}, new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x355},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x724, 0xb73, 0x9b4, 0xef4, 0x4a1}, new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x259},
		new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x15a, 0xb5c, 0xe7, 0x72b, 0x691, 0xf74, 0x195, 0xe6a, 0x564}, new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x396},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xceb, 0x2db, 0xeb3, 0x52, 0xf74, 0xa6}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x153},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x9d, 0xca2, 0x314, 0xd2c, 0x292, 0xe6a, 0x4b, 0xf6b, 0x756}, new uint[] {0x31c, 0xd24, 0x15a, 0xf62, 0x292},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0xdef, 0x9ad, 0xeed, 0x314}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x195},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0x8da, 0x31c, 0xc61, 0x218}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x14c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x195, 0xee0, 0x9ad}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2d3},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x195, 0xe73, 0x153}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x396},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0xd8, 0xe73, 0x195, 0xc28, 0x52}, new uint[] {0x2db, 0xce3, 0x314, 0xfad, 0x153},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x52, 0xeb1, 0xa6, 0xdef, 0x99f, 0xf59, 0x314},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf74, 0x52, 0xb5c, 0x8b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xca2, 0x6e2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xd24, 0x94},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0xa6, 0xdef, 0x9ad, 0xeed, 0x31c, 0xceb, 0x52, 0xe73, 0xcb},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0xa6, 0xcaa, 0xcb, 0xc61, 0x35d, 0xe73, 0x195},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x94, 0xcaa, 0xcb, 0xf76, 0x355, 0xc61, 0x39e},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xeb3, 0xcb},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c, 0xd3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x94, 0xc28, 0xcb},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x9ad, 0xd2d, 0x724, 0xb74, 0xde},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0xa6, 0xdef, 0x9ad, 0xeed, 0xd1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xe68, 0xcb},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xca2, 0x6e2, 0xee0, 0x2},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x9d, 0xf76, 0x314, 0xf3e, 0x2, 0xcaa, 0x195},
		new uint[] {0x2db, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x31c, 0xceb, 0x18c, 0xf3e, 0x106, 0xd24},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf74, 0x195, 0xf3e, 0x106, 0xb5c},
		new uint[] {0x31c, 0xca2, 0x292, 0xce3, 0x723, 0xee3, 0x2db, 0xe6a, 0x195, 0x89b, 0x49b, 0xe9e},
		new uint[] {0x31c, 0xca2, 0x292, 0xfad, 0x724, 0xb63, 0x2db, 0x89b, 0x49b, 0xd2c, 0x195, 0xceb},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xd2c, 0x106, 0xfb4, 0x144, 0xc28, 0x845, 0xce3},
		new uint[] {0x31c, 0xd24, 0x15a, 0xfad, 0x2db, 0x91b, 0x195, 0xce3, 0x723, 0xf59, 0x292, 0xef4},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xceb, 0x2db, 0xda6, 0x3df, 0x99e, 0x546, 0xf6f},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x564, 0xedf, 0x105, 0x755},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xfad, 0x91e, 0xce3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x15a, 0xf62, 0x106, 0xceb, 0x292, 0xe9e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf74, 0x2db, 0x91b, 0x292, 0xfad, 0x724, 0xb5c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x674, 0x2db, 0xaa0},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xf62, 0x292, 0xf3e, 0x2db, 0x8a9},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x62a, 0xc6a, 0x2db, 0xd6d},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xc61, 0x611, 0xceb},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xc61, 0x611, 0xeb1},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0x2db, 0x91b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x144, 0xceb},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x396, 0xea5, 0x14e, 0xd2c, 0x106, 0xcaa, 0x29a, 0xf6b},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x314, 0xd2c, 0x15a, 0xca2, 0x106, 0x89b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x6a3, 0xb63, 0x195, 0x8e9},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0x195, 0xca2, 0x106, 0xe6a},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0x195, 0xf74, 0x106, 0xf3e},
		new uint[] {0x396, 0xd24, 0x14e, 0xce3, 0x2d3, 0xfad, 0x195, 0xf6b, 0x106, 0xf3e, 0x52, 0xcaa}, new uint[] {0x29a, 0xfad, 0x52, 0xd2c, 0x195, 0xf59},
		new uint[] {0x195, 0xce3, 0x251, 0xe9e, 0x89, 0xfad, 0x314, 0xe73, 0x14c, 0xd2c, 0x106, 0xf6b}, new uint[] {0x29a, 0xfad, 0x52, 0xd2c, 0x31c, 0xca2},
		new uint[] {0x29a, 0xd65, 0x195, 0xfad, 0x52, 0xd2c, 0x396, 0xf74, 0x14e, 0xf3e, 0x106, 0xce3}, new uint[] {0x29a, 0xd24, 0x52, 0xceb, 0x396, 0xcaa},
		new uint[] {0x29a, 0xfad, 0x195, 0xdae, 0x251, 0xf76, 0x89, 0xf3e, 0x396, 0xcaa, 0x14e, 0xce3}, new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x396, 0xf59},
		new uint[] {0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0xcaa, 0xca, 0x8da, 0x29a, 0xc61, 0x68a, 0xeb1}, new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x396, 0xcaa},
		new uint[] {0x29a, 0xfad, 0x52, 0xce3, 0x6a3, 0xb63, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xd24}, new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x396, 0xdae},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x314, 0xceb, 0x18c, 0xeac}, new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x195, 0xfad},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x314, 0xceb, 0x18c, 0xfaf}, new uint[] {0x2db, 0xca2, 0x6e3, 0xfad, 0x52, 0xee0},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x396, 0xf59, 0x14e, 0xf3e, 0x106, 0x91c}, new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x52, 0xdae},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xca2, 0x195, 0x89b, 0x55b, 0xef2, 0x52, 0xc28}, new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x52, 0xea5},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x195, 0xca2, 0x396, 0xf3e, 0x14e, 0x89b}, new uint[] {0x2db, 0xd65, 0x29a, 0xdae, 0x52, 0xfaf},
		new uint[] {0x29a, 0xca2, 0x195, 0xfad, 0x2db, 0x89b, 0x55b, 0xd2c, 0x52, 0xe6a, 0x396, 0xee9}, new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8eb},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x29a, 0x8e9, 0x6a2, 0xa63, 0x15a, 0xd2c, 0x52, 0xceb}, new uint[] {0x31c, 0xdae, 0x2db, 0xceb, 0x52, 0xc28},
		new uint[] {0x31c, 0xceb, 0x2db, 0xdae, 0x94, 0xf76, 0x153, 0xca2, 0x18c, 0xe6a, 0x292, 0xc69}, new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x4b, 0xf76},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x35d, 0xee0, 0x153, 0xd24, 0x195, 0xe73}, new uint[] {0x31c, 0xca2, 0x52, 0xd2c, 0x396, 0xce3},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x35d, 0xfad, 0x195, 0xf3e, 0x153, 0xe6a}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x52, 0xceb},
		new uint[] {0x31c, 0xca2, 0x251, 0xe6a, 0x89, 0xd24, 0x35d, 0x91d, 0x195, 0xfad, 0x724, 0xb67}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xd65},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x35d, 0xd24}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xca2},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x18c, 0xd24}, new uint[] {0x2db, 0xce3, 0x31c, 0x8dc, 0x52, 0xd24},
		new uint[] {0x31c, 0xca2, 0x195, 0xfad, 0x724, 0xb63, 0x52, 0xd2c, 0x4a3, 0xb23, 0x2db, 0xe6a}, new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x52, 0xd24},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xdae, 0x35d, 0xe73},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xfad, 0x724, 0xb73, 0x153, 0xca2, 0x292, 0xc69},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xca2, 0x723, 0xee3, 0x195, 0x89b, 0x15a, 0x8fb},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0x724, 0xb73, 0x35d, 0xca2, 0x6e2, 0xe6a},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x18c, 0x8dc, 0x210, 0x652, 0x312, 0xe6a},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0x795, 0xd5, 0xe6a},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0x795, 0xd5, 0xef4},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xb5c, 0xcc, 0xef4, 0x31c, 0xceb, 0x2db, 0xae4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x292, 0x6d2, 0x52, 0xf59, 0x15a, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf62, 0x106, 0xf3e, 0x564, 0xa9b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xceb, 0x2db, 0xeb3, 0x52, 0x91b},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x314, 0xc61, 0x218, 0x859},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xe68, 0x31c, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x564, 0xd2c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xea5, 0x314, 0xe68},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0x314, 0xcaa, 0x4b, 0xe73, 0x153, 0xaa2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x195, 0xe6a, 0x396, 0x89a},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xb5c, 0x153, 0xd65},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0xf59},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0xf6b},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x153, 0xf74},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xca2, 0x6e3, 0xc61, 0xa6, 0xb23, 0x6a3, 0xdef},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf59, 0x8b, 0xc20},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf59, 0x8b, 0x674},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x396, 0xca2, 0x195, 0x89b, 0x55b, 0xb5c},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x210, 0x652, 0x252, 0xca2, 0x314, 0xc69},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xf3e, 0x18c, 0xce3, 0x210, 0x66b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x35d, 0xf3e, 0x195, 0xe9e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x14c, 0xe68},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0x9d, 0xca2, 0x314, 0xee9, 0x52, 0xc28, 0x210, 0xceb}, new uint[] {0x35d, 0xce3, 0x195, 0xfad, 0x314, 0xca2},
		new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0xa6, 0xca2, 0x314, 0xee9, 0x4b, 0xa49, 0x153, 0xce3}, new uint[] {0x195, 0xce3, 0x396, 0xe9e, 0x14e, 0xe73},
		new uint[] {0x2db, 0xfad, 0x195, 0xc69, 0x9d, 0xd2c, 0x314, 0xeb1, 0x4b, 0xf74, 0x3d7, 0xca2}, new uint[] {0x195, 0xce3, 0x396, 0xfad, 0x14e, 0xea5},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x52, 0xdae, 0x195, 0xf76, 0x9d, 0xceb, 0x314, 0xf3e}, new uint[] {0x195, 0xfad, 0x396, 0xce3, 0x14e, 0xdae},
		new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8e0, 0x2db, 0xfad, 0x15a, 0xcaa, 0x8b, 0xea5}, new uint[] {0x195, 0xce3, 0x29a, 0x8da, 0x314, 0xeac},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x35d, 0xcaa, 0x195, 0xe9e, 0x94, 0xee9}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xe9e},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xe6a, 0xa6, 0xd2c}, new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x396, 0xcaa},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xe6a, 0xa6, 0xee0}, new uint[] {0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xce3},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xe6a, 0xa6, 0xee9}, new uint[] {0x2db, 0xca2, 0x6e3, 0xd24, 0x31c, 0xceb},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x724, 0xb73, 0x3df, 0xc28}, new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xceb},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x724, 0xb73, 0x3df, 0xca2}, new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xb5c},
		new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x2d3, 0xfad, 0x52, 0xf59, 0x8b, 0x714}, new uint[] {0x31c, 0xce3, 0x723, 0xfad, 0x29a, 0xcaa},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0xa6, 0xdef, 0x9ad, 0xeed, 0x52, 0xcaa}, new uint[] {0x31c, 0xce3, 0x723, 0xfad, 0x29a, 0xd2c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x6a3, 0xb23, 0xa6, 0xf74, 0x314, 0xcaa}, new uint[] {0x31c, 0xdae, 0x2db, 0xceb, 0x35d, 0xf76},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0xd1, 0xd2c}, new uint[] {0x31c, 0xca2, 0x259, 0x899, 0x210, 0x650},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xa6, 0xdef, 0x99f, 0xca2, 0x6e3, 0xceb}, new uint[] {0x31c, 0xca2, 0x35d, 0xce3, 0x723, 0xfad},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xf3e, 0x210, 0x652, 0x292, 0xc61}, new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0xce3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xce3, 0x210, 0x652, 0x292, 0xe6a}, new uint[] {0x31c, 0xd24, 0x2db, 0x91b, 0x292, 0xce3},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xf76, 0x52, 0xf3e, 0x9d, 0xceb, 0x3d7, 0xca2}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0xcaa},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x3d7, 0xf3e, 0xa6, 0xca2}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xd65},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x355, 0xf3e, 0x94, 0xc69}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xfb4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0xa6, 0xb5c, 0x49c, 0x8dc, 0xcb, 0xca2}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xd65},
		new uint[] {0x29a, 0xd24, 0x396, 0xfad, 0x14e, 0xce3, 0x6a3, 0xb63, 0x195, 0xe6a, 0x106}, new uint[] {0x52, 0xca2, 0x2db, 0x89b, 0xdb, 0xe6a, 0x6df},
		new uint[] {0x2db, 0xceb, 0x29a, 0xd24, 0x195, 0x91c, 0x566, 0xd65, 0x396, 0xf74, 0x997}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0xa6},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x292, 0xfad, 0x724, 0xb63, 0x2db, 0x89b, 0x49b}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x8b},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xdae, 0x106, 0xf76, 0x144, 0xd24, 0x259}, new uint[] {0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xea5, 0x355},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x292, 0xce3, 0x724, 0x8db, 0x153, 0xe6a, 0x106}, new uint[] {0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xea5, 0x9ad},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x355, 0xd24, 0x161}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x9d},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x292, 0xe6a, 0x195, 0xee9, 0x153}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0xd1},
		new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91d, 0x195, 0xf6b, 0x2db, 0xfb4, 0x29a}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xdef},
		new uint[] {0x31c, 0xd24, 0x195, 0xd65, 0x564, 0xeed, 0x2db, 0xceb, 0x91a, 0x95c, 0x694}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xfb4},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xd65, 0x6e4, 0x95c, 0x566, 0xae3, 0x92c}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xe73, 0x15a, 0xcaa, 0x106, 0xf74, 0x6e4}, new uint[] {0x31c, 0xd24, 0x195, 0xce3, 0x723, 0xf6b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xfad, 0x6ea, 0xc6a, 0x724}, new uint[] {0x31c, 0xd24, 0x195, 0xd65, 0x564, 0xe6a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xb63, 0x9b5}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xdae},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xaa0, 0x2d3}, new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xcaa},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0xf74, 0x6e4}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x355, 0xce3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0x72b, 0x6e4}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc28},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x2d3, 0xceb, 0x29a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf74, 0x62a},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xc28, 0x314, 0xe9e, 0x15a, 0xd2c, 0x6e3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xca2, 0x6e3, 0xc61, 0x8ec, 0xcec, 0x6a1},
		new uint[] {0x396, 0xce3, 0x14e, 0xd24, 0x2d3, 0xfad, 0x195, 0xf6b, 0x106, 0xcaa, 0x52}, new uint[] {0x35d, 0xd65, 0x31c, 0x95c, 0x52, 0xfad, 0x39e},
		new uint[] {0x195, 0xca2, 0x251, 0xfad, 0x89, 0xce3, 0x314, 0xe6a, 0x161, 0xeb3, 0x106}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x314, 0xfad, 0x52},
		new uint[] {0x396, 0xce3, 0x14e, 0xfad, 0x195, 0xcaa, 0x106, 0xea5, 0x2d3, 0xd2c, 0x4b}, new uint[] {0x29a, 0xfad, 0x52, 0xd2c, 0x31c, 0xce3, 0x724},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x2d3, 0xceb, 0x31c}, new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x210},
		new uint[] {0x2db, 0xfad, 0xa6, 0xb5c, 0x99d, 0xca2, 0x355, 0xee0, 0x292, 0x72d, 0x6e3}, new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x2d3},
		new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8e0, 0x2db, 0xfad, 0x195, 0xe9e, 0x3d7}, new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x31c},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x195, 0xf76, 0x15a, 0xf3e, 0x106}, new uint[] {0x2db, 0xfad, 0x292, 0xdae, 0x4b, 0xce3, 0x195},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x195, 0xf3e, 0x724}, new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0xa6, 0xca2, 0x31c},
		new uint[] {0x31c, 0xcaa, 0x52, 0xce3, 0x195, 0x8dc, 0x49c, 0xfad, 0x72d, 0xd2d, 0x396}, new uint[] {0x2db, 0xfad, 0x29a, 0xd24, 0x6e4, 0xb5c, 0xca},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x153, 0xe6a, 0x292, 0xfad, 0x9d}, new uint[] {0x2db, 0xfad, 0x29a, 0xd24, 0x6e4, 0xb5e, 0x9d},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xfad, 0x72d, 0xd2d, 0x15a}, new uint[] {0x2db, 0xfad, 0x195, 0xceb, 0x29a, 0xe9e, 0x52},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xfad, 0x72d, 0xd2d, 0x195}, new uint[] {0x2db, 0xd65, 0x31c, 0x95c, 0x52, 0xfad, 0x39e},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xea5, 0x716, 0x96e, 0x35d}, new uint[] {0x31c, 0xe6a, 0x2db, 0xce3, 0x723, 0xee3, 0x52},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xea5, 0x716, 0x96e, 0x197}, new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8e0, 0x259},
		new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x292, 0x6d2, 0x52, 0xe6a, 0x195, 0xd2c, 0x15a}, new uint[] {0x31c, 0xfad, 0x52, 0xce3, 0x724, 0xb73, 0x92c},
		new uint[] {0x31c, 0xca2, 0x52, 0xd2c, 0x15a, 0xe6a, 0x195, 0xc28, 0x218, 0xfad, 0x2d3}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x15a},
		new uint[] {0x31c, 0xca2, 0x52, 0xe6a, 0x35d, 0xdae, 0x195, 0xf76, 0x15a, 0xd2c, 0x765}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x218},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x52, 0xf76, 0x6d1}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x396},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xf59, 0x724}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x153},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd24, 0x161}, new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x355},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xd2c, 0x39e}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0xde},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x3d7}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0x153},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0x55b, 0xfad, 0x52, 0xc28, 0x15a}, new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x15a, 0xe6a, 0x2d3},
		new uint[] {0x31c, 0xd24, 0x15a, 0xfad, 0x2d3, 0xcaa, 0x195, 0xce3, 0x691, 0xf6b, 0x52}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x52},
		new uint[] {0x31c, 0xd24, 0x52, 0xe6a, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x566}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xd65, 0x52},
		new uint[] {0x31c, 0xd24, 0x35d, 0xf62, 0x195, 0xceb, 0x292, 0xe9e, 0x764, 0xae4, 0xd8}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x15a, 0xb5c, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xf62, 0x94, 0xeed, 0x6e1}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x15a},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xf59, 0x106, 0xf3e, 0x86a}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x210},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xceb, 0x2db, 0xeb3, 0x52, 0xfad, 0x86a}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xd65, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x86a, 0xc6a, 0x2db, 0x91b, 0xdb}, new uint[] {0x2db, 0xce3, 0x195, 0xea5, 0x9d, 0xcaa, 0x314},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x86a, 0xc6a, 0x52, 0xd6d, 0x2d3}, new uint[] {0x2db, 0xfad, 0x195, 0xd2c, 0x9d, 0xce3, 0x314},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xb5c, 0xcc}, new uint[] {0x2db, 0xce3, 0x29a, 0xe6a, 0x52, 0x8da, 0x195},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x396, 0xf76, 0x14e, 0xf3e, 0x106, 0xce3, 0x9d}, new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x52, 0x8da, 0x31c},
		new uint[] {0x2db, 0xfad, 0x195, 0xce3, 0x314, 0xdae, 0x153, 0xf76, 0x4b, 0xf3e, 0x106}, new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x4b},
		new uint[] {0x2db, 0xce3, 0x29a, 0xe6a, 0x195, 0xe9e, 0x6a3, 0x795, 0x315, 0xee3, 0x52}, new uint[] {0x2db, 0xce3, 0x195, 0xea5, 0x29a, 0xd2c, 0x52},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x314, 0xea5, 0x6a3, 0xaa3, 0x52}, new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0xd8},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x31c, 0xc61, 0x724}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xcaa, 0x31c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xe73, 0x564}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x9d},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0x259}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x355},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0xd8, 0xe73, 0x61a}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x396},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x314, 0xeb1, 0x153, 0xf59, 0x4b},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xf59, 0x4b},
		new uint[] {0x259, 0xd24, 0x89, 0xd6d, 0x31c, 0xf59, 0x15a, 0xfb4, 0xe7, 0xdae, 0x9df}, new uint[] {0x195, 0xce3, 0x396, 0xfad, 0x14e, 0xcaa, 0x29a},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x195, 0xf3e, 0x94}, new uint[] {0x2db, 0xfad, 0x29a, 0xd24, 0x6e4, 0xb5e, 0x195},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf59, 0x724, 0xdef, 0x994}, new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd2c, 0x396},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x153, 0xca2, 0x723, 0xee3, 0x8b}, new uint[] {0x2db, 0xd65, 0x396, 0xdae, 0x14e, 0xf76, 0x197},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0xa9b, 0x55b, 0x91b, 0xdb, 0xfb4, 0x52}, new uint[] {0x2db, 0xd65, 0x396, 0xfad, 0x14e, 0xd2c, 0x195},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x2d3, 0xfad, 0x52, 0xceb, 0xa6}, new uint[] {0x2db, 0xd65, 0x396, 0xfad, 0x14e, 0xd2c, 0x197},
		new uint[] {0x2db, 0xfad, 0xa6, 0xce3, 0x9ad, 0xd2d, 0x314, 0xcaa, 0x153, 0xf6b, 0xd5}, new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x15a},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x4b}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x195, 0xceb, 0x15a},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x6a3, 0xb23, 0x195, 0xe73, 0x9d}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x195, 0xceb, 0x153},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xcaa, 0x210}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x195, 0xceb, 0x14c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x195, 0xcaa, 0x31c}, new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x195, 0xd24, 0x292},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0x314, 0xf3e, 0x8b}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x292, 0xce3, 0x723},
		new uint[] {0x2db, 0xd2c, 0x29a, 0xf59, 0x8b, 0xc20, 0x195, 0xceb, 0x52, 0xfad, 0x2e6}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x396, 0xc69, 0x14e},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xd1, 0xca2, 0x6e2, 0x662, 0x195}, new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x292, 0xfad, 0x153},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x8b, 0xf3e, 0x314, 0xce3, 0x6a3}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x161, 0xceb, 0x86a},
		new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xf76, 0x52, 0xf3e, 0xa6, 0xca2, 0x314}, new uint[] {0x31c, 0xd2c, 0x195, 0xce3, 0x724, 0xca2, 0x259},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x14c, 0xf3e, 0x94}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x195},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0x94}, new uint[] {0x31c, 0xd24, 0x15a, 0xf62, 0x259, 0x899, 0x35d},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0x195, 0xf3e, 0xa6}, new uint[] {0x31c, 0xd24, 0x35d, 0xf62, 0x195, 0xceb, 0x259},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x6a3, 0xb23, 0xa6, 0xcaa, 0xca}, new uint[] {0x31c, 0xd24, 0x35d, 0xf62, 0x195, 0xceb, 0x764},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xca2, 0x195, 0x89b, 0xdb}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x161},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xf3e, 0x2}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x15a, 0xd65, 0x2db},
		new uint[] {0x195, 0xce3, 0x396, 0xdae, 0x14e, 0xf76, 0x106, 0xd24, 0x2d3, 0xfb4}, new uint[] {0x2db, 0xd65, 0x31c, 0x95c, 0x52, 0xfad, 0xa6, 0xcaa},
		new uint[] {0x29a, 0xd65, 0x396, 0xd2c, 0x195, 0xfad, 0x14e, 0xf74, 0x106, 0xf3e}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x94, 0xe73},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd24, 0x6e4, 0xb5e, 0x31c, 0x7a4, 0x35d, 0x92a}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x94, 0xfad},
		new uint[] {0x31c, 0xc69, 0x2db, 0xd2c, 0x153, 0xeb1, 0x195, 0xca2, 0x292, 0x89b}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x15a, 0xf74, 0x292},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x29a, 0x8e9, 0x35d, 0xdae}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x91a},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x195, 0xe9e, 0x14c, 0xcaa}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x935},
		new uint[] {0x31c, 0xca2, 0x2d3, 0xe6a, 0x35d, 0xdae, 0x195, 0xf76, 0x14c, 0xd2c}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x2db, 0x91b, 0x15a},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xc28, 0x153, 0xdae}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xd65, 0x2db},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2db, 0x89b, 0x55b, 0xc28, 0x153, 0xf62}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x2d3},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x15a, 0xe6a, 0x292, 0xfad, 0x2d3, 0xc28},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x292, 0xe6a, 0x195, 0xeb3},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x292, 0xee9, 0x195, 0xeb3},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xedf, 0x105, 0xce3, 0x6a3, 0xda6},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0xce3},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x106, 0xef4},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xceb},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xf76},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x564, 0xef4},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x3df, 0x99e, 0x566, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x292, 0xfad, 0x2db, 0xb5c, 0x6e3, 0xf62},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x899, 0x292, 0x66b},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xce3, 0x723, 0xc61},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xa9b, 0x55b, 0x91b, 0x106, 0xfb4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xceb, 0x2db, 0xb73},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x106, 0xb5c, 0x2db, 0xc28},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x86a, 0xc6a, 0x106, 0xd6d},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x86a, 0xc6a, 0x106, 0xde7},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xc61, 0x611, 0xf62},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xc61, 0x611, 0xaa0},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x106, 0xf62},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xce3, 0x14e, 0xf76, 0x195, 0x8da},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0x195, 0xe6a},
		new uint[] {0x251, 0xd24, 0x89, 0xe6a, 0x314, 0xce3, 0x161, 0xf6b, 0x35d, 0xd6d}, new uint[] {0x314, 0xd24, 0x29a, 0xceb, 0x52, 0xe6a, 0x251, 0xfad},
		new uint[] {0x195, 0xce3, 0x251, 0xfad, 0x89, 0xd2c, 0x29a, 0xca2, 0x314, 0xe6a}, new uint[] {0x251, 0xd24, 0x89, 0xe6a, 0x314, 0xfad, 0x161, 0xceb},
		new uint[] {0x195, 0xce3, 0x396, 0xfad, 0x14e, 0xcaa, 0x251, 0xea5, 0x89, 0xd2c}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xfad, 0x89, 0xea5},
		new uint[] {0x29a, 0xc69, 0x52, 0xd2c, 0x31c, 0xeb1, 0x396, 0xd65, 0x14e, 0xfad}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xfad, 0x89, 0xe9e},
		new uint[] {0x31c, 0xdae, 0x52, 0xf76, 0x396, 0xceb, 0x14e, 0xd24, 0x2d3, 0xfb4}, new uint[] {0x29a, 0xd24, 0x52, 0xceb, 0x396, 0xeac, 0x14e, 0xe6a},
		new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x396, 0xfad, 0x14e, 0x8da, 0xd8, 0xe73}, new uint[] {0x29a, 0xd24, 0x52, 0xfad, 0x195, 0x91c, 0x566, 0xc61},
		new uint[] {0x29a, 0xfad, 0x52, 0xce3, 0x6a3, 0xb63, 0x396, 0xdae, 0x14e, 0x8e9}, new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x2db, 0x91c},
		new uint[] {0x29a, 0xfad, 0x52, 0xce3, 0x6a3, 0xb63, 0x396, 0xdae, 0x14e, 0x8d2}, new uint[] {0x29a, 0xca2, 0x52, 0xfad, 0x195, 0xce3, 0x6a3, 0xb63},
		new uint[] {0x29a, 0xd24, 0x396, 0xe6a, 0x14e, 0xdae, 0x52, 0xf76, 0x2d3, 0xd65}, new uint[] {0x2db, 0xceb, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xd65},
		new uint[] {0x2db, 0xd2c, 0x195, 0xca2, 0x29a, 0x89b, 0x55b, 0xfad, 0x52, 0xf59}, new uint[] {0x2db, 0xceb, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xe6a},
		new uint[] {0x29a, 0xca2, 0x52, 0xfad, 0x396, 0xce3, 0x6a3, 0xb63, 0x14e, 0x8f2}, new uint[] {0x31c, 0xce3, 0x723, 0xee3, 0x52, 0x8e0, 0x2db, 0xd24},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x195, 0xdae, 0x2db, 0xf76, 0x314, 0xceb}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x195, 0xcaa},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x314, 0xd24}, new uint[] {0x31c, 0xdae, 0x2db, 0xcaa, 0x195, 0xf76, 0x52, 0xce3},
		new uint[] {0x29a, 0xca2, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x195, 0xd24}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x35d, 0xdae},
		new uint[] {0x2db, 0xd24, 0x6e4, 0xe6a, 0x195, 0xef4, 0xe3, 0xd6d, 0x92d, 0xfad}, new uint[] {0x31c, 0xca2, 0x29a, 0xceb, 0x52, 0xe6a, 0x396, 0xde7},
		new uint[] {0x2db, 0xdae, 0x29a, 0xf76, 0x52, 0xca2, 0x6e3, 0xd92, 0x252, 0xd65}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x723, 0xb23},
		new uint[] {0x29a, 0xc69, 0x52, 0xeb1, 0x2db, 0xd2c, 0x31c, 0xf59, 0x355, 0xd65}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x4b, 0xe6a, 0x195, 0xfad},
		new uint[] {0x2db, 0xceb, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xca2, 0x195, 0xee0}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xef3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xd24, 0x52, 0xceb, 0x31c, 0xdae}, new uint[] {0x31c, 0xd24, 0x35d, 0xf62, 0x195, 0xceb, 0x52, 0xe73},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xceb, 0x14e, 0xcaa, 0x52, 0xef2}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xfad, 0x52, 0xcaa},
		new uint[] {0x2db, 0xd65, 0x29a, 0xfad, 0x396, 0xd2c, 0x14e, 0xf59, 0x8b, 0x674}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0x91b, 0xdb, 0xeb3},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xcaa, 0x35d, 0xce3, 0x724, 0xde7}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x292, 0xce3, 0xd8, 0xd6d},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xcaa, 0x195, 0xe9e, 0x14c, 0xd2c}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x2db, 0xceb},
		new uint[] {0x2db, 0xfad, 0x396, 0xdae, 0x14e, 0xf76, 0x31c, 0xceb, 0x52, 0xf3e}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x52, 0xfad},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x195, 0xca2}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfb4, 0x52, 0xdae},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x52, 0xdae}, new uint[] {0x2db, 0xce3, 0x31c, 0x8dc, 0x52, 0xfad, 0x355, 0x714},
		new uint[] {0x31c, 0xca2, 0x2d3, 0xe6a, 0x396, 0xce3, 0x4b, 0xfad, 0x14e, 0xd24}, new uint[] {0x2db, 0xfad, 0x29a, 0xcaa, 0x52, 0xce3, 0x314, 0xc28},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x52, 0xceb, 0x396, 0xe6a, 0x14e, 0xfad}, new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0xdae},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x2db, 0x89b, 0xdb, 0xe6a, 0x161, 0xef3}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x195, 0xfad, 0xa6, 0xf59},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xeb3, 0x195, 0xcea}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xcaa, 0x314, 0xf6b},
		new uint[] {0x31c, 0xd24, 0x2db, 0x91b, 0x292, 0x6d2, 0x15a, 0x489, 0x89, 0xce3}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0x89b},
		new uint[] {0x31c, 0xd24, 0x52, 0xe6a, 0x35d, 0x91d, 0x2db, 0xedf, 0x10c, 0xce3}, new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xf74},
		new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x35d, 0xce3, 0x764, 0xb5c, 0x195, 0xf74}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xf59, 0x8b, 0xef4},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x52, 0xb5c, 0x49c, 0xce3}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xe6a},
		new uint[] {0x2db, 0xce3, 0x31c, 0x8dc, 0x52, 0xfad, 0x355, 0x715, 0x195, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x52, 0xfad, 0x31c, 0x8dc, 0x355, 0x715, 0x195, 0xd2c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd24, 0x6e4, 0x8db, 0x314, 0xf59, 0x8b, 0x6d4},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0xc28, 0x314, 0xc61},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0x52, 0x8da, 0x218, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x31c, 0xca2, 0x6e3, 0xfad, 0x52, 0xc61},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xcaa, 0x314, 0xc28},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x14e, 0x8da, 0xd8, 0xeb3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xc69, 0x18c, 0xea8},
		new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xdae, 0x52, 0xf76, 0x31c, 0xdef},
		new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x195, 0xfad, 0x314, 0xf59, 0xca, 0x652}, new uint[] {0x35d, 0xd24, 0x764, 0xceb, 0x92b, 0xf6b, 0x195, 0xda6},
		new uint[] {0x2db, 0xd2c, 0x195, 0xc69, 0x9d, 0xeb1, 0x314, 0xceb, 0x4b, 0xe73}, new uint[] {0x396, 0xd24, 0x14e, 0xce3, 0x2d3, 0xe6a, 0x195, 0xe9e},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0xa6, 0xf74, 0x724, 0xb5c}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xfad, 0x396, 0xdae},
		new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x15a, 0xf62, 0x2d3, 0xceb, 0xa6, 0xdef}, new uint[] {0x29a, 0xcaa, 0x195, 0xce3, 0x251, 0xfad, 0x396, 0xea5},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xf74, 0x6a3, 0xb23, 0x9d, 0xfad}, new uint[] {0x29a, 0xd2c, 0x195, 0xfad, 0x396, 0xc28, 0x14e, 0xc61},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0x195, 0xf59, 0xa6, 0x8da}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x195, 0xceb, 0x29a, 0xe9e},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xca2, 0x6a3, 0xee9}, new uint[] {0x2db, 0xfad, 0x396, 0xca2, 0x6e3, 0xc61, 0x14e, 0xeb1},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xe73, 0x314, 0xf59}, new uint[] {0x2db, 0xfad, 0x195, 0xc69, 0x396, 0xeb1, 0x14e, 0xca2},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x195, 0xf3e}, new uint[] {0x2db, 0xfad, 0x29a, 0xd24, 0x6e4, 0xb5e, 0x31c, 0xceb},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xfad, 0xa6, 0xf74, 0x314, 0xb5c}, new uint[] {0x2db, 0xfad, 0x29a, 0xca2, 0x6e3, 0xc61, 0x195, 0xeb1},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xd1, 0xca2, 0x6e2, 0xe6a}, new uint[] {0x31c, 0xce3, 0x723, 0xfad, 0x2db, 0xb63, 0x29a, 0x8d9},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xe6a, 0x195, 0xceb}, new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x195, 0xae4},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0xca, 0xce3, 0x6a3, 0xb23}, new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x2db, 0xceb, 0x195, 0x8e9},
		new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x52, 0xceb, 0x94, 0xc28, 0xcb, 0xc61}, new uint[] {0x31c, 0xdae, 0x2db, 0xfad, 0x724, 0xb67, 0x39e, 0x9f6},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x94, 0xf76, 0xcb, 0xb5e}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x355, 0xd24, 0x6e3, 0xf74},
		new uint[] {0x195, 0xce3, 0x396, 0xfad, 0x14e, 0xcaa, 0x106, 0xe9e, 0x29a}, new uint[] {0x2db, 0xfad, 0xa6, 0xb5c, 0x3df, 0xca2, 0x6e3, 0xdae, 0xd3},
		new uint[] {0x2db, 0xfad, 0x396, 0xce3, 0x14e, 0xea5, 0x195, 0xd2c, 0x106}, new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0xa6, 0xf76, 0x4b, 0xce3, 0x9ad},
		new uint[] {0x31c, 0xfad, 0x724, 0xb63, 0x15a, 0x8e9, 0x691, 0xca2, 0x2d3}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x723, 0xb23, 0x52, 0xfad, 0xa6},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x723, 0xaa3, 0x29a, 0xfad, 0x6a2}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xfad, 0x724, 0xb73, 0xde},
		new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x292, 0x6d3, 0x153, 0xe6a, 0x49a}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x52, 0xf59, 0x724, 0xca2, 0x8b},
		new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x292, 0xce3, 0x723, 0xb23, 0x2db}, new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x35d, 0xce3, 0x764, 0xb5c, 0xd5},
		new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xdae, 0x6ea}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x52, 0xfad, 0xcc},
		new uint[] {0x31c, 0xca2, 0x195, 0xceb, 0x161, 0xeb3, 0x873, 0xef3, 0x29a}, new uint[] {0x2db, 0xce3, 0x52, 0xfad, 0x195, 0xdae, 0x9d, 0xf76, 0x314},
		new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x724, 0xca2, 0x6e2, 0xe6a, 0x195}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xf76, 0xd8},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x2db, 0x99e, 0x564}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x195, 0xceb, 0xa6},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x2db}, new uint[] {0x2db, 0xfad, 0x195, 0xdae, 0x29a, 0xceb, 0x52, 0xea5, 0xd1},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0xf76, 0x106}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xf76, 0x31c, 0xceb, 0xa6},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x29a}, new uint[] {0x29a, 0xd24, 0x52, 0xe6a, 0x396, 0xdae, 0x14e, 0xf76, 0x1},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x2d3}, new uint[] {0x31c, 0xdae, 0x2db, 0xf76, 0x195, 0xceb, 0x292, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x15a, 0xf62, 0x566}, new uint[] {0x31c, 0xcaa, 0x29a, 0xd24, 0x195, 0xceb, 0x2db, 0xe9e},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xf62, 0x6d1}, new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x724, 0xaa2, 0x6e2, 0xd2c},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x259, 0x8a9, 0x218}, new uint[] {0x31c, 0xca2, 0x2db, 0x89b, 0x292, 0xfad, 0x724, 0xb63},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xf62, 0x292, 0xfad, 0x259}, new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x292, 0xce3, 0x723, 0xee3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x2db, 0x91b, 0x566}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xce3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xceb, 0x2db, 0xeb3, 0x29a}, new uint[] {0x31c, 0xca2, 0x195, 0xe6a, 0x2db, 0x89b, 0x55b, 0xef2},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xf62, 0x106, 0xa9b, 0x259}, new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2d3, 0xe6a, 0x396, 0xdae},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2d3, 0xceb, 0x29a}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xce3, 0x6a3, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2d3, 0xceb, 0x86a}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x15a, 0xedf, 0x105, 0xda6},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2db, 0x91b, 0x106}, new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xf74, 0x15a, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x86a, 0xc6a, 0x106}, new uint[] {0x31c, 0xd24, 0x195, 0xd65, 0x15a, 0x95c, 0x564, 0xce3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x29a}, new uint[] {0x31c, 0xd24, 0x195, 0xd65, 0x15a, 0x95c, 0x564, 0xfad},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xceb, 0x106}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0x91b, 0x55b, 0xdae},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x62a}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x15a, 0xfad, 0x566, 0xf62},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x314, 0xd2c, 0x153, 0xca2, 0x251}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xf62, 0x292, 0xd65},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x314, 0xd2c, 0x153, 0xca2, 0x292}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2d3, 0xab4},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd24, 0x6e4, 0x8db, 0x195, 0xe6a, 0x396}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xd65},
		new uint[] {0x259, 0xd24, 0x89, 0xf59, 0x264, 0xfad, 0x29a, 0xf3e, 0x314}, new uint[] {0x29a, 0xd2c, 0x195, 0xce3, 0x251, 0xfad, 0x89, 0xca2, 0x314},
		new uint[] {0x29a, 0xfad, 0x52, 0xce3, 0x6a3, 0xb63, 0x195, 0xdae, 0x314}, new uint[] {0x29a, 0xfad, 0x52, 0xd2c, 0x195, 0xc69, 0x31c, 0xeb1, 0x153},
		new uint[] {0x2db, 0xca2, 0x195, 0xfad, 0x6e3, 0xc61, 0xa6, 0xb5c, 0x99d}, new uint[] {0x2db, 0xfad, 0x29a, 0xceb, 0x52, 0xd24, 0x314, 0xe73, 0x153},
		new uint[] {0x31c, 0xce3, 0x2db, 0x8dc, 0x52, 0xfad, 0x355, 0x715, 0x195}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x14c, 0xf76, 0x39e},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x14c, 0xf76, 0x3df}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x195, 0xf76, 0x3d7},
		new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x195, 0xf76, 0x14c}, new uint[] {0x31c, 0xceb, 0x2db, 0xfad, 0x52, 0xdae, 0x35d, 0xf76, 0x15a},
		new uint[] {0x31c, 0xcaa, 0x2db, 0xce3, 0x52, 0x8dc, 0x49c, 0xfad, 0x153}, new uint[] {0x31c, 0xca2, 0x259, 0x899, 0x210, 0xce3, 0x723, 0xee3, 0x89},
		new uint[] {0x31c, 0xca2, 0x292, 0xfad, 0x724, 0xb63, 0x195, 0xe6a, 0x50}, new uint[] {0x31c, 0xca2, 0x195, 0xd2c, 0x2d3, 0xe6a, 0x396, 0xce3, 0xcc},
		new uint[] {0x31c, 0xd2c, 0x2d3, 0xce3, 0x4b, 0xfad, 0x195, 0xe6a, 0x14c}, new uint[] {0x31c, 0xd2c, 0x2db, 0xce3, 0x723, 0xb23, 0x195, 0xeac, 0x4b},
		new uint[] {0x31c, 0xd24, 0x15a, 0xf62, 0xcc, 0xe6a, 0x292, 0xfad, 0x35d}, new uint[] {0x31c, 0xd24, 0x52, 0xfad, 0x35d, 0xce3, 0x764, 0xb5c, 0x2d3},
		new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x2d3, 0xfad, 0x4b}, new uint[] {0x31c, 0xd24, 0x35d, 0xce3, 0x723, 0x91c, 0x2d3, 0xfad, 0xcc},
		new uint[] {0x31c, 0xd24, 0x35d, 0x91d, 0x195, 0xda6, 0x15a, 0x99e, 0x52}, new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xe73, 0x15a, 0xcaa, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xceb, 0x2db, 0xfad, 0x6e4, 0xb5c, 0xe3}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x564, 0xceb, 0x915, 0xb5c, 0xcc}, new uint[] {0x31c, 0xd24, 0x195, 0xfad, 0x2db, 0x91b, 0x724, 0xb5c, 0xdb},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x14c, 0xfad, 0x2d3, 0xce3, 0x4b}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x2db, 0x91b, 0x55b, 0xedf, 0x52},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xdae, 0x2db, 0x91b, 0x4a3}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x2db, 0x91b, 0x4a3},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x2db, 0x91b, 0x55b}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x2db, 0xf59, 0x564},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xa9b, 0x55b}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x52, 0xfad, 0x161, 0xa9b, 0x106},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xfad, 0x2d3, 0xf62, 0x94}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfad, 0x52},
		new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x9d, 0xd2c, 0x314, 0xca2, 0x292}, new uint[] {0x2db, 0xce3, 0x195, 0xfad, 0x314, 0xd2c, 0x4b, 0xca2, 0x251},
		new uint[] {0x2db, 0xce3, 0x29a, 0xcaa, 0x195, 0xfad, 0xca, 0x8da, 0x29a}, new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xfad, 0x52, 0xc28, 0x31c},
		new uint[] {0x2db, 0xce3, 0x29a, 0xd2c, 0x52, 0xca2, 0x6a3, 0xb23, 0x31c}, new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x52, 0xce3, 0x195, 0xcaa, 0x6a3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x396, 0xce3, 0x195, 0xf59, 0x8b}, new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x195, 0xca2, 0x6e3},
		new uint[] {0x2db, 0xfad, 0x29a, 0xd2c, 0x52, 0xf59, 0x314, 0xca2, 0x18c}, new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xf62},
		new uint[] {0x31c, 0xd24, 0x195, 0xe6a, 0x161, 0xc28, 0x858, 0xfb4}, new uint[] {0x2db, 0xce3, 0x29a, 0x8da, 0x195, 0xc28, 0x314, 0xc61},
		new uint[] {0x2db, 0xfad, 0x29a, 0xdae, 0x396, 0xf76, 0x14e, 0xce3}};

	ulong[] knightMoves = new ulong[] { 0x20400, 0x50800, 0xa1100, 0x142200, 0x284400, 0x508800, 0xa01000, 0x402000, 0x2040004, 0x5080008, 0xa110011,
		0x14220022, 0x28440044, 0x50880088, 0xa0100010, 0x40200020, 0x204000402, 0x508000805, 0xa1100110a, 0x1422002214, 0x2844004428, 0x5088008850, 0xa0100010a0,
		0x4020002040, 0x20400040200, 0x50800080500, 0xa1100110a00, 0x142200221400, 0x284400442800, 0x508800885000, 0xa0100010a000, 0x402000204000, 0x2040004020000,
		0x5080008050000, 0xa1100110a0000, 0x14220022140000, 0x28440044280000, 0x50880088500000, 0xa0100010a00000, 0x40200020400000, 0x204000402000000, 0x508000805000000,
		0xa1100110a000000, 0x1422002214000000, 0x2844004428000000, 0x5088008850000000, 0xa0100010a0000000, 0x4020002040000000, 0x400040200000000, 0x800080500000000,
		0x1100110a00000000, 0x2200221400000000, 0x4400442800000000, 0x8800885000000000, 0x100010a000000000, 0x2000204000000000, 0x4020000000000, 0x8050000000000,
		0x110a0000000000, 0x22140000000000, 0x44280000000000, 0x88500000000000, 0x10a00000000000, 0x20400000000000};

	ulong[] kingMoves = new ulong[] {0x302, 0x705, 0xe0a, 0x1c14, 0x3828, 0x7050, 0xe0a0, 0xc040, 0x30203, 0x70507, 0xe0a0e, 0x1c141c, 0x382838, 0x705070, 0xe0a0e0,
		0xc040c0, 0x3020300, 0x7050700, 0xe0a0e00, 0x1c141c00, 0x38283800, 0x70507000, 0xe0a0e000, 0xc040c000, 0x302030000, 0x705070000, 0xe0a0e0000, 0x1c141c0000,
		0x3828380000, 0x7050700000, 0xe0a0e00000, 0xc040c00000, 0x30203000000, 0x70507000000, 0xe0a0e000000, 0x1c141c000000, 0x382838000000, 0x705070000000,
		0xe0a0e0000000, 0xc040c0000000, 0x3020300000000, 0x7050700000000, 0xe0a0e00000000, 0x1c141c00000000, 0x38283800000000, 0x70507000000000, 0xe0a0e000000000,
		0xc040c000000000, 0x302030000000000, 0x705070000000000, 0xe0a0e0000000000, 0x1c141c0000000000, 0x3828380000000000, 0x7050700000000000, 0xe0a0e00000000000,
		0xc040c00000000000, 0x203000000000000, 0x507000000000000, 0xa0e000000000000, 0x141c000000000000, 0x2838000000000000, 0x5070000000000000, 0xa0e0000000000000,
		0x40c0000000000000};

	// order is N, NE, E, SE, S, SW, W, NW
	ulong[][] rayAttacks = new ulong[][] {
		new ulong[] {0x101010101010100, 0x202020202020200, 0x404040404040400, 0x808080808080800, 0x1010101010101000, 0x2020202020202000, 0x4040404040404000, 0x8080808080808000,
			0x101010101010000, 0x202020202020000, 0x404040404040000, 0x808080808080000, 0x1010101010100000, 0x2020202020200000, 0x4040404040400000, 0x8080808080800000,
			0x101010101000000, 0x202020202000000, 0x404040404000000, 0x808080808000000, 0x1010101010000000, 0x2020202020000000, 0x4040404040000000, 0x8080808080000000,
			0x101010100000000, 0x202020200000000, 0x404040400000000, 0x808080800000000, 0x1010101000000000, 0x2020202000000000, 0x4040404000000000, 0x8080808000000000,
			0x101010000000000, 0x202020000000000, 0x404040000000000, 0x808080000000000, 0x1010100000000000, 0x2020200000000000, 0x4040400000000000, 0x8080800000000000,
			0x101000000000000, 0x202000000000000, 0x404000000000000, 0x808000000000000, 0x1010000000000000, 0x2020000000000000, 0x4040000000000000, 0x8080000000000000,
			0x100000000000000, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000,
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		new ulong[] {0x8040201008040200, 0x80402010080400, 0x804020100800, 0x8040201000, 0x80402000, 0x804000, 0x8000, 0x0, 0x4020100804020000, 0x8040201008040000, 
			0x80402010080000, 0x804020100000, 0x8040200000, 0x80400000, 0x800000, 0x0, 0x2010080402000000, 0x4020100804000000, 0x8040201008000000, 0x80402010000000, 
			0x804020000000, 0x8040000000, 0x80000000, 0x0, 0x1008040200000000, 0x2010080400000000, 0x4020100800000000, 0x8040201000000000, 0x80402000000000, 
			0x804000000000, 0x8000000000, 0x0, 0x804020000000000, 0x1008040000000000, 0x2010080000000000, 0x4020100000000000, 0x8040200000000000, 0x80400000000000, 
			0x800000000000, 0x0, 0x402000000000000, 0x804000000000000, 0x1008000000000000, 0x2010000000000000, 0x4020000000000000, 0x8040000000000000, 0x80000000000000, 
			0x0, 0x200000000000000, 0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x8000000000000000, 0x0, 0x0, 0x0, 
			0x0, 0x0, 0x0, 0x0, 0x0, 0x0},
		new ulong[] {0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80, 0x0, 0xfe00, 0xfc00, 0xf800, 0xf000, 0xe000, 0xc000, 0x8000, 0x0, 0xfe0000, 0xfc0000, 0xf80000, 0xf00000, 
			0xe00000, 0xc00000, 0x800000, 0x0, 0xfe000000, 0xfc000000, 0xf8000000, 0xf0000000, 0xe0000000, 0xc0000000, 0x80000000, 0x0, 0xfe00000000, 0xfc00000000, 
			0xf800000000, 0xf000000000, 0xe000000000, 0xc000000000, 0x8000000000, 0x0, 0xfe0000000000, 0xfc0000000000, 0xf80000000000, 0xf00000000000, 0xe00000000000, 
			0xc00000000000, 0x800000000000, 0x0, 0xfe000000000000, 0xfc000000000000, 0xf8000000000000, 0xf0000000000000, 0xe0000000000000, 0xc0000000000000,
			0x80000000000000, 0x0, 0xfe00000000000000, 0xfc00000000000000, 0xf800000000000000, 0xf000000000000000, 0xe000000000000000, 0xc000000000000000,
			0x8000000000000000, 0x0},
		new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x0, 0x204, 0x408, 0x810, 0x1020, 0x2040, 0x4080, 0x8000, 0x0, 0x20408,
			0x40810, 0x81020, 0x102040, 0x204080, 0x408000, 0x800000, 0x0, 0x2040810, 0x4081020, 0x8102040, 0x10204080, 0x20408000, 0x40800000, 0x80000000, 0x0,
			0x204081020, 0x408102040, 0x810204080, 0x1020408000, 0x2040800000, 0x4080000000, 0x8000000000, 0x0, 0x20408102040, 0x40810204080, 0x81020408000,
			0x102040800000, 0x204080000000, 0x408000000000, 0x800000000000, 0x0, 0x2040810204080, 0x4081020408000, 0x8102040800000, 0x10204080000000, 0x20408000000000,
			0x40800000000000, 0x80000000000000, 0x0},
		new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80, 0x101, 0x202, 0x404,
			0x808, 0x1010, 0x2020, 0x4040, 0x8080, 0x10101, 0x20202, 0x40404, 0x80808, 0x101010, 0x202020, 0x404040, 0x808080, 0x1010101,
			0x2020202, 0x4040404, 0x8080808, 0x10101010, 0x20202020, 0x40404040, 0x80808080, 0x101010101, 0x202020202, 0x404040404, 0x808080808,
			0x1010101010, 0x2020202020, 0x4040404040, 0x8080808080, 0x10101010101, 0x20202020202, 0x40404040404, 0x80808080808, 0x101010101010,
			0x202020202020, 0x404040404040, 0x808080808080, 0x1010101010101, 0x2020202020202, 0x4040404040404, 0x8080808080808, 0x10101010101010,
			0x20202020202020, 0x40404040404040, 0x80808080808080},
		new ulong[] {0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x0, 0x100, 0x201, 0x402, 0x804, 0x1008, 0x2010, 0x4020, 0x0,
			0x10000, 0x20100, 0x40201, 0x80402, 0x100804, 0x201008, 0x402010, 0x0, 0x1000000, 0x2010000, 0x4020100, 0x8040201, 0x10080402, 0x20100804, 0x40201008, 0x0,
			0x100000000, 0x201000000, 0x402010000, 0x804020100, 0x1008040201, 0x2010080402, 0x4020100804, 0x0, 0x10000000000, 0x20100000000, 0x40201000000, 0x80402010000,
			0x100804020100, 0x201008040201, 0x402010080402, 0x0, 0x1000000000000, 0x2010000000000, 0x4020100000000, 0x8040201000000, 0x10080402010000, 0x20100804020100,
			0x40201008040201},
		new ulong[] {0x0, 0x1, 0x3, 0x7, 0xf, 0x1f, 0x3f, 0x7f, 0x0, 0x100, 0x300, 0x700, 0xf00, 0x1f00, 0x3f00, 0x7f00, 0x0, 0x10000, 0x30000, 0x70000, 0xf0000, 0x1f0000,
			0x3f0000, 0x7f0000, 0x0, 0x1000000, 0x3000000, 0x7000000, 0xf000000, 0x1f000000, 0x3f000000, 0x7f000000, 0x0, 0x100000000, 0x300000000, 0x700000000,
			0xf00000000, 0x1f00000000, 0x3f00000000, 0x7f00000000, 0x0, 0x10000000000, 0x30000000000, 0x70000000000, 0xf0000000000, 0x1f0000000000, 0x3f0000000000,
			0x7f0000000000, 0x0, 0x1000000000000, 0x3000000000000, 0x7000000000000, 0xf000000000000, 0x1f000000000000, 0x3f000000000000, 0x7f000000000000, 0x0,
			0x100000000000000, 0x300000000000000, 0x700000000000000, 0xf00000000000000, 0x1f00000000000000, 0x3f00000000000000, 0x7f00000000000000},
		new ulong[] {0x0, 0x100, 0x10200, 0x1020400, 0x102040800, 0x10204081000, 0x1020408102000, 0x102040810204000, 0x0, 0x10000, 0x1020000, 0x102040000, 0x10204080000,
			0x1020408100000, 0x102040810200000, 0x204081020400000, 0x0, 0x1000000, 0x102000000, 0x10204000000, 0x1020408000000, 0x102040810000000, 0x204081020000000,
			0x408102040000000, 0x0, 0x100000000, 0x10200000000, 0x1020400000000, 0x102040800000000, 0x204081000000000, 0x408102000000000, 0x810204000000000, 0x0,
			0x10000000000, 0x1020000000000, 0x102040000000000, 0x204080000000000, 0x408100000000000, 0x810200000000000, 0x1020400000000000, 0x0, 0x1000000000000,
			0x102000000000000, 0x204000000000000, 0x408000000000000, 0x810000000000000, 0x1020000000000000, 0x2040000000000000, 0x0, 0x100000000000000, 0x200000000000000,
			0x400000000000000, 0x800000000000000, 0x1000000000000000, 0x2000000000000000, 0x4000000000000000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}
	};

	// initial game conditions
//	private ushort gameState = 0x1e;
	// { (white) pawn, knight, bishop, rook, queen, king, (black) pawn, knight ...} Gamestate added on as 12th item (0x1e)

	// STANDARD GAME SETUP: {0xff00, 0x42, 0x24, 0x81, 0x8, 0x10, 0xff000000000000, 0x4200000000000000, 0x2400000000000000,
	//                      0x8100000000000000, 0x800000000000000, 0x1000000000000000, 0x1e}

	// PERFT TESTING ONLY: (positions refered to my chessprogramming.wkikispaces/Perft+Results)
	// Position 3: {0x200005000, 0, 0, 0x2000000, 0, 0x100000000, 0x4080020000000, 0, 0, 0x8000000000, 0, 0x80000000, 0}



	//private ulong[] bitboardArray = new ulong[] {0x200005000, 0, 0, 0x2000000, 0, 0x100000000, 0x4080020000000, 0, 0, 0x8000000000, 0, 0x80000000, 0};

	private ulong[] bitboardArray = new ulong[] {0xff00, 0x42, 0x24, 0x81, 0x8, 0x10,
		0xff000000000000, 0x4200000000000000, 0x2400000000000000, 0x8100000000000000, 0x800000000000000, 0x1000000000000000, 0x1e};




	// human (0) or comp (1) for white 1st and black 2nd
	public int[] players;

	private int selectionX;
	private int selectionY;
	private int[] startTile = new int[] {-1,-1};
	private int[] endTile = new int[] {-1,-1};
	int startIndex;
	int endIndex;
	private int startPieceIndex;
	private int endPieceIndex;
	private bool computerMove = false;
	private bool goToComputer = false;
	private bool threeD = true;
	private int whiteTime;
	private int blackTime;
	private bool gameDone = false;
	// experimental to try to make better opening
	private int numberOfMoves = 0;
	private int maxDepth;
	List<uint> bestMoves = new List<uint>();

	private string[] across = new string[] {"a","b","c","d","e","f","g","h"};
	private string[] up = new string[] {"1","2","3","4","5","6","7","8"};
	private List<string> moveLog = new List<string>();


	private bool threadComplete = false;
	static System.Random rnd = new System.Random();

	// castling represented by moving king across two
	private int[] basicValues = new int[] {1,3,3,5,9,0,1,3,3,5,9,0};
	bool theEndGame = false;

	uint[] leastSigLookup = {
		0,  1, 48,  2, 57, 49, 28,  3,
		61, 58, 50, 42, 38, 29, 17,  4,
		62, 55, 59, 36, 53, 51, 43, 22,
		45, 39, 33, 30, 24, 18, 12,  5,
		63, 47, 56, 27, 60, 41, 37, 16,
		54, 35, 52, 21, 44, 32, 23, 11,
		46, 26, 40, 15, 34, 20, 31, 10,
		25, 14, 19,  9, 13,  8,  7,  6
	}; 
	ulong debruijnleast = 0x03f79d71b4cb0a89;

	private static ulong MostSigBitSet(ulong value)
	{
		value |= (value >> 1);
		value |= (value >> 2);
		value |= (value >> 4);
		value |= (value >> 8);
		value |= (value >> 16);
		value |= (value >> 32);

		return (value & ~(value >> 1));
	}


	private List<uint> allValidMoves(ulong[] bitboards){
		bool insertStart = false;
		List<uint> validMoves = new List<uint>(); 
		List<uint> captureMoves = new List<uint>();
		ulong whitePieces = bitboards [0] | bitboards [1] | bitboards [2] | bitboards [3] | bitboards [4] | bitboards [5];
		ulong blackPieces = bitboards [6] | bitboards [7] | bitboards [8] | bitboards [9] | bitboards [10] | bitboards [11];
		ulong occupied = whitePieces | blackPieces;
		uint capturedPiece;
		ulong destinations;
		ulong gameState = bitboards [12];

		// white turn
		if (gameState % 2 == 0) {
			
			// knights
			uint lsbIndex = 0;
			ulong knightBitBoard = bitboards [1];
			while (knightBitBoard != 0) {
				
				lsbIndex = leastSigLookup [((knightBitBoard & (~knightBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = knightMoves [lsbIndex] & (~whitePieces);
				uint destinationIndex = 0;
				while (destinations  != 0) {
					ulong destinationBit = destinations & (~destinations+1);
					if ((destinationBit & blackPieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [6]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [7]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [8]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [9]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [10]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [11]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add ( lsbIndex << 17 | destinationIndex << 11 | 1 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 1 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}
				knightBitBoard &= knightBitBoard - 1;
			}

			// king
			// commented to avoid stack
			ulong kingBitBoard = bitboards [5];
			ulong[] switchTurn = (ulong[])bitboards.Clone ();
			switchTurn [12] ^= 1;
			if (kingBitBoard == 0x10 && !CanTakeKing(switchTurn)) {
				// castling left
				if ((bitboards [3] & 0x1)!=0 && ((whitePieces | blackPieces) & 0xe)==0 && (gameState & 0x8)==0x8) {
					ulong[] boardClone = (ulong[])bitboards.Clone ();
					MakeMove (boardClone, 4 << 17 | 3 << 11 | 5 << 7 | 7 << 4);
					if (!CanTakeKing (boardClone)) {
						captureMoves.Add (4 << 17 | 2 << 11 | 5 << 7 | 7 << 4 | 8);
					}
				}
				// castling right
				if ((bitboards [3] & 0x80)!=0 && ((whitePieces | blackPieces) & 0x60)==0 && (gameState & 0x10)==0x10) {
					ulong[] boardClone = (ulong[])bitboards.Clone ();
					MakeMove (boardClone, 4 << 17 | 5 << 11 | 5 << 7 | 7 << 4);
					if (!CanTakeKing (boardClone)) {
						captureMoves.Add (4 << 17 | 6 << 11 | 5 << 7 | 7 << 4 | 4);
					}
				}
			}
			while (kingBitBoard != 0) {

				lsbIndex = leastSigLookup [((kingBitBoard & (~kingBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = kingMoves [lsbIndex] & (~whitePieces);
				uint destinationIndex = 0;
				while (destinations  != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & blackPieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [6]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [7]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [8]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [9]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [10]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [11]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add ( lsbIndex << 17 | destinationIndex << 11 | 5 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 5 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}
				kingBitBoard &= kingBitBoard - 1;
			}

			// pawns
			ulong pawnBitBoard = bitboards[0];
			while (pawnBitBoard != 0) {
				destinations = 0;
				ulong lsb = pawnBitBoard & (~pawnBitBoard+1);
				lsbIndex = leastSigLookup [(lsb * debruijnleast) >> 58];
				// basic move
				if (((lsb << 8) & occupied) == 0) {
					if ((lsb & 0xff000000000000) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						captureMoves.Add (lsbIndex << 17 | (lsbIndex + 8) << 11 | 7 << 4 | 1);
					}
					captureMoves.Add (lsbIndex << 17 | (lsbIndex + 8) << 11 | 7 << 4);
				}
				// 2 move
				if (((lsb << 16) & ~occupied & 0xff000000) != 0 && ((lsb << 8) & occupied) == 0) {
					validMoves.Add (lsbIndex << 17 | (lsbIndex + 16) << 11 | 7 << 4);
				}
				// capture left
				ulong destinationBit = (lsb&0xfefefefefefefefe) << 7;
				if ((destinationBit & blackPieces) != 0) {
					if ((destinationBit & bitboards [6]) != 0) {
						capturedPiece = 0;
					} else if ((destinationBit & bitboards [7]) != 0) {
						capturedPiece = 1 << 4;
					} else if ((destinationBit & bitboards [8]) != 0) {
						capturedPiece = 2 << 4;
					} else if ((destinationBit & bitboards [9]) != 0) {
						capturedPiece = 3 << 4;
					} else if ((destinationBit & bitboards [10]) != 0) {
						capturedPiece = 4 << 4;
					} else if ((destinationBit & bitboards [11]) != 0) {
						capturedPiece = 5 << 4;
					}
					if ((lsb & 0xff000000000000) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						captureMoves.Add (lsbIndex << 17 | (lsbIndex + 7) << 11 |capturedPiece | 1);
					}
					captureMoves.Add (lsbIndex << 17 | (lsbIndex + 7) << 11 | capturedPiece); 
				}
				// capture right
				destinationBit = (lsb&0x7f7f7f7f7f7f7f7f) << 9;
				if ((destinationBit & blackPieces) != 0) {
					if ((destinationBit & bitboards [6]) != 0) {
						capturedPiece = 0;
					} else if ((destinationBit & bitboards [7]) != 0) {
						capturedPiece = 1 << 4;
					} else if ((destinationBit & bitboards [8]) != 0) {
						capturedPiece = 2 << 4;
					} else if ((destinationBit & bitboards [9]) != 0) {
						capturedPiece = 3 << 4;
					} else if ((destinationBit & bitboards [10]) != 0) {
						capturedPiece = 4 << 4;
					} else if ((destinationBit & bitboards [11]) != 0) {
						capturedPiece = 5 << 4;
					}
					if ((lsb & 0xff000000000000) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						captureMoves.Add (lsbIndex << 17 | (lsbIndex + 9) << 11 |capturedPiece | 1);
					}
					captureMoves.Add (lsbIndex << 17 | (lsbIndex + 9) << 11 | capturedPiece); 
				}
				// en passant to the left
				if (lsbIndex + 7 == ((gameState & 0x7e0) >> 5) && (gameState & 0x800) != 0 && (lsb&0xfefefefefefefefe)!=0) {
					captureMoves.Add (lsbIndex << 17 | (lsbIndex + 7) << 11 | 6 << 4); 
				} 
				// EP right
				else if (lsbIndex + 9 == ((gameState & 0x7e0) >> 5) && (gameState & 0x800) != 0 && (lsb&0x7f7f7f7f7f7f7f7f)!=0) {
					captureMoves.Add (lsbIndex << 17 | (lsbIndex + 9) << 11 | 6 << 4); 
				}
				pawnBitBoard &= pawnBitBoard - 1;
			}

				
			// bishops
			ulong bishopBitBoard = bitboards [2];
			while (bishopBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((bishopBitBoard & (~bishopBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[1][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [1] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[3][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [3] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[5][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [5] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				uint destinationIndex = 0;
				while (destinations  != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & blackPieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [6]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [7]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [8]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [9]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [10]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [11]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add ( lsbIndex << 17 | destinationIndex << 11 | 2 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 2 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}
					
				bishopBitBoard &= bishopBitBoard - 1;
			}

			// rooks
			ulong rookBitBoard = bitboards [3];
			while (rookBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((rookBitBoard & (~rookBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[0][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [0] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[2][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [2] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[4][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [4] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[6][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [6] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);
				uint destinationIndex = 0;
				while (destinations  != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & blackPieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [6]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [7]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [8]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [9]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [10]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [11]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 3 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 3 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}

				rookBitBoard &= rookBitBoard - 1;
			}
			// queen
			ulong queenBitBoard = bitboards [4];

			while (queenBitBoard != 0) {
				ulong attacks;
				ulong blockers;
				destinations = 0;
				lsbIndex = leastSigLookup [((queenBitBoard & (~queenBitBoard+1)) * debruijnleast) >> 58];
				for (int dir = 0; dir < 3; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~whitePieces);
				}

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				for (int dir = 3; dir < 7; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [(MostSigBitSet (blockers) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~whitePieces);
				}

				uint destinationIndex = 0;
				while (destinations  != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & blackPieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [6]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [7]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [8]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [9]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [10]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [11]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 4 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 4 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}

				queenBitBoard &= queenBitBoard - 1;
			}

			// black turn
		} else {
			// knights
			uint lsbIndex = 0;
			ulong knightBitBoard = bitboards [7];
			while (knightBitBoard != 0) {
				lsbIndex = leastSigLookup [((knightBitBoard & (~knightBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = knightMoves [lsbIndex] & (~blackPieces);
				uint destinationIndex = 0;
				while (destinations != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & whitePieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [0]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [1]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [2]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [3]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [4]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [5]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 9 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 9 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}
				knightBitBoard &= knightBitBoard - 1;
			}
			// king
			// commented to avoid stack
			ulong kingBitBoard = bitboards [11];
			ulong[] switchTurn = (ulong[])bitboards.Clone ();
			switchTurn [12] ^= 1;
			if (kingBitBoard == 0x1000000000000000 && !CanTakeKing(switchTurn)) {
				if ((bitboards [9] & unchecked((ulong)0x100000000000000)) != 0 && ((whitePieces | blackPieces) & unchecked((ulong)0xe00000000000000))==0  && (gameState & 0x2)==0x2) {
					ulong[] boardClone = (ulong[])bitboards.Clone ();
					MakeMove (boardClone, 60 << 17 | 59 << 11 | 13 << 7 | 7 << 4);
					if (!CanTakeKing (boardClone)) {
						captureMoves.Add ((60 << 17 | 58 << 11 | 13 << 7 | 7 << 4 | 8));
					}
				}
				if ((bitboards [9] & unchecked((ulong)0x8000000000000000)) != 0 && ((whitePieces | blackPieces) & unchecked((ulong)0x6000000000000000))==0 && (gameState & 0x4)==0x4) {
					ulong[] boardClone = (ulong[])bitboards.Clone ();
					MakeMove (boardClone, 60 << 17 | 61 << 11 | 13 << 7 | 7 << 4);
					if (!CanTakeKing (boardClone)) {
						captureMoves.Add (60 << 17 | 62 << 11 | 13 << 7 | 7 << 4 | 4);
					}
				}
			}
			while (kingBitBoard != 0) {

				lsbIndex = leastSigLookup [((kingBitBoard & (~kingBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = kingMoves [lsbIndex] & (~blackPieces);
				uint destinationIndex = 0;
				while (destinations != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & whitePieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [0]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [1]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [2]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [3]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [4]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [5]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 13 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 13 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}
				kingBitBoard &= kingBitBoard - 1;
			}

			// pawns
			ulong pawnBitBoard = bitboards[6];
			while (pawnBitBoard != 0) {
				destinations = 0;
				ulong lsb = pawnBitBoard & (~pawnBitBoard+1);
				lsbIndex = leastSigLookup [(lsb * debruijnleast) >> 58];
				// basic move
				if (((lsb >> 8) & occupied) == 0) {
					if ((lsb & 0xff00) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						validMoves.Add (lsbIndex << 17 | (lsbIndex - 8) << 11 | 8 << 7 | 7 << 4 | 1);
					}
					validMoves.Add (lsbIndex << 17 | (lsbIndex - 8) << 11 | 8 << 7| 7 << 4);
				}
				// 2 move
				if (((lsb >> 16) & ~occupied & 0xff00000000) != 0 && ((lsb >> 8) & occupied) == 0) {
					validMoves.Add (lsbIndex << 17 | (lsbIndex - 16) << 11 |8 << 7 | 7 << 4);
				}
				// capture right
				ulong destinationBit = (lsb&0x7f7f7f7f7f7f7f7f) >> 7;
				if ((destinationBit & whitePieces) != 0) {
					if ((destinationBit & bitboards [0]) != 0) {
						capturedPiece = 0;
					} else if ((destinationBit & bitboards [1]) != 0) {
						capturedPiece = 1 << 4;
					} else if ((destinationBit & bitboards [2]) != 0) {
						capturedPiece = 2 << 4;
					} else if ((destinationBit & bitboards [3]) != 0) {
						capturedPiece = 3 << 4;
					} else if ((destinationBit & bitboards [4]) != 0) {
						capturedPiece = 4 << 4;
					} else if ((destinationBit & bitboards [5]) != 0) {
						capturedPiece = 5 << 4;
					}
					if ((lsb & 0xff00) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						captureMoves.Add (lsbIndex << 17 | (lsbIndex - 7) << 11 |8 << 7 |capturedPiece | 1);
					}
					captureMoves.Add (lsbIndex << 17 | (lsbIndex - 7) << 11 |8 << 7 | capturedPiece); 
				}
				// capture left
				destinationBit = (lsb&0xfefefefefefefefe) >> 9;
				if ((destinationBit & whitePieces) != 0) {
					if ((destinationBit & bitboards [0]) != 0) {
						capturedPiece = 0;
					} else if ((destinationBit & bitboards [1]) != 0) {
						capturedPiece = 1 << 4;
					} else if ((destinationBit & bitboards [2]) != 0) {
						capturedPiece = 2 << 4;
					} else if ((destinationBit & bitboards [3]) != 0) {
						capturedPiece = 3 << 4;
					} else if ((destinationBit & bitboards [4]) != 0) {
						capturedPiece = 4 << 4;
					} else if ((destinationBit & bitboards [5]) != 0) {
						capturedPiece = 5 << 4;
					}
					if ((lsb & 0xff00) != 0) {
						// promote to knight, queen detected automatically in next line (0 = queen on end of line)
						captureMoves.Add (lsbIndex << 17 | (lsbIndex - 9) << 11 |8 << 7 |capturedPiece | 1);
					}
					captureMoves.Add (lsbIndex << 17 | (lsbIndex - 9) << 11 | 8 << 7 |capturedPiece); 
				}
				// en passant to the right
				if (lsbIndex - 7 == ((gameState & 0x7e0) >> 5) && (gameState & 0x800) != 0 && (lsb&0x7f7f7f7f7f7f7f7f)!=0) {
					captureMoves.Add (lsbIndex << 17 | (lsbIndex - 7) << 11 |8 << 7 | 6 << 4); 
				} 
				// EP left
				else if (lsbIndex - 9 == ((gameState & 0x7e0) >> 5) && (gameState & 0x800) != 0 && (lsb&0xfefefefefefefefe)!=0) {
					captureMoves.Add (lsbIndex << 17 | (lsbIndex - 9) << 11 |8 << 7 | 6 << 4); 
				}
				pawnBitBoard &= pawnBitBoard - 1;
			}

			// bishops
			ulong bishopBitBoard = bitboards [8];
			while (bishopBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((bishopBitBoard & (~bishopBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[1][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [1] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[3][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [3] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[5][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [5] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				uint destinationIndex = 0;
				while (destinations != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & whitePieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [0]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [1]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [2]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [3]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [4]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [5]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 10 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 10 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}

				bishopBitBoard &= bishopBitBoard - 1;
			}
			// rooks
			ulong rookBitBoard = bitboards [9];
			while (rookBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((rookBitBoard & (~rookBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[0][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [0] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[2][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [2] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[4][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [4] [blockIndex];
				}

				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[6][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [6] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				uint destinationIndex = 0;
				while (destinations != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & whitePieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [0]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [1]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [2]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [3]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [4]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [5]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 11 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 11 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}

				rookBitBoard &= rookBitBoard - 1;
			}
			// queen
			ulong queenBitBoard = bitboards [10];

			while (queenBitBoard != 0) {
				ulong attacks;
				ulong blockers;
				destinations = 0;
				lsbIndex = leastSigLookup [((queenBitBoard & (~queenBitBoard+1)) * debruijnleast) >> 58];
				for (int dir = 0; dir < 3; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~blackPieces);
				}

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				for (int dir = 3; dir < 7; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [(MostSigBitSet (blockers) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~blackPieces);
				}

				uint destinationIndex = 0;
				while (destinations != 0) {
					ulong destinationBit = destinations & (~destinations+1);;
					if ((destinationBit & whitePieces) != 0) {
						insertStart = true;
						if ((destinationBit & bitboards [0]) != 0) {
							capturedPiece = 0;
						} else if ((destinationBit & bitboards [1]) != 0) {
							capturedPiece = 1 << 4;
						} else if ((destinationBit & bitboards [2]) != 0) {
							capturedPiece = 2 << 4;
						} else if ((destinationBit & bitboards [3]) != 0) {
							capturedPiece = 3 << 4;
						} else if ((destinationBit & bitboards [4]) != 0) {
							capturedPiece = 4 << 4;
						} else if ((destinationBit & bitboards [5]) != 0) {
							capturedPiece = 5 << 4;
						}
					} else {
						insertStart = false;
						capturedPiece = 7 << 4;
					}
					destinationIndex = leastSigLookup [(destinationBit * debruijnleast) >> 58];
					// destinationIndex = index of destination tile
					if (insertStart) {
						captureMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 12 << 7 | capturedPiece);
					} else {
						validMoves.Add (lsbIndex << 17 | destinationIndex << 11 | 12 << 7 | capturedPiece);
					}
					destinations &= destinations - 1;
				}

				queenBitBoard &= queenBitBoard - 1;
			}
		}
		captureMoves.AddRange (validMoves);
		return captureMoves;
	}



	private void UpdateMoveLog(uint move){
		
		string moveText;
		if ((move>>2)%2 == 1){
			moveText = "O-O";
		}else if ((move>>3)%2 == 1){
			moveText = "O-O-O";
		} else {
			uint fromTile = move >> 17;
			uint toTile = (move >> 11) & 0x3f;
			moveText = across [fromTile % 8] + up [fromTile / 8] + across [toTile % 8] + up [toTile / 8];
		}
		ulong[] boardClone = (ulong[])bitboardArray.Clone ();
		boardClone [12] ^= 1;
		if (CanTakeKing (boardClone)) {
			moveText = moveText + "+";
		}
		if (numberOfMoves % 2 == 0) {
			moveText = ((numberOfMoves + 2) / 2).ToString() + ": " + moveText;
		}
		moveLog.Add (moveText);
		if (moveLog.Count >= 9) {
			moveLog.RemoveAt (0);
			moveLog.RemoveAt (0);
		}

		moveLogText.text = "";

		if (moveLog.Count % 2 == 1) {
			moveLogText.text = moveLog [moveLog.Count - 1] + "\n";
		}
		for (int i = moveLog.Count / 2; i > 0; i--) {
			moveLogText.text += moveLog [2 * i - 2] + "  " + moveLog [2 * i - 1] + "\n";
		}
//		if (!theEndGame) {
//			int blackSum = 0;
//			int whiteSum = 0;
//			for (int x = 0; x < 8; x++) {
//				for (int y = 0; y < 8; y++) {
//					if (boardData [x, y] != -1) {
//						if (boardData [x, y] < 6) {
//							whiteSum += basicValues [boardData [x, y]];
//						} else {
//							blackSum += basicValues [boardData [x, y]];
//						}
//					}
//				}
//			}
//			if (blackSum < 14 && whiteSum < 14) {
//				pieceVals.EnterEndGame ();
//				theEndGame = true;
//			}
//		}
	}

	public void changeDimension(){
		threeD = !threeD;
		if (!threeD) {
			threePieces.SetActive (false);
			twoPieces.SetActive (true);
		} else { 
			threePieces.SetActive (true);
			twoPieces.SetActive (false);
		}
	}

	public void GameOver(){
		SceneManager.LoadScene("Menu");
	}

	void Update(){
		if (threadComplete) {
			threadComplete = false;
			CompleteComp ();
		}

		if (goToComputer) {
			goToComputer = false;
			if (numberOfMoves > 200 && players[0] == 1 && players[1] == 1) {
				return;
			}
			CompTurn ();
		}
		if (Input.GetMouseButtonUp(0) && !gameDone) {
			MouseUp ();
		}
		UpdateSelection ();
		if (computerMove) {
			computerMove = false;
			goToComputer = true;
		}
	}



	private void MouseUp(){
		int gameTurn = (int)(bitboardArray [12] % 2);
		List<uint> allMoves = allValidMoves (bitboardArray);
		// player's turn
		if (selectionX != -1 && players [gameTurn] == 0) {
			int pieceIndex = -1;
			for (int a = 0; a < 12; a++) {
				if ((bitboardArray [a] >> (selectionX + 8 * selectionY)) % 2 == 1) {
					pieceIndex = a;
					break;
				}
			}

			// own piece selected
			if (pieceIndex > -1 + 6 * gameTurn && pieceIndex < 6 + 6 * gameTurn) {
				chosen.transform.position = new Vector3 (selectionX, 0.01f, selectionY);
				chosen.SetActive (true);
				twoChosen.transform.position = new Vector3 (selectionX, selectionY, 0.01f);
				twoChosen.SetActive (true);
				startIndex = selectionX + 8 * selectionY;
				// old, needed for next else if
				startTile = new int[] { selectionX, selectionY };
				startPieceIndex = pieceIndex;

			} else if (startTile[0] != -1){
				endIndex = selectionX + 8 * selectionY;
				endPieceIndex = pieceIndex;
				endTile = new int[] { selectionX, selectionY };
				foreach (uint move in allMoves) {
					if ((move & 0x7e0000) >> 17 == startIndex && (move & 0x1f800) >> 11 == endIndex && move%2 == 0) {
						ulong[] boardClone = (ulong[])bitboardArray.Clone ();
						MakeMove (boardClone, move);
						if (!CanTakeKing (boardClone)) {
							



							if (whiteTurn.activeSelf) {
								whiteTurn.SetActive (false);
								blackTurn.SetActive (true);
							} else {
								whiteTurn.SetActive (true);
								blackTurn.SetActive (false);
							}
							chosen.SetActive (false);
							twoChosen.SetActive (false);

							// drawing castling
							if ((startPieceIndex == 5 || startPieceIndex == 11) && (startTile [0] - endTile [0]) * (startTile [0] - endTile [0]) == 4) {
								if (endTile [0] - startTile [0] == -2) {
									// left
									VisualUpdate ((uint)((startTile [1] * 8) << 17) + ((uint)(startTile [1] * 8 + 3) << 11));
								} else {
									// right
									VisualUpdate((uint)((startTile[1]*8+7)<<17) + ((uint)(startTile [1] * 8 + 5) << 11));
								}
								// drawing en passant
							} else if ((startPieceIndex == 0 || startPieceIndex == 6) && startTile [0] != endTile [0] && endPieceIndex == -1) {
								VisualUpdate ((uint)((endTile [0] + startTile [1] * 8) << 17) + (uint)((endTile [0] + startTile [1] * 8) << 11));
						
							}
							VisualUpdate ((uint)((startTile [0] + startTile [1] * 8) << 17) + (uint)((endTile [0] + endTile [1] * 8) << 11));

							// drawing promotions
							if ((startPieceIndex == 0 || startPieceIndex == 6) && endTile [1] % 7 == 0) {
								VisualUpdate ((uint)((endTile [0] + endTile [1] * 8) << 17) + (uint)((endTile [0] + endTile [1] * 8) << 11));
								GeneratePiece (endTile [0], endTile [1], 4 + 6 * gameTurn);
							}
							MakeMove (bitboardArray, move);
							startTile = new int[] { -1, -1 };
							UpdateMoveLog (move);
							numberOfMoves += 1;
							UpdateOpenings (move);
							// avoiding stack
							if (InCheckmate (bitboardArray)) {
								gameDone = true;
								gameOverButton.SetActive (true);
								Invoke ("Ending", 4.0f);

							// need to change to } else
							} else if (players [1 - gameTurn] == 1) { 
								computerMove = true; 
							}
							break;
						}
					}
				}
			}
		}
	}
	bool inOpening = true;

	private void UpdateOpenings (uint move){
		List <uint[]> newOpenings = new List<uint[]> ();
		for (int i = 0; i < openingLines.Count; i++) {
			if (openingLines[i].Length > numberOfMoves) {
				if (openingLines[i][numberOfMoves-1] == move>>11){
					newOpenings.Add (openingLines [i]);
				}
			}
		}
		if (newOpenings.Count == 0) {
			inOpening = false;
		} else {
			openingLines = newOpenings;
		}
	}



	private void Ending(){
		gameOverButton.SetActive (false);
	}


	// new


	private void CompTurn(){
	// removed from background for profiling
		new Thread(() => CompStart()) { IsBackground = true }.Start();

	}

	private void CompStart(){

		uint move;
		int turn = (int)bitboardArray[12]%2;

		if (inOpening) {
			int bestDepth = 0;
			for (int i = 0; i < openingLines.Count; i++) {
				if (openingLines [i].Length-numberOfMoves > bestDepth) {
					bestDepth = openingLines [i].Length;
				}
			}
			while (true) {
				int index = rnd.Next (openingLines.Count);
				if (openingLines [index].Length > (bestDepth-numberOfMoves) / 2) {
					move = openingLines [index][numberOfMoves];
					break;
				}
			}
		
			List <uint> allMoves = allValidMoves (bitboardArray);
			foreach(uint choice in allMoves){
				if ((choice >> 11) == move) {
					move = choice;
					break;
				}
			}
			bestMoves = new List<uint> { move };

		} else {
			NegaMax (bitboardArray, maxDepth, -100000, 100000,1);
//			int[] prog = NegaSearch (bitboardArray, maxDepth, pieceVals.FullEvaluate ((ulong[])(bitboardArray.Clone ())) * (1 - 2 * turn), -100000, 100000, new int[] {0,0,0,0,0});
//			Debug.Log (' ');
//		Debug.Log (Perft(bitboardArray,maxDepth));
//		Debug.Log (checksFound);
//			// }
		}
			threadComplete = true; 
			return;

	}

	private void CompleteComp(){
//		Debug.Log (endnodes);
		if (bestMoves.Count == 0) {
			gameDone = true;
			gameOverButton.SetActive (true);
			Invoke ("Ending", 4.0f);
			return;
		}else{
			int index = rnd.Next (bestMoves.Count);
			uint move = bestMoves[index];
//			Debug.Log (move);
			Debug.Log (' ');
//			Debug.Log(pieceVals.AdjustScore(move));

			MakeMove (bitboardArray, move);
			// updatemovelog(move)
			UpdateMoveLog (move);
			if (whiteTurn.activeSelf) {
				whiteTurn.SetActive (false);
				blackTurn.SetActive (true);
			} else {
				whiteTurn.SetActive (true);
				blackTurn.SetActive (false);
			}
			chosen.SetActive (false);
			twoChosen.SetActive (false);

			// to make next bit work
			int startPieceIndex = (int)(((move >> 7) & 7)+6*((move>>10)&1));
			int endPieceIndex = (int)(((move >> 4) & 7)+6 - 6*((move>>10)&1));
			if (endPieceIndex > 5){
				endPieceIndex = -1;
			}
			int[] startTile = new int[] { (int)((move >> 17) % 8), (int)((move >> 17) / 8 )};
			int[] endTile = new int[] { (int)(((move >> 11)&0x3f) % 8), (int)(((move >> 11)&0x3f) / 8 )};
			int gameTurn = (int)(bitboardArray [12] % 2);

			// drawing castling
			if ((startPieceIndex == 5 || startPieceIndex == 11) && (startTile [0] - endTile [0]) * (startTile [0] - endTile [0]) == 4) {
				if (endTile [0] - startTile [0] == -2) {
					// left
					VisualUpdate ((uint)((startTile [1] * 8) << 17) + ((uint)(startTile [1] * 8 + 3) << 11));
				} else {
					// right
					VisualUpdate((uint)((startTile[1]*8+7)<<17) + ((uint)(startTile [1] * 8 + 5) << 11));
				}
				// drawing en passant
			} else if ((startPieceIndex == 0 || startPieceIndex == 6) && startTile [0] != endTile [0] && endPieceIndex == -1) {
				VisualUpdate ((uint)((endTile [0] + startTile [1] * 8) << 17) + (uint)((endTile [0] + startTile [1] * 8) << 11));

			}
			VisualUpdate ((uint)((startTile [0] + startTile [1] * 8) << 17) + (uint)((endTile [0] + endTile [1] * 8) << 11));
			// drawing promotions
			if ((startPieceIndex == 0 || startPieceIndex == 6) && endTile [1] % 7 == 0) {
				VisualUpdate ((uint)((endTile [0] + endTile [1] * 8) << 17) + (uint)((endTile [0] + endTile [1] * 8) << 11));
				if (move % 2 == 0) {
					GeneratePiece (endTile [0], endTile [1], 4 + 6 * gameTurn);
				} else {
					GeneratePiece (endTile [0], endTile [1], 1 + 6 * gameTurn);
				}
			}
			numberOfMoves += 1;
			UpdateOpenings (move);
			// avoiding stack
			if (InCheckmate (bitboardArray)) {
				gameDone = true;
				gameOverButton.SetActive (true);
				Invoke ("Ending", 4.0f);

				// need to change to } else
			} else if (players [gameTurn] == 1) { 
				computerMove = true; 
			}
		}
	}

	int checksFound = 0;

	private int Perft(ulong[] bitboards, int depthLeft){
		if (depthLeft == maxDepth) {
			checksFound = 0;
		}
		if (depthLeft == 0) {
			bitboards [12] ^= 1;
			if (CanTakeKing (bitboards)) {
				checksFound += 1;
			}
			return 1;
		}
		int perft = 0;

		// find moves
		List<uint> validMoves = allValidMoves(bitboards);
		ulong gameState = bitboards [12];
		foreach (uint move in validMoves){
			MakeMove (bitboards, move);
			if(!CanTakeKing(bitboards)){
				// actually a valid move
				perft += Perft(bitboards,depthLeft-1);
			}
			bitboards [12] = gameState;
			UnMakeMove (bitboards, move);
		}
		return perft;
	}
	int endnodes = 0;
	private int NegaMax(ulong[] mainboard, int depthLeft, int alpha, int beta, int turn){
		if (depthLeft == 0) {
//			return pieceVals.FullEvaluate ((ulong[])mainboard.Clone()) * (1 - 2 * turn);
//			endnodes += 1;
			return -pieceVals.FullEvaluate ((ulong[])mainboard.Clone());
		}
		List<uint> childNodes = allValidMoves(mainboard);
		int bestValue = -1000000;
		foreach (uint childMove in childNodes) {
			ulong[] child = (ulong[])mainboard.Clone ();
			MakeMove (child, childMove);
			if (!CanTakeKing (child)) {
				int value = -NegaMax (child, depthLeft - 1, -beta, -alpha, 1 - turn);
				if (value > bestValue) {
					bestValue = value;


					if (depthLeft == maxDepth) {
						bestMoves = new List<uint> { childMove };
					}

				}
				if (value > alpha) {
					alpha = value;
				}
				if (alpha >= beta) {
					break;
				}
			}
		}
		return bestValue;
	}

	private int[] NegaSearch(ulong[] useboard, int depthLeft, int baseValue, int lowerCutoff, int upperCutOff, int[] progression){
		ulong[] mainboard = (ulong[])useboard.Clone ();
		uint theMove = 0;
		if (depthLeft == 0) {
			progression [4] = -baseValue;
			return  progression;
		}
		if (depthLeft == maxDepth) {
			bestMoves = new List<uint>();
		}

		// find moves
		List<uint> validMoves = allValidMoves(mainboard);
		if (validMoves.Count == 0) {
			mainboard [12] ^= 1;
			if (CanTakeKing(mainboard)){
				progression [4] = 10000;
				return  progression; 
			} else{
				progression [4] = 0;
				return  progression; 
			}
		}

		int bestValue = -100000; 
		ulong gameState = mainboard [12];
		foreach (uint move in validMoves){
			ulong[] bitboards = (ulong[])mainboard.Clone ();

//			ulong[] boardClone = (ulong[])bitboards.Clone ();
//			boardClone = MakeMove (boardClone, move);
			MakeMove(bitboards, move);
			ulong[] testingboard = (ulong[])bitboards.Clone ();
//			if(!CanTakeKing(boardClone)){
			if (!CanTakeKing(testingboard)){
				// actually a valid move
				// find true value of this branch
				int testValue = baseValue + pieceVals.AdjustScore (move);

				// check score adjustment
//				if (depthLeft == 1) {
//					boardClone[12] ^= 1;
//					if (CanTakeKing(boardClone)) {
//						testValue += 5;
//						boardClone[12] ^= 1;
//							if (InCheckmate (boardClone)) {
//							testValue += 4000;
//							}
//						}
//					}

//				testValue = -NegaSearch (boardClone, depthLeft - 1, -testValue,  -upperCutOff, -lowerCutoff);
				progression = NegaSearch (bitboards, depthLeft - 1, -testValue,  -upperCutOff, -lowerCutoff, (int[])progression.Clone());
				testValue = progression [4];
//				testValue = -NegaSearch (bitboards, depthLeft - 1, -testValue,  -upperCutOff, -lowerCutoff);
				if (depthLeft == maxDepth) {
	//				Debug.Log ((move).ToString() + ":  " + (-testValue).ToString());
					Debug.Log((move).ToString() + ":  " + progression[1].ToString() + ' ' + progression[2].ToString() + ' ' + progression[3].ToString() + ' '+(-testValue).ToString());
				}
				if (testValue > bestValue) {
					theMove = move;
					bestValue = testValue;
					if (depthLeft == maxDepth) {
						bestMoves = new List<uint> { move };
					}
				} else if (testValue == bestValue && depthLeft == maxDepth) {
					bestMoves.Add(move);
				}
				
				if (testValue > lowerCutoff) {
					lowerCutoff = testValue;
				} 
				if (lowerCutoff >= upperCutOff) {
					bitboards [12] = gameState;
					UnMakeMove (bitboards, move);
					break;
				}
			}
			bitboards [12] = gameState;
			UnMakeMove (bitboards, move);
		}
		if (depthLeft == maxDepth) {
			Debug.Log (' ');
		}
		progression[maxDepth-depthLeft] = (int)theMove;
		progression [4] = -bestValue;
		return progression;
	}




	private bool CanTakeKing(ulong[] bitboards){
		ulong whitePieces = bitboards [0] | bitboards [1] | bitboards [2] | bitboards [3] | bitboards [4] | bitboards [5];
		ulong blackPieces = bitboards [6] | bitboards [7] | bitboards [8] | bitboards [9] | bitboards [10] | bitboards [11];
		ulong occupied = whitePieces | blackPieces;
		ulong destinations;
		ulong gameState = bitboards [12];

		// white turn
		if (gameState % 2 == 0) {

			// knights
			uint lsbIndex = 0;
			ulong knightBitBoard = bitboards [1];
			while (knightBitBoard != 0) {

				lsbIndex = leastSigLookup [((knightBitBoard & (~knightBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = knightMoves [lsbIndex] & (~whitePieces);
				if ((destinations & bitboards [11]) != 0) {
					return true;
				}
				knightBitBoard &= knightBitBoard - 1;
			}

			// king
			ulong kingBitBoard = bitboards [5];

			while (kingBitBoard != 0) {

				lsbIndex = leastSigLookup [((kingBitBoard & (~kingBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = kingMoves [lsbIndex] & (~whitePieces);
				if ((destinations & bitboards [11]) != 0) {
					return true;
				}
				kingBitBoard &= kingBitBoard - 1;
			}

			// pawns
			ulong pawnBitBoard = bitboards[0];
			while (pawnBitBoard != 0) {
				ulong lsb = pawnBitBoard & (~pawnBitBoard+1);
				lsbIndex = leastSigLookup [(lsb * debruijnleast) >> 58];

				// capture left
				ulong destinationBit = (lsb&0xfefefefefefefefe) << 7;
				if ((destinationBit & bitboards[11]) != 0) {
					return true;
				}
				// capture right
				if ((lsb & 0x7f7f7f7f7f7f7f7f) == 0x400000) {
				}
				destinationBit = (lsb&0x7f7f7f7f7f7f7f7f) << 9;
			
				if ((destinationBit & bitboards [11]) != 0) {
					return true;
				}
				pawnBitBoard &= pawnBitBoard - 1;
			}


			// bishops
			ulong bishopBitBoard = bitboards [2];
			while (bishopBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((bishopBitBoard & (~bishopBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[1][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [1] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[3][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [3] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[5][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [5] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				if ((destinations & bitboards [11]) != 0) {
					return true;
				}

				bishopBitBoard &= bishopBitBoard - 1;
			}

			// rooks
			ulong rookBitBoard = bitboards [3];
			while (rookBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((rookBitBoard & (~rookBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[0][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [0] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[2][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [2] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[4][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [4] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				attacks = rayAttacks[6][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [6] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);


				if ((destinations & bitboards [11]) != 0) {
					return true;
				}
				rookBitBoard &= rookBitBoard - 1;
			}
			// queen
			ulong queenBitBoard = bitboards [4];

			while (queenBitBoard != 0) {
				ulong attacks;
				ulong blockers;
				destinations = 0;
				lsbIndex = leastSigLookup [((queenBitBoard & (~queenBitBoard+1)) * debruijnleast) >> 58];
				for (int dir = 0; dir < 3; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~whitePieces);
				}

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~whitePieces);

				for (int dir = 3; dir < 7; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [(MostSigBitSet (blockers) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~whitePieces);
				}

				if ((destinations & bitboards [11]) != 0) {
					return true;
				}

				queenBitBoard &= queenBitBoard - 1;
			}

			// black turn
		} else {
			// knights
			uint lsbIndex = 0;
			ulong knightBitBoard = bitboards [7];
			while (knightBitBoard != 0) {
				lsbIndex = leastSigLookup [((knightBitBoard & (~knightBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = knightMoves [lsbIndex] & (~blackPieces);
				if ((destinations & bitboards [5]) != 0) {
					return true;
				}
				knightBitBoard &= knightBitBoard - 1;
			}
			// king
			// commented to avoid stack
			ulong kingBitBoard = bitboards [11];

			while (kingBitBoard != 0) {

				lsbIndex = leastSigLookup [((kingBitBoard & (~kingBitBoard+1)) * debruijnleast) >> 58];
				// lsbIndex = index of knight on board

				destinations = kingMoves [lsbIndex] & (~blackPieces);
				if ((destinations & bitboards [5]) != 0) {
					return true;
				}
				kingBitBoard &= kingBitBoard - 1;
			}

			// pawns
			ulong pawnBitBoard = bitboards[6];
			while (pawnBitBoard != 0) {
				destinations = 0;
				ulong lsb = pawnBitBoard & (~pawnBitBoard+1);
				lsbIndex = leastSigLookup [(lsb * debruijnleast) >> 58];

				// capture right
				ulong destinationBit = (lsb&0x7f7f7f7f7f7f7f7f) >> 7;
				if ((destinationBit & bitboards[5]) != 0) {
					return true;
				}
				// capture left
				destinationBit = (lsb&0xfefefefefefefefe) >> 9;
				if ((destinationBit & bitboards[5]) != 0) {
					return true;
				}
				pawnBitBoard &= pawnBitBoard - 1;
			}

			// bishops
			ulong bishopBitBoard = bitboards [8];
			while (bishopBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((bishopBitBoard & (~bishopBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[1][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [1] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[3][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [3] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[5][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [5] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				if ((destinations & bitboards [5]) != 0) {
					return true;
				}

				bishopBitBoard &= bishopBitBoard - 1;
			}
			// rooks
			ulong rookBitBoard = bitboards [9];
			while (rookBitBoard != 0) {
				destinations = 0;
				lsbIndex = leastSigLookup [((rookBitBoard & (~rookBitBoard+1)) * debruijnleast) >> 58];

				ulong attacks = rayAttacks[0][lsbIndex];
				ulong blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [0] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[2][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [2] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[4][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [4] [blockIndex];
				}

				destinations |= attacks & (~blackPieces);

				attacks = rayAttacks[6][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [(MostSigBitSet(blockers) * debruijnleast) >> 58];
					attacks ^= rayAttacks [6] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				if ((destinations & bitboards [5]) != 0) {
					return true;
				}

				rookBitBoard &= rookBitBoard - 1;
			}
			// queen
			ulong queenBitBoard = bitboards [10];

			while (queenBitBoard != 0) {
				ulong attacks;
				ulong blockers;
				destinations = 0;
				lsbIndex = leastSigLookup [((queenBitBoard & (~queenBitBoard+1)) * debruijnleast) >> 58];
				for (int dir = 0; dir < 3; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~blackPieces);
				}

				attacks = rayAttacks[7][lsbIndex];
				blockers = attacks & (blackPieces | whitePieces);
				if (blockers != 0) {
					uint blockIndex = leastSigLookup [((blockers & (~blockers+1)) * debruijnleast) >> 58];
					attacks ^= rayAttacks [7] [blockIndex];
				}
				destinations |= attacks & (~blackPieces);

				for (int dir = 3; dir < 7; dir++) {
					attacks = rayAttacks [dir] [lsbIndex];
					blockers = attacks & (blackPieces | whitePieces);
					if (blockers != 0) {
						uint blockIndex = leastSigLookup [(MostSigBitSet (blockers) * debruijnleast) >> 58];
						attacks ^= rayAttacks [dir] [blockIndex];
					}
					destinations |= attacks & (~blackPieces);
				}

				if ((destinations & bitboards [5]) != 0) {
					return true;
				}
				queenBitBoard &= queenBitBoard - 1;
			}
		}
		return false;
	}

	private bool InCheckmate(ulong[] bitboards){
		List<uint> possibleMoves = allValidMoves(bitboards);
		ulong gameState = bitboards [12];
		foreach (uint move in possibleMoves) {
			MakeMove (bitboards, move);
			if (!CanTakeKing (bitboards)) {
				bitboards [12] = gameState;
				UnMakeMove (bitboards, move);
				return false;

				//				return false;
//			ulong[] boardClone = (ulong[])bitboards.Clone();
//			if (!CanTakeKing(MakeMove(boardClone, possibleMoves[a]))) {
//				return false;
			}
			bitboards [12] = gameState;
			UnMakeMove (bitboards, move);
		}
		return true;
	}



	//private ulong[] UnMakeMove(ulong[] bitboards, uint move){
	private void UnMakeMove(ulong[] bitboards, uint move){
		
		uint turn = ((move & 0x400) >> 10);
		uint movingPieceIndex = ((move & 0x380) >> 7) + 6 * turn;

		// castling
		if ((move & 0xc) == 4) {
			// king side
			bitboards [3 + 6 * turn] ^= (ulong)0xa0 << 56 * (int)turn;
		} else if ((move & 0xc) == 8) {
			// queen side
			bitboards [3 + 6 * turn] ^= (ulong)0x9 << 56 * (int)turn;
		}
		// possible captured piece
		uint capturedType = ((move & 0x70) >> 4);
		if (capturedType < 6) {
			bitboards [capturedType + 6 - 6 * turn] ^= ((ulong)1 << (int)((move & 0x1f800) >> 11));
		} else if (capturedType == 6) {
			// en passant, correct pawn bitboard based on en passant tile
			bitboards[6-6*turn] ^= (ulong)1<<(((int)(bitboards[12] & 0x7e0) >> 5)-8+16*(int)turn);
		}
		//swap end line pawns for promoted pieces
		if (movingPieceIndex % 6 == 0) {
			if ((move & 0x3) == 0) {
				// promote to queen
				bitboards [4 + 6 * turn] ^= (((ulong)1 << (int)((move & 0x1f800)>>11))& 0xff000000000000ff);
			} else {
				bitboards [1 + 6 * turn] ^= (((ulong)1 << (int)((move & 0x1f800)>>11))& 0xff000000000000ff);
			}
			bitboards [6 * turn] ^= (((ulong)1 << (int)((move & 0x1f800)>>11))& 0xff000000000000ff);
		}

		bitboards[movingPieceIndex] ^= ((ulong)1 << (int)((move & 0x7e0000)>>17)) + ((ulong)1 << (int)((move & 0x1f800)>>11));

		//return bitboards;
	}
	// private ulong[] MakeMove(ulong[] bitboards, uint move){
	private void MakeMove(ulong[] bitboards, uint move){
		uint turn = ((move & 0x400) >> 10);
		// move piece on its bitboard
		uint movingPieceIndex = ((move & 0x380) >> 7) + 6 * turn;
		bitboards[movingPieceIndex] ^= ((ulong)1 << (int)((move & 0x7e0000)>>17)) + ((ulong)1 << (int)((move & 0x1f800)>>11));

		//swap end line pawns for promoted pieces
		if ((move & 0x3) == 0) {
			// promote to queen
			bitboards [4 + 6 * turn] ^= (bitboards [turn * 6] & 0xff000000000000ff);
		} else {
			bitboards [1 + 6 * turn] ^= (bitboards [turn * 6] & 0xff000000000000ff);
		}
		bitboards [6 * turn] &= 0xffffffffffff00;

		// possible captured piece
		uint capturedType = ((move & 0x70) >> 4);
		if (capturedType < 6) {
			bitboards [capturedType + 6 - 6 * turn] ^= ((ulong)1 << (int)((move & 0x1f800) >> 11));
		} else if (capturedType == 6) {
			// en passant, correct pawn bitboard based on en passant tile
			bitboards[6-6*turn] ^= (ulong)1<<(((int)(bitboards[12] & 0x7e0) >> 5)-8+16*(int)turn);
		}

		// castling
		if ((move & 0xc) == 4) {
			// king side
			bitboards [3 + 6 * turn] ^= (ulong)0xa0 << 56 * (int)turn;
		} else if ((move & 0xc) == 8) {
			// queen side
			bitboards [3 + 6 * turn] ^= (ulong)0x9 << 56 * (int)turn;
		}

		// set en passant tile, en passant allowed, castling variables

		// castling
		//white
		if ((bitboards [12] & 24) != 0) {
			// king
			if (bitboards [5] != 16) {
				bitboards [12] &= 0xfe7;
			} else { 
				// rooks
				if ((bitboards [3] & 1) == 0) {
					bitboards [12] &= 0xff7;
				}
				if ((bitboards [3] & 0x80) == 0) {
					bitboards [12] &= 0xfef;
				}
			}
		}
		// black
		if ((bitboards [12] & 6) != 0) {
			// king
			if (bitboards [11] != 0x1000000000000000) {
				bitboards [12] &= 0xff9;
			} else { 
				// rooks
				if ((bitboards [9] & 0x100000000000000) == 0) {
					bitboards [12] &= 0xffd;
				}
				if ((bitboards [9] & 0x8000000000000000) == 0) {
					bitboards [12] &= 0xffb;
				}
			}
		}
		// reset en passant
		bitboards [12] &= 0x1f;
		if ((move & 0x380) == 0 && (((move & 0x7e0000) >> 17) + 16 - 32 * turn) == ((move & 0x1f800) >> 11)) {
			// en passant
		
			uint epTile = ((move & 0x7e0000) >> 17) + 8 - 16 * turn;
			bitboards [12] |= 0x800 + (epTile << 5);
		} 
			
		// change whos turn it is
		bitboards [12] ^= 1;
		// return bitboards;
	}

	private void VisualUpdate(uint move){
		uint fromIndex = ((move & 0x7e0000) >> 17);
		uint toIndex = ((move & 0x1f800) >> 11);
		int[] fromTile = new int[] { (int)(fromIndex % 8), (int)(fromIndex / 8) };
		int[] toTile = new int[] { (int)(toIndex % 8), (int)(toIndex / 8) };

		fromtwo.SetActive (true);
		fromthree.SetActive (true);
		totwo.SetActive (true);
		tothree.SetActive (true);
		fromtwo.transform.position = new Vector3 (fromTile [0], fromTile[1], 0.02f);
		totwo.transform.position = new Vector3 (toTile [0], toTile[1], 0.02f);
		fromthree.transform.position = new Vector3 (fromTile [0], 0.02f, fromTile[1]);
		tothree.transform.position = new Vector3 (toTile [0], 0.02f, toTile[1]);

		foreach (Transform child in threePieces.transform) {
				if (child.position.x == toTile [0] && child.position.z == toTile [1] && child.gameObject.CompareTag ("Piece")) {
					Destroy (child.gameObject);
				} 
			}
			foreach (Transform child in twoPieces.transform) {
				if (child.position.x == toTile [0] && child.position.y == toTile [1] && child.gameObject.CompareTag ("twoDimensionPiece")) {
					Destroy (child.gameObject);
				}
			} 


		foreach (Transform child in threePieces.transform) {
			if (child.position.x == fromTile [0] && child.position.z == fromTile [1] && child.gameObject.CompareTag ("Piece")) {
				child.position = new Vector3 (toTile [0], 0.0f, toTile [1]);

			} 
		}
		
		foreach (Transform child in twoPieces.transform){
			if (child.position.x == fromTile [0] && child.position.y == fromTile [1] && child.gameObject.CompareTag ("twoDimensionPiece")) {
				child.position = new Vector3 (toTile [0], toTile[1], 0.0f);
			}
		}
			
	}
	/// edited
	public Transform topRight;
	public Transform bottomLeft;

	private void UpdateSelection(){
		if (!Camera.main) {
			return;
		}
		if (computerMove) {
			selection.SetActive (false);
			twoSelection.SetActive (false);
			return;
		}
		if (threeD) {
			twoSelection.SetActive (false);
			RaycastHit hit;
			if (Physics.Raycast (Camera.main.ScreenPointToRay (Input.mousePosition), out hit, 50.0f, LayerMask.GetMask ("ChessPlane"))) {
				selectionX = (int)(hit.point.x + 0.5);
				selectionY = (int)(hit.point.z + 0.5);
				selection.SetActive (true);
			} else {
				selection.SetActive (false);
				selectionX = -1;
				selectionY = -1;
			}
			selection.transform.position = new Vector3 (selectionX, 0.01f, selectionY);
		} else {

			/////// edited
			Vector3 offset = Camera.main.WorldToScreenPoint(bottomLeft.position);
			Vector3 maxim =  Camera.main.WorldToScreenPoint(topRight.position);
	
			/////
			selection.SetActive (false);
			float x = Input.mousePosition.x;
			float y = Input.mousePosition.y;
			if (x>offset.x && x<maxim.x && y>offset.y && y<maxim.y){
				selectionX = (int)((x-offset.x)/((maxim.x - offset.x)/8));
				selectionY = (int)((y-offset.y)/((maxim.y - offset.y)/8));
				twoSelection.SetActive (true);
			} else {
				twoSelection.SetActive (false);
				selectionX = -1;
				selectionY = -1;
			}
			twoSelection.transform.position = new Vector3 (selectionX, selectionY, 0.02f);
		}
	}

	void DecreaseTime(){
		if (bitboardArray[12]%2 == 0) {
			if (whiteTime > 0) {
				whiteTime -= 1;
				whiteTimeText.text = "White: " + whiteTime / 60 + ":" + new System.String('0', ((whiteTime % 60).ToString ().Length) % 2) + (whiteTime % 60).ToString ();
				if (whiteTime == 0) {
					gameDone = true;
					gameOverButton.SetActive (true);
					Invoke ("Ending", 4.0f);
				}
			}
		} else if (blackTime > 0) {
			blackTime -= 1;
			blackTimeText.text = "Black: " + blackTime / 60 + ":" + new System.String('0', ((blackTime % 60).ToString ().Length) % 2) + (blackTime % 60).ToString ();
			if (blackTime == 0) {
				gameDone = true;
				gameOverButton.SetActive (true);
				Invoke ("Ending", 4.0f);
			}
		}
	}


	void Start (){


		moveLogText.text = "";

		maxDepth = PlayerPrefs.GetInt ("Depth");
		blackTurn.SetActive (false);
		whiteTurn.SetActive (true);
		players = new int[] { 0, 0 };
		whiteTime =  PlayerPrefs.GetInt("WhiteTime") * 60;
		blackTime = PlayerPrefs.GetInt("BlackTime") * 60;
		InvokeRepeating("DecreaseTime", 1.0f, 1.0f);
		if (whiteTime == 0) {
			whiteTimeText.text = "";
		} else {
			whiteTimeText.text = "White: " + whiteTime / 60 + ":" + new System.String('0', ((whiteTime % 60).ToString ().Length) % 2) + (whiteTime % 60).ToString ();
		}
		if (blackTime == 0) {
			blackTimeText.text = "";
		} else {
			blackTimeText.text = "Black: " + blackTime / 60 + ":" + new System.String('0', ((blackTime % 60).ToString ().Length) % 2) + (blackTime % 60).ToString ();
		}

		string white = PlayerPrefs.GetString("White");
		if (white != "Player") {
			players [0] = 1;
			computerMove = true;
		}
		string black = PlayerPrefs.GetString("Black");
		if (black != "Player") {
			players [1] = 1;
		}

		// Generate starting board
		// Pawns
		for (int i = 0; i<8; i++){
			GeneratePiece(i,1,0);
			GeneratePiece(i,6,6);
			}
		// Rooks
		for (int i = 0; i < 2; i++) {
			GeneratePiece (0, 7 * i,  3 + 6 * i);
			GeneratePiece (7, 7 * i,  3 + 6 * i);
		}
		// Knights
		for (int i = 0; i < 2; i++) {
			GeneratePiece (1, 7 * i,  1 + 6 * i);
			GeneratePiece (6, 7 * i,  1 + 6 * i);
		}
		// Bishops
		for (int i = 0; i < 2; i++) {
			GeneratePiece (2, 7 * i,  2 + 6 * i);
			GeneratePiece (5, 7 * i,  2 + 6 * i);
		}
		// Royalty
		for (int i = 0; i < 2; i++) {
			GeneratePiece (3, 7 * i, 4 + 6 * i);
			GeneratePiece (4, 7 * i, 5 + 6 * i);
		}

	}
		
	private void GeneratePiece(int x, int y, int pieceIndex){
		GameObject go = Instantiate (GetPiece(pieceIndex));
		go.transform.position = (Vector3.right * x) + (Vector3.forward * y);
		go.transform.parent = threePieces.transform;
		GameObject twoDimPiece = Instantiate (GetPieceTwo (pieceIndex));
		twoDimPiece.transform.position = (Vector3.right * x) + (Vector3.up * y);
		twoDimPiece.transform.parent = twoPieces.transform;
	}

	private GameObject GetPieceTwo(int pieceIndex){
		return twoDimensionPieces [pieceIndex];
	}

	private GameObject GetPiece(int pieceIndex){
		return piecePrefabs [pieceIndex];
	}
}
